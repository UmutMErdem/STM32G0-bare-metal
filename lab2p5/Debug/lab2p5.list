
lab2p5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000e4  08000000  08000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .init         00000004  080000e4  080000e4  000100e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .fini         00000004  080000e8  080000e8  000100e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .data         00000000  20000000  20000000  000100ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          00000000  20000000  20000000  00000000  2**0
                  ALLOC
  5 .ARM.attributes 00000028  00000000  00000000  000100ec  2**0
                  CONTENTS, READONLY
  6 .debug_line   0000009c  00000000  00000000  00010114  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_line_str 0000002c  00000000  00000000  000101b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_info   00000025  00000000  00000000  000101dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_abbrev 00000014  00000000  00000000  00010201  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_aranges 00000020  00000000  00000000  00010218  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_str    00000038  00000000  00000000  00010238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000000 <vector_table>:
 8000000:	20002000 	.word	0x20002000
 8000004:	08000021 	.word	0x08000021
 8000008:	08000057 	.word	0x08000057
 800000c:	08000057 	.word	0x08000057
 8000010:	20000000 	.word	0x20000000
 8000014:	20000000 	.word	0x20000000
 8000018:	20000000 	.word	0x20000000
 800001c:	20000000 	.word	0x20000000

08000020 <Reset_Handler>:

/* reset handler */
.section .text
Reset_Handler:
	/* set stack pointer */
	ldr r0, =_estack
 8000020:	4822      	ldr	r0, [pc, #136]	; (80000ac <delay+0x8>)
	mov sp, r0
 8000022:	4685      	mov	sp, r0

	/* initialize data and bss
	 * not necessary for rom only code
	 * */
	bl init_data
 8000024:	f000 f803 	bl	800002e <init_data>
	/* call main */
	bl main
 8000028:	f000 f816 	bl	8000058 <main>
	/* trap if returned */
	b .
 800002c:	e7fe      	b.n	800002c <Reset_Handler+0xc>

0800002e <init_data>:
/* initialize data and bss sections */
.section .text
init_data:

	/* copy rom to ram */
	ldr r0, =_sdata
 800002e:	4820      	ldr	r0, [pc, #128]	; (80000b0 <delay+0xc>)
	ldr r1, =_edata
 8000030:	4920      	ldr	r1, [pc, #128]	; (80000b4 <delay+0x10>)
	ldr r2, =_sidata
 8000032:	4a21      	ldr	r2, [pc, #132]	; (80000b8 <delay+0x14>)
	movs r3, #0
 8000034:	2300      	movs	r3, #0
	b LoopCopyDataInit
 8000036:	e002      	b.n	800003e <LoopCopyDataInit>

08000038 <CopyDataInit>:

	CopyDataInit:
		ldr r4, [r2, r3]
 8000038:	58d4      	ldr	r4, [r2, r3]
		str r4, [r0, r3]
 800003a:	50c4      	str	r4, [r0, r3]
		adds r3, r3, #4
 800003c:	3304      	adds	r3, #4

0800003e <LoopCopyDataInit>:

	LoopCopyDataInit:
		adds r4, r0, r3
 800003e:	18c4      	adds	r4, r0, r3
		cmp r4, r1
 8000040:	428c      	cmp	r4, r1
		bcc CopyDataInit
 8000042:	d3f9      	bcc.n	8000038 <CopyDataInit>

	/* zero bss */
	ldr r2, =_sbss
 8000044:	4a1d      	ldr	r2, [pc, #116]	; (80000bc <delay+0x18>)
	ldr r4, =_ebss
 8000046:	4c1e      	ldr	r4, [pc, #120]	; (80000c0 <delay+0x1c>)
	movs r3, #0
 8000048:	2300      	movs	r3, #0
	b LoopFillZerobss
 800004a:	e001      	b.n	8000050 <LoopFillZerobss>

0800004c <FillZerobss>:

	FillZerobss:
		str  r3, [r2]
 800004c:	6013      	str	r3, [r2, #0]
		adds r2, r2, #4
 800004e:	3204      	adds	r2, #4

08000050 <LoopFillZerobss>:

	LoopFillZerobss:
		cmp r2, r4
 8000050:	42a2      	cmp	r2, r4
		bcc FillZerobss
 8000052:	d3fb      	bcc.n	800004c <FillZerobss>

	bx lr
 8000054:	4770      	bx	lr

08000056 <Default_Handler>:


/* default handler */
.section .text
Default_Handler:
	b Default_Handler
 8000056:	e7fe      	b.n	8000056 <Default_Handler>

08000058 <main>:

/* main function */
.section .text
main:
	/* enable GPIOB clock on IOPENR */
    ldr r6, =RCC_IOPENR
 8000058:	4e1a      	ldr	r6, [pc, #104]	; (80000c4 <delay+0x20>)
    ldr r2, [r6]
 800005a:	6832      	ldr	r2, [r6, #0]
   // Configure the GPIOB for PB pins
    movs r4, 0x2
 800005c:	2402      	movs	r4, #2
    orrs r2, r2, r4
 800005e:	4322      	orrs	r2, r4
    str r2, [r6]
 8000060:	6032      	str	r2, [r6, #0]

    ldr r1, =GPIOB_MODER
 8000062:	4919      	ldr	r1, [pc, #100]	; (80000c8 <delay+0x24>)
    ldr r2, [r1]
 8000064:	680a      	ldr	r2, [r1, #0]
    ldr r4, =0xFFFF0
 8000066:	4c19      	ldr	r4, [pc, #100]	; (80000cc <delay+0x28>)
    bics r2, r2, r4
 8000068:	43a2      	bics	r2, r4
    ldr r4, =0x55550
 800006a:	4c19      	ldr	r4, [pc, #100]	; (80000d0 <delay+0x2c>)
	orrs r2, r2, r4
 800006c:	4322      	orrs	r2, r4
    str r2, [r1]
 800006e:	600a      	str	r2, [r1, #0]
	ldr r1, =GPIOB_ODR
 8000070:	4918      	ldr	r1, [pc, #96]	; (80000d4 <delay+0x30>)
    ldr r2,= 0x1c
 8000072:	4a19      	ldr	r2, [pc, #100]	; (80000d8 <delay+0x34>)
    str r2, [r1]
 8000074:	600a      	str	r2, [r1, #0]
    ldr r3, =600000
 8000076:	4b19      	ldr	r3, [pc, #100]	; (80000dc <delay+0x38>)
   	bl delay
 8000078:	f000 f814 	bl	80000a4 <delay>

0800007c <leftDirect>:

leftDirect:
        ldr r2, [r1]
 800007c:	680a      	ldr	r2, [r1, #0]
       	lsls r2, #1
 800007e:	0052      	lsls	r2, r2, #1
       	ldr r4, =0x380
 8000080:	4c17      	ldr	r4, [pc, #92]	; (80000e0 <delay+0x3c>)
       	str r2, [r1]
 8000082:	600a      	str	r2, [r1, #0]
       	ldr r3, =600000
 8000084:	4b15      	ldr	r3, [pc, #84]	; (80000dc <delay+0x38>)
       	bl delay
 8000086:	f000 f80d 	bl	80000a4 <delay>
       	cmp r2, r4
 800008a:	42a2      	cmp	r2, r4
       	beq RightDirect
 800008c:	d000      	beq.n	8000090 <RightDirect>
       	b  leftDirect
 800008e:	e7f5      	b.n	800007c <leftDirect>

08000090 <RightDirect>:

RightDirect:
        ldr r2, [r1]
 8000090:	680a      	ldr	r2, [r1, #0]
       	lsrs r2, #1
 8000092:	0852      	lsrs	r2, r2, #1
       	ldr r4, =0x1c
 8000094:	4c10      	ldr	r4, [pc, #64]	; (80000d8 <delay+0x34>)
       	str r2, [r1]
 8000096:	600a      	str	r2, [r1, #0]
       	ldr r3, =600000
 8000098:	4b10      	ldr	r3, [pc, #64]	; (80000dc <delay+0x38>)
       	bl delay
 800009a:	f000 f803 	bl	80000a4 <delay>
       	cmp r2,r4
 800009e:	42a2      	cmp	r2, r4
       	beq leftDirect
 80000a0:	d0ec      	beq.n	800007c <leftDirect>
       	b  RightDirect
 80000a2:	e7f5      	b.n	8000090 <RightDirect>

080000a4 <delay>:


delay:
    	subs r3, #1 // r1 = r1 - 1
 80000a4:	3b01      	subs	r3, #1
		bne delay // r1 is not equal to 0.
 80000a6:	d1fd      	bne.n	80000a4 <delay>
		bx lr // r1 is equal to 0.
 80000a8:	4770      	bx	lr
	/* for(;;); */

b .
 80000aa:	e7fe      	b.n	80000aa <delay+0x6>
	ldr r0, =_estack
 80000ac:	20002000 	.word	0x20002000
	ldr r0, =_sdata
 80000b0:	20000000 	.word	0x20000000
	ldr r1, =_edata
 80000b4:	20000000 	.word	0x20000000
	ldr r2, =_sidata
 80000b8:	080000ec 	.word	0x080000ec
	ldr r2, =_sbss
 80000bc:	20000000 	.word	0x20000000
	ldr r4, =_ebss
 80000c0:	20000000 	.word	0x20000000
    ldr r6, =RCC_IOPENR
 80000c4:	40021034 	.word	0x40021034
    ldr r1, =GPIOB_MODER
 80000c8:	50000400 	.word	0x50000400
    ldr r4, =0xFFFF0
 80000cc:	000ffff0 	.word	0x000ffff0
    ldr r4, =0x55550
 80000d0:	00055550 	.word	0x00055550
	ldr r1, =GPIOB_ODR
 80000d4:	50000414 	.word	0x50000414
    ldr r2,= 0x1c
 80000d8:	0000001c 	.word	0x0000001c
    ldr r3, =600000
 80000dc:	000927c0 	.word	0x000927c0
       	ldr r4, =0x380
 80000e0:	00000380 	.word	0x00000380

Disassembly of section .init:

080000e4 <_init>:
 80000e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80000e6:	46c0      	nop			; (mov r8, r8)

Disassembly of section .fini:

080000e8 <_fini>:
 80000e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80000ea:	46c0      	nop			; (mov r8, r8)
