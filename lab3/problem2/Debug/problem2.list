
problem2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000004b4  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000570  08000570  00020008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000570  08000570  00020008  2**0
                  CONTENTS
  4 .ARM          00000000  08000570  08000570  00020008  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000570  08000570  00020008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000570  08000570  00010570  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000574  08000574  00010574  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000008  20000000  08000578  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000024  20000008  08000580  00020008  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  08000580  0002002c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020030  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001799  00000000  00000000  00020073  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000069e  00000000  00000000  0002180c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000220  00000000  00000000  00021eb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000183  00000000  00000000  000220d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001357d  00000000  00000000  00022253  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00002364  00000000  00000000  000357d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007da27  00000000  00000000  00037b34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000644  00000000  00000000  000b555c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004f  00000000  00000000  000b5ba0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000008 	.word	0x20000008
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08000558 	.word	0x08000558

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	2000000c 	.word	0x2000000c
 8000100:	08000558 	.word	0x08000558

08000104 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000104:	b580      	push	{r7, lr}
 8000106:	b082      	sub	sp, #8
 8000108:	af00      	add	r7, sp, #0
 800010a:	0002      	movs	r2, r0
 800010c:	1dfb      	adds	r3, r7, #7
 800010e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000110:	1dfb      	adds	r3, r7, #7
 8000112:	781b      	ldrb	r3, [r3, #0]
 8000114:	2b7f      	cmp	r3, #127	; 0x7f
 8000116:	d809      	bhi.n	800012c <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000118:	1dfb      	adds	r3, r7, #7
 800011a:	781b      	ldrb	r3, [r3, #0]
 800011c:	001a      	movs	r2, r3
 800011e:	231f      	movs	r3, #31
 8000120:	401a      	ands	r2, r3
 8000122:	4b04      	ldr	r3, [pc, #16]	; (8000134 <__NVIC_EnableIRQ+0x30>)
 8000124:	2101      	movs	r1, #1
 8000126:	4091      	lsls	r1, r2
 8000128:	000a      	movs	r2, r1
 800012a:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 800012c:	46c0      	nop			; (mov r8, r8)
 800012e:	46bd      	mov	sp, r7
 8000130:	b002      	add	sp, #8
 8000132:	bd80      	pop	{r7, pc}
 8000134:	e000e100 	.word	0xe000e100

08000138 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000138:	b590      	push	{r4, r7, lr}
 800013a:	b083      	sub	sp, #12
 800013c:	af00      	add	r7, sp, #0
 800013e:	0002      	movs	r2, r0
 8000140:	6039      	str	r1, [r7, #0]
 8000142:	1dfb      	adds	r3, r7, #7
 8000144:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000146:	1dfb      	adds	r3, r7, #7
 8000148:	781b      	ldrb	r3, [r3, #0]
 800014a:	2b7f      	cmp	r3, #127	; 0x7f
 800014c:	d828      	bhi.n	80001a0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800014e:	4a2f      	ldr	r2, [pc, #188]	; (800020c <__NVIC_SetPriority+0xd4>)
 8000150:	1dfb      	adds	r3, r7, #7
 8000152:	781b      	ldrb	r3, [r3, #0]
 8000154:	b25b      	sxtb	r3, r3
 8000156:	089b      	lsrs	r3, r3, #2
 8000158:	33c0      	adds	r3, #192	; 0xc0
 800015a:	009b      	lsls	r3, r3, #2
 800015c:	589b      	ldr	r3, [r3, r2]
 800015e:	1dfa      	adds	r2, r7, #7
 8000160:	7812      	ldrb	r2, [r2, #0]
 8000162:	0011      	movs	r1, r2
 8000164:	2203      	movs	r2, #3
 8000166:	400a      	ands	r2, r1
 8000168:	00d2      	lsls	r2, r2, #3
 800016a:	21ff      	movs	r1, #255	; 0xff
 800016c:	4091      	lsls	r1, r2
 800016e:	000a      	movs	r2, r1
 8000170:	43d2      	mvns	r2, r2
 8000172:	401a      	ands	r2, r3
 8000174:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000176:	683b      	ldr	r3, [r7, #0]
 8000178:	019b      	lsls	r3, r3, #6
 800017a:	22ff      	movs	r2, #255	; 0xff
 800017c:	401a      	ands	r2, r3
 800017e:	1dfb      	adds	r3, r7, #7
 8000180:	781b      	ldrb	r3, [r3, #0]
 8000182:	0018      	movs	r0, r3
 8000184:	2303      	movs	r3, #3
 8000186:	4003      	ands	r3, r0
 8000188:	00db      	lsls	r3, r3, #3
 800018a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800018c:	481f      	ldr	r0, [pc, #124]	; (800020c <__NVIC_SetPriority+0xd4>)
 800018e:	1dfb      	adds	r3, r7, #7
 8000190:	781b      	ldrb	r3, [r3, #0]
 8000192:	b25b      	sxtb	r3, r3
 8000194:	089b      	lsrs	r3, r3, #2
 8000196:	430a      	orrs	r2, r1
 8000198:	33c0      	adds	r3, #192	; 0xc0
 800019a:	009b      	lsls	r3, r3, #2
 800019c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800019e:	e031      	b.n	8000204 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80001a0:	4a1b      	ldr	r2, [pc, #108]	; (8000210 <__NVIC_SetPriority+0xd8>)
 80001a2:	1dfb      	adds	r3, r7, #7
 80001a4:	781b      	ldrb	r3, [r3, #0]
 80001a6:	0019      	movs	r1, r3
 80001a8:	230f      	movs	r3, #15
 80001aa:	400b      	ands	r3, r1
 80001ac:	3b08      	subs	r3, #8
 80001ae:	089b      	lsrs	r3, r3, #2
 80001b0:	3306      	adds	r3, #6
 80001b2:	009b      	lsls	r3, r3, #2
 80001b4:	18d3      	adds	r3, r2, r3
 80001b6:	3304      	adds	r3, #4
 80001b8:	681b      	ldr	r3, [r3, #0]
 80001ba:	1dfa      	adds	r2, r7, #7
 80001bc:	7812      	ldrb	r2, [r2, #0]
 80001be:	0011      	movs	r1, r2
 80001c0:	2203      	movs	r2, #3
 80001c2:	400a      	ands	r2, r1
 80001c4:	00d2      	lsls	r2, r2, #3
 80001c6:	21ff      	movs	r1, #255	; 0xff
 80001c8:	4091      	lsls	r1, r2
 80001ca:	000a      	movs	r2, r1
 80001cc:	43d2      	mvns	r2, r2
 80001ce:	401a      	ands	r2, r3
 80001d0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80001d2:	683b      	ldr	r3, [r7, #0]
 80001d4:	019b      	lsls	r3, r3, #6
 80001d6:	22ff      	movs	r2, #255	; 0xff
 80001d8:	401a      	ands	r2, r3
 80001da:	1dfb      	adds	r3, r7, #7
 80001dc:	781b      	ldrb	r3, [r3, #0]
 80001de:	0018      	movs	r0, r3
 80001e0:	2303      	movs	r3, #3
 80001e2:	4003      	ands	r3, r0
 80001e4:	00db      	lsls	r3, r3, #3
 80001e6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80001e8:	4809      	ldr	r0, [pc, #36]	; (8000210 <__NVIC_SetPriority+0xd8>)
 80001ea:	1dfb      	adds	r3, r7, #7
 80001ec:	781b      	ldrb	r3, [r3, #0]
 80001ee:	001c      	movs	r4, r3
 80001f0:	230f      	movs	r3, #15
 80001f2:	4023      	ands	r3, r4
 80001f4:	3b08      	subs	r3, #8
 80001f6:	089b      	lsrs	r3, r3, #2
 80001f8:	430a      	orrs	r2, r1
 80001fa:	3306      	adds	r3, #6
 80001fc:	009b      	lsls	r3, r3, #2
 80001fe:	18c3      	adds	r3, r0, r3
 8000200:	3304      	adds	r3, #4
 8000202:	601a      	str	r2, [r3, #0]
}
 8000204:	46c0      	nop			; (mov r8, r8)
 8000206:	46bd      	mov	sp, r7
 8000208:	b003      	add	sp, #12
 800020a:	bd90      	pop	{r4, r7, pc}
 800020c:	e000e100 	.word	0xe000e100
 8000210:	e000ed00 	.word	0xe000ed00

08000214 <main>:
void LedToggle(void);
void ButtonInit(void);
void InitTimer(void);
void EXTI0_1_IRQHandler(void);

int main(void) {
 8000214:	b580      	push	{r7, lr}
 8000216:	af00      	add	r7, sp, #0

	LedInit();
 8000218:	f000 f890 	bl	800033c <LedInit>
	ButtonInit();
 800021c:	f000 f8c0 	bl	80003a0 <ButtonInit>
	InitTimer();
 8000220:	f000 f836 	bl	8000290 <InitTimer>

	TIM3->PSC = 1000*PSC_val; // in the beginning, PSC= 1000 for 1s.
 8000224:	4b16      	ldr	r3, [pc, #88]	; (8000280 <main+0x6c>)
 8000226:	681a      	ldr	r2, [r3, #0]
 8000228:	0013      	movs	r3, r2
 800022a:	015b      	lsls	r3, r3, #5
 800022c:	1a9b      	subs	r3, r3, r2
 800022e:	009b      	lsls	r3, r3, #2
 8000230:	189b      	adds	r3, r3, r2
 8000232:	00db      	lsls	r3, r3, #3
 8000234:	001a      	movs	r2, r3
 8000236:	4b13      	ldr	r3, [pc, #76]	; (8000284 <main+0x70>)
 8000238:	629a      	str	r2, [r3, #40]	; 0x28

	while(1){

		if(flag){ // When the button is pressed, the flag will be equal to 1 and will enter the if block.
 800023a:	4b13      	ldr	r3, [pc, #76]	; (8000288 <main+0x74>)
 800023c:	781b      	ldrb	r3, [r3, #0]
 800023e:	2b00      	cmp	r3, #0
 8000240:	d0fb      	beq.n	800023a <main+0x26>
			PSC_val++; //PSC_val is increasing once.
 8000242:	4b0f      	ldr	r3, [pc, #60]	; (8000280 <main+0x6c>)
 8000244:	681b      	ldr	r3, [r3, #0]
 8000246:	1c5a      	adds	r2, r3, #1
 8000248:	4b0d      	ldr	r3, [pc, #52]	; (8000280 <main+0x6c>)
 800024a:	601a      	str	r2, [r3, #0]
			delay(2000000);
 800024c:	4b0f      	ldr	r3, [pc, #60]	; (800028c <main+0x78>)
 800024e:	0018      	movs	r0, r3
 8000250:	f000 f864 	bl	800031c <delay>
			TIM3->PSC = 1000*PSC_val; // according to PSC_val, PSC is increasing.
 8000254:	4b0a      	ldr	r3, [pc, #40]	; (8000280 <main+0x6c>)
 8000256:	681a      	ldr	r2, [r3, #0]
 8000258:	0013      	movs	r3, r2
 800025a:	015b      	lsls	r3, r3, #5
 800025c:	1a9b      	subs	r3, r3, r2
 800025e:	009b      	lsls	r3, r3, #2
 8000260:	189b      	adds	r3, r3, r2
 8000262:	00db      	lsls	r3, r3, #3
 8000264:	001a      	movs	r2, r3
 8000266:	4b07      	ldr	r3, [pc, #28]	; (8000284 <main+0x70>)
 8000268:	629a      	str	r2, [r3, #40]	; 0x28

			if(PSC_val == 11){ //PSC_val returns to 1 after 11
 800026a:	4b05      	ldr	r3, [pc, #20]	; (8000280 <main+0x6c>)
 800026c:	681b      	ldr	r3, [r3, #0]
 800026e:	2b0b      	cmp	r3, #11
 8000270:	d102      	bne.n	8000278 <main+0x64>
				PSC_val = 1;
 8000272:	4b03      	ldr	r3, [pc, #12]	; (8000280 <main+0x6c>)
 8000274:	2201      	movs	r2, #1
 8000276:	601a      	str	r2, [r3, #0]
			}
			flag = 0; // When the button is pressed again, the flag is set to 0 to enter the if block.
 8000278:	4b03      	ldr	r3, [pc, #12]	; (8000288 <main+0x74>)
 800027a:	2200      	movs	r2, #0
 800027c:	701a      	strb	r2, [r3, #0]
		if(flag){ // When the button is pressed, the flag will be equal to 1 and will enter the if block.
 800027e:	e7dc      	b.n	800023a <main+0x26>
 8000280:	20000000 	.word	0x20000000
 8000284:	40000400 	.word	0x40000400
 8000288:	20000024 	.word	0x20000024
 800028c:	001e8480 	.word	0x001e8480

08000290 <InitTimer>:
	}

	return 0;
}

void InitTimer(void){
 8000290:	b580      	push	{r7, lr}
 8000292:	af00      	add	r7, sp, #0

	RCC->APBENR1 |= (1U<<1); //
 8000294:	4b17      	ldr	r3, [pc, #92]	; (80002f4 <InitTimer+0x64>)
 8000296:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000298:	4b16      	ldr	r3, [pc, #88]	; (80002f4 <InitTimer+0x64>)
 800029a:	2102      	movs	r1, #2
 800029c:	430a      	orrs	r2, r1
 800029e:	63da      	str	r2, [r3, #60]	; 0x3c

	TIM3->CR1 = 0; //TIM3 control register 1 for enabling Counter enable
 80002a0:	4b15      	ldr	r3, [pc, #84]	; (80002f8 <InitTimer+0x68>)
 80002a2:	2200      	movs	r2, #0
 80002a4:	601a      	str	r2, [r3, #0]
	TIM3->CR1 |= (1<<7); // for Auto-reload preload enable
 80002a6:	4b14      	ldr	r3, [pc, #80]	; (80002f8 <InitTimer+0x68>)
 80002a8:	681a      	ldr	r2, [r3, #0]
 80002aa:	4b13      	ldr	r3, [pc, #76]	; (80002f8 <InitTimer+0x68>)
 80002ac:	2180      	movs	r1, #128	; 0x80
 80002ae:	430a      	orrs	r2, r1
 80002b0:	601a      	str	r2, [r3, #0]
	TIM3->CNT = 0; // TIMx counter
 80002b2:	4b11      	ldr	r3, [pc, #68]	; (80002f8 <InitTimer+0x68>)
 80002b4:	2200      	movs	r2, #0
 80002b6:	625a      	str	r2, [r3, #36]	; 0x24

	TIM3->PSC = 1000; // TIMx prescaler
 80002b8:	4b0f      	ldr	r3, [pc, #60]	; (80002f8 <InitTimer+0x68>)
 80002ba:	22fa      	movs	r2, #250	; 0xfa
 80002bc:	0092      	lsls	r2, r2, #2
 80002be:	629a      	str	r2, [r3, #40]	; 0x28
	TIM3->ARR = 16000; // TIMx auto-reload register
 80002c0:	4b0d      	ldr	r3, [pc, #52]	; (80002f8 <InitTimer+0x68>)
 80002c2:	22fa      	movs	r2, #250	; 0xfa
 80002c4:	0192      	lsls	r2, r2, #6
 80002c6:	62da      	str	r2, [r3, #44]	; 0x2c

	TIM3->DIER |= (1<<0); // TIMx DMA/Interrupt enable register
 80002c8:	4b0b      	ldr	r3, [pc, #44]	; (80002f8 <InitTimer+0x68>)
 80002ca:	68da      	ldr	r2, [r3, #12]
 80002cc:	4b0a      	ldr	r3, [pc, #40]	; (80002f8 <InitTimer+0x68>)
 80002ce:	2101      	movs	r1, #1
 80002d0:	430a      	orrs	r2, r1
 80002d2:	60da      	str	r2, [r3, #12]
	TIM3->CR1 |= (1<<0); // for Counter enable
 80002d4:	4b08      	ldr	r3, [pc, #32]	; (80002f8 <InitTimer+0x68>)
 80002d6:	681a      	ldr	r2, [r3, #0]
 80002d8:	4b07      	ldr	r3, [pc, #28]	; (80002f8 <InitTimer+0x68>)
 80002da:	2101      	movs	r1, #1
 80002dc:	430a      	orrs	r2, r1
 80002de:	601a      	str	r2, [r3, #0]

	NVIC_SetPriority(TIM3_IRQn,0); // TIM3 priority is 0
 80002e0:	2100      	movs	r1, #0
 80002e2:	2010      	movs	r0, #16
 80002e4:	f7ff ff28 	bl	8000138 <__NVIC_SetPriority>
	NVIC_EnableIRQ(TIM3_IRQn); // interrupt is enabled.
 80002e8:	2010      	movs	r0, #16
 80002ea:	f7ff ff0b 	bl	8000104 <__NVIC_EnableIRQ>
}
 80002ee:	46c0      	nop			; (mov r8, r8)
 80002f0:	46bd      	mov	sp, r7
 80002f2:	bd80      	pop	{r7, pc}
 80002f4:	40021000 	.word	0x40021000
 80002f8:	40000400 	.word	0x40000400

080002fc <TIM3_IRQHandler>:

void TIM3_IRQHandler (){
 80002fc:	b580      	push	{r7, lr}
 80002fe:	af00      	add	r7, sp, #0
	LedToggle();
 8000300:	f000 f840 	bl	8000384 <LedToggle>
	TIM3->SR &= ~(1U << 0);
 8000304:	4b04      	ldr	r3, [pc, #16]	; (8000318 <TIM3_IRQHandler+0x1c>)
 8000306:	691a      	ldr	r2, [r3, #16]
 8000308:	4b03      	ldr	r3, [pc, #12]	; (8000318 <TIM3_IRQHandler+0x1c>)
 800030a:	2101      	movs	r1, #1
 800030c:	438a      	bics	r2, r1
 800030e:	611a      	str	r2, [r3, #16]
	/* TIMx status register - Update interrupt flag
	This bit is set by hardware on an update event. It is cleared by software.*/
}
 8000310:	46c0      	nop			; (mov r8, r8)
 8000312:	46bd      	mov	sp, r7
 8000314:	bd80      	pop	{r7, pc}
 8000316:	46c0      	nop			; (mov r8, r8)
 8000318:	40000400 	.word	0x40000400

0800031c <delay>:

void delay(uint32_t time){
 800031c:	b580      	push	{r7, lr}
 800031e:	b082      	sub	sp, #8
 8000320:	af00      	add	r7, sp, #0
 8000322:	6078      	str	r0, [r7, #4]
	for(; time>0 ; time--);
 8000324:	e002      	b.n	800032c <delay+0x10>
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	3b01      	subs	r3, #1
 800032a:	607b      	str	r3, [r7, #4]
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	2b00      	cmp	r3, #0
 8000330:	d1f9      	bne.n	8000326 <delay+0xa>
}
 8000332:	46c0      	nop			; (mov r8, r8)
 8000334:	46c0      	nop			; (mov r8, r8)
 8000336:	46bd      	mov	sp, r7
 8000338:	b002      	add	sp, #8
 800033a:	bd80      	pop	{r7, pc}

0800033c <LedInit>:

void LedInit(void){
 800033c:	b580      	push	{r7, lr}
 800033e:	af00      	add	r7, sp, #0
	/* Enable GPIOC clock */
	RCC->IOPENR |= (1U << 2);
 8000340:	4b0d      	ldr	r3, [pc, #52]	; (8000378 <LedInit+0x3c>)
 8000342:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000344:	4b0c      	ldr	r3, [pc, #48]	; (8000378 <LedInit+0x3c>)
 8000346:	2104      	movs	r1, #4
 8000348:	430a      	orrs	r2, r1
 800034a:	635a      	str	r2, [r3, #52]	; 0x34

	/* Setup PC6 as output */
	GPIOC->MODER &= ~(3U << 2*6);
 800034c:	4b0b      	ldr	r3, [pc, #44]	; (800037c <LedInit+0x40>)
 800034e:	681a      	ldr	r2, [r3, #0]
 8000350:	4b0a      	ldr	r3, [pc, #40]	; (800037c <LedInit+0x40>)
 8000352:	490b      	ldr	r1, [pc, #44]	; (8000380 <LedInit+0x44>)
 8000354:	400a      	ands	r2, r1
 8000356:	601a      	str	r2, [r3, #0]
	GPIOC->MODER |= (1U << 2*6);
 8000358:	4b08      	ldr	r3, [pc, #32]	; (800037c <LedInit+0x40>)
 800035a:	681a      	ldr	r2, [r3, #0]
 800035c:	4b07      	ldr	r3, [pc, #28]	; (800037c <LedInit+0x40>)
 800035e:	2180      	movs	r1, #128	; 0x80
 8000360:	0149      	lsls	r1, r1, #5
 8000362:	430a      	orrs	r2, r1
 8000364:	601a      	str	r2, [r3, #0]

    /* Clear PC6 */
    GPIOC->BRR |= (1U << 6);
 8000366:	4b05      	ldr	r3, [pc, #20]	; (800037c <LedInit+0x40>)
 8000368:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800036a:	4b04      	ldr	r3, [pc, #16]	; (800037c <LedInit+0x40>)
 800036c:	2140      	movs	r1, #64	; 0x40
 800036e:	430a      	orrs	r2, r1
 8000370:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000372:	46c0      	nop			; (mov r8, r8)
 8000374:	46bd      	mov	sp, r7
 8000376:	bd80      	pop	{r7, pc}
 8000378:	40021000 	.word	0x40021000
 800037c:	50000800 	.word	0x50000800
 8000380:	ffffcfff 	.word	0xffffcfff

08000384 <LedToggle>:

void LedToggle(void){
 8000384:	b580      	push	{r7, lr}
 8000386:	af00      	add	r7, sp, #0
	GPIOC->ODR ^= (1U << 6); // using XOR logic, output is changing.
 8000388:	4b04      	ldr	r3, [pc, #16]	; (800039c <LedToggle+0x18>)
 800038a:	695a      	ldr	r2, [r3, #20]
 800038c:	4b03      	ldr	r3, [pc, #12]	; (800039c <LedToggle+0x18>)
 800038e:	2140      	movs	r1, #64	; 0x40
 8000390:	404a      	eors	r2, r1
 8000392:	615a      	str	r2, [r3, #20]
}
 8000394:	46c0      	nop			; (mov r8, r8)
 8000396:	46bd      	mov	sp, r7
 8000398:	bd80      	pop	{r7, pc}
 800039a:	46c0      	nop			; (mov r8, r8)
 800039c:	50000800 	.word	0x50000800

080003a0 <ButtonInit>:

void ButtonInit(){
 80003a0:	b580      	push	{r7, lr}
 80003a2:	af00      	add	r7, sp, #0

	RCC->IOPENR |= (1U << 0U);
 80003a4:	4b23      	ldr	r3, [pc, #140]	; (8000434 <ButtonInit+0x94>)
 80003a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80003a8:	4b22      	ldr	r3, [pc, #136]	; (8000434 <ButtonInit+0x94>)
 80003aa:	2101      	movs	r1, #1
 80003ac:	430a      	orrs	r2, r1
 80003ae:	635a      	str	r2, [r3, #52]	; 0x34
	GPIOA->MODER &= ~(3U << 0);
 80003b0:	23a0      	movs	r3, #160	; 0xa0
 80003b2:	05db      	lsls	r3, r3, #23
 80003b4:	681a      	ldr	r2, [r3, #0]
 80003b6:	23a0      	movs	r3, #160	; 0xa0
 80003b8:	05db      	lsls	r3, r3, #23
 80003ba:	2103      	movs	r1, #3
 80003bc:	438a      	bics	r2, r1
 80003be:	601a      	str	r2, [r3, #0]
	GPIOA->PUPDR &= ~(3U << 0); // GPIO port pull-up/pull-down register
 80003c0:	23a0      	movs	r3, #160	; 0xa0
 80003c2:	05db      	lsls	r3, r3, #23
 80003c4:	68da      	ldr	r2, [r3, #12]
 80003c6:	23a0      	movs	r3, #160	; 0xa0
 80003c8:	05db      	lsls	r3, r3, #23
 80003ca:	2103      	movs	r1, #3
 80003cc:	438a      	bics	r2, r1
 80003ce:	60da      	str	r2, [r3, #12]
	GPIOA->PUPDR |= (1U << 0);
 80003d0:	23a0      	movs	r3, #160	; 0xa0
 80003d2:	05db      	lsls	r3, r3, #23
 80003d4:	68da      	ldr	r2, [r3, #12]
 80003d6:	23a0      	movs	r3, #160	; 0xa0
 80003d8:	05db      	lsls	r3, r3, #23
 80003da:	2101      	movs	r1, #1
 80003dc:	430a      	orrs	r2, r1
 80003de:	60da      	str	r2, [r3, #12]

	RCC->APBENR2 |= (1U<<0); // SYSCFGRST: SYSCFG, COMP and VREFBUF reset
 80003e0:	4b14      	ldr	r3, [pc, #80]	; (8000434 <ButtonInit+0x94>)
 80003e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80003e4:	4b13      	ldr	r3, [pc, #76]	; (8000434 <ButtonInit+0x94>)
 80003e6:	2101      	movs	r1, #1
 80003e8:	430a      	orrs	r2, r1
 80003ea:	641a      	str	r2, [r3, #64]	; 0x40
	/* EXTI Rising Trigger Selection Register 1
	 * Each bit enables/disables the rising edge trigger for the event and interrupt on the
	corresponding line.
	 */
	EXTI->RTSR1 |= (1U<<0);
 80003ec:	4b12      	ldr	r3, [pc, #72]	; (8000438 <ButtonInit+0x98>)
 80003ee:	681a      	ldr	r2, [r3, #0]
 80003f0:	4b11      	ldr	r3, [pc, #68]	; (8000438 <ButtonInit+0x98>)
 80003f2:	2101      	movs	r1, #1
 80003f4:	430a      	orrs	r2, r1
 80003f6:	601a      	str	r2, [r3, #0]
	/* EXTI Interrupt Mask Register 1
	 * Each bit enables/disables the rising edge trigger for the event and interrupt on the
	corresponding line.
	 */
	EXTI->IMR1 |= (1U<<0);
 80003f8:	4a0f      	ldr	r2, [pc, #60]	; (8000438 <ButtonInit+0x98>)
 80003fa:	2380      	movs	r3, #128	; 0x80
 80003fc:	58d3      	ldr	r3, [r2, r3]
 80003fe:	490e      	ldr	r1, [pc, #56]	; (8000438 <ButtonInit+0x98>)
 8000400:	2201      	movs	r2, #1
 8000402:	4313      	orrs	r3, r2
 8000404:	2280      	movs	r2, #128	; 0x80
 8000406:	508b      	str	r3, [r1, r2]

	EXTI->FTSR1 |= (1U<<0); // EXTI falling trigger selection register 1
 8000408:	4b0b      	ldr	r3, [pc, #44]	; (8000438 <ButtonInit+0x98>)
 800040a:	685a      	ldr	r2, [r3, #4]
 800040c:	4b0a      	ldr	r3, [pc, #40]	; (8000438 <ButtonInit+0x98>)
 800040e:	2101      	movs	r1, #1
 8000410:	430a      	orrs	r2, r1
 8000412:	605a      	str	r2, [r3, #4]
	EXTI->RTSR1 &= ~(1U<<0);
 8000414:	4b08      	ldr	r3, [pc, #32]	; (8000438 <ButtonInit+0x98>)
 8000416:	681a      	ldr	r2, [r3, #0]
 8000418:	4b07      	ldr	r3, [pc, #28]	; (8000438 <ButtonInit+0x98>)
 800041a:	2101      	movs	r1, #1
 800041c:	438a      	bics	r2, r1
 800041e:	601a      	str	r2, [r3, #0]

	NVIC_SetPriority(EXTI0_1_IRQn, 0);
 8000420:	2100      	movs	r1, #0
 8000422:	2005      	movs	r0, #5
 8000424:	f7ff fe88 	bl	8000138 <__NVIC_SetPriority>
	NVIC_EnableIRQ(EXTI0_1_IRQn);
 8000428:	2005      	movs	r0, #5
 800042a:	f7ff fe6b 	bl	8000104 <__NVIC_EnableIRQ>
}
 800042e:	46c0      	nop			; (mov r8, r8)
 8000430:	46bd      	mov	sp, r7
 8000432:	bd80      	pop	{r7, pc}
 8000434:	40021000 	.word	0x40021000
 8000438:	40021800 	.word	0x40021800

0800043c <EXTI0_1_IRQHandler>:

void EXTI0_1_IRQHandler(void){
 800043c:	b580      	push	{r7, lr}
 800043e:	af00      	add	r7, sp, #0
	flag=1; // when button pressed, flag sets 1.
 8000440:	4b05      	ldr	r3, [pc, #20]	; (8000458 <EXTI0_1_IRQHandler+0x1c>)
 8000442:	2201      	movs	r2, #1
 8000444:	701a      	strb	r2, [r3, #0]
	EXTI->FPR1 |= (1<<0); // EXTI Falling Pending Register 1
 8000446:	4b05      	ldr	r3, [pc, #20]	; (800045c <EXTI0_1_IRQHandler+0x20>)
 8000448:	691a      	ldr	r2, [r3, #16]
 800044a:	4b04      	ldr	r3, [pc, #16]	; (800045c <EXTI0_1_IRQHandler+0x20>)
 800044c:	2101      	movs	r1, #1
 800044e:	430a      	orrs	r2, r1
 8000450:	611a      	str	r2, [r3, #16]
}
 8000452:	46c0      	nop			; (mov r8, r8)
 8000454:	46bd      	mov	sp, r7
 8000456:	bd80      	pop	{r7, pc}
 8000458:	20000024 	.word	0x20000024
 800045c:	40021800 	.word	0x40021800

08000460 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000460:	b580      	push	{r7, lr}
 8000462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000464:	e7fe      	b.n	8000464 <NMI_Handler+0x4>

08000466 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000466:	b580      	push	{r7, lr}
 8000468:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800046a:	e7fe      	b.n	800046a <HardFault_Handler+0x4>

0800046c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000470:	46c0      	nop			; (mov r8, r8)
 8000472:	46bd      	mov	sp, r7
 8000474:	bd80      	pop	{r7, pc}

08000476 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000476:	b580      	push	{r7, lr}
 8000478:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800047a:	46c0      	nop			; (mov r8, r8)
 800047c:	46bd      	mov	sp, r7
 800047e:	bd80      	pop	{r7, pc}

08000480 <SysTick_Handler>:
/**
  * @brief This function handles System tick timer.
  */

void SysTick_Handler(void)
{
 8000480:	b580      	push	{r7, lr}
 8000482:	af00      	add	r7, sp, #0
   //USER CODE BEGIN SysTick_IRQn 0

   //USER CODE END SysTick_IRQn 0
  HAL_IncTick();
 8000484:	f000 f832 	bl	80004ec <HAL_IncTick>
   //USER CODE BEGIN SysTick_IRQn 1

   //USER CODE END SysTick_IRQn 1
}
 8000488:	46c0      	nop			; (mov r8, r8)
 800048a:	46bd      	mov	sp, r7
 800048c:	bd80      	pop	{r7, pc}

0800048e <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800048e:	b580      	push	{r7, lr}
 8000490:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000492:	46c0      	nop			; (mov r8, r8)
 8000494:	46bd      	mov	sp, r7
 8000496:	bd80      	pop	{r7, pc}

08000498 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000498:	480d      	ldr	r0, [pc, #52]	; (80004d0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800049a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800049c:	f7ff fff7 	bl	800048e <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004a0:	480c      	ldr	r0, [pc, #48]	; (80004d4 <LoopForever+0x6>)
  ldr r1, =_edata
 80004a2:	490d      	ldr	r1, [pc, #52]	; (80004d8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80004a4:	4a0d      	ldr	r2, [pc, #52]	; (80004dc <LoopForever+0xe>)
  movs r3, #0
 80004a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004a8:	e002      	b.n	80004b0 <LoopCopyDataInit>

080004aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004ae:	3304      	adds	r3, #4

080004b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004b4:	d3f9      	bcc.n	80004aa <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004b6:	4a0a      	ldr	r2, [pc, #40]	; (80004e0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80004b8:	4c0a      	ldr	r4, [pc, #40]	; (80004e4 <LoopForever+0x16>)
  movs r3, #0
 80004ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004bc:	e001      	b.n	80004c2 <LoopFillZerobss>

080004be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004c0:	3204      	adds	r2, #4

080004c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004c4:	d3fb      	bcc.n	80004be <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80004c6:	f000 f823 	bl	8000510 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80004ca:	f7ff fea3 	bl	8000214 <main>

080004ce <LoopForever>:

LoopForever:
  b LoopForever
 80004ce:	e7fe      	b.n	80004ce <LoopForever>
  ldr   r0, =_estack
 80004d0:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80004d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004d8:	20000008 	.word	0x20000008
  ldr r2, =_sidata
 80004dc:	08000578 	.word	0x08000578
  ldr r2, =_sbss
 80004e0:	20000008 	.word	0x20000008
  ldr r4, =_ebss
 80004e4:	2000002c 	.word	0x2000002c

080004e8 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80004e8:	e7fe      	b.n	80004e8 <ADC1_IRQHandler>
	...

080004ec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80004f0:	4b05      	ldr	r3, [pc, #20]	; (8000508 <HAL_IncTick+0x1c>)
 80004f2:	781b      	ldrb	r3, [r3, #0]
 80004f4:	001a      	movs	r2, r3
 80004f6:	4b05      	ldr	r3, [pc, #20]	; (800050c <HAL_IncTick+0x20>)
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	18d2      	adds	r2, r2, r3
 80004fc:	4b03      	ldr	r3, [pc, #12]	; (800050c <HAL_IncTick+0x20>)
 80004fe:	601a      	str	r2, [r3, #0]
}
 8000500:	46c0      	nop			; (mov r8, r8)
 8000502:	46bd      	mov	sp, r7
 8000504:	bd80      	pop	{r7, pc}
 8000506:	46c0      	nop			; (mov r8, r8)
 8000508:	20000004 	.word	0x20000004
 800050c:	20000028 	.word	0x20000028

08000510 <__libc_init_array>:
 8000510:	b570      	push	{r4, r5, r6, lr}
 8000512:	2600      	movs	r6, #0
 8000514:	4c0c      	ldr	r4, [pc, #48]	; (8000548 <__libc_init_array+0x38>)
 8000516:	4d0d      	ldr	r5, [pc, #52]	; (800054c <__libc_init_array+0x3c>)
 8000518:	1b64      	subs	r4, r4, r5
 800051a:	10a4      	asrs	r4, r4, #2
 800051c:	42a6      	cmp	r6, r4
 800051e:	d109      	bne.n	8000534 <__libc_init_array+0x24>
 8000520:	2600      	movs	r6, #0
 8000522:	f000 f819 	bl	8000558 <_init>
 8000526:	4c0a      	ldr	r4, [pc, #40]	; (8000550 <__libc_init_array+0x40>)
 8000528:	4d0a      	ldr	r5, [pc, #40]	; (8000554 <__libc_init_array+0x44>)
 800052a:	1b64      	subs	r4, r4, r5
 800052c:	10a4      	asrs	r4, r4, #2
 800052e:	42a6      	cmp	r6, r4
 8000530:	d105      	bne.n	800053e <__libc_init_array+0x2e>
 8000532:	bd70      	pop	{r4, r5, r6, pc}
 8000534:	00b3      	lsls	r3, r6, #2
 8000536:	58eb      	ldr	r3, [r5, r3]
 8000538:	4798      	blx	r3
 800053a:	3601      	adds	r6, #1
 800053c:	e7ee      	b.n	800051c <__libc_init_array+0xc>
 800053e:	00b3      	lsls	r3, r6, #2
 8000540:	58eb      	ldr	r3, [r5, r3]
 8000542:	4798      	blx	r3
 8000544:	3601      	adds	r6, #1
 8000546:	e7f2      	b.n	800052e <__libc_init_array+0x1e>
 8000548:	08000570 	.word	0x08000570
 800054c:	08000570 	.word	0x08000570
 8000550:	08000574 	.word	0x08000574
 8000554:	08000570 	.word	0x08000570

08000558 <_init>:
 8000558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800055a:	46c0      	nop			; (mov r8, r8)
 800055c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800055e:	bc08      	pop	{r3}
 8000560:	469e      	mov	lr, r3
 8000562:	4770      	bx	lr

08000564 <_fini>:
 8000564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000566:	46c0      	nop			; (mov r8, r8)
 8000568:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800056a:	bc08      	pop	{r3}
 800056c:	469e      	mov	lr, r3
 800056e:	4770      	bx	lr
