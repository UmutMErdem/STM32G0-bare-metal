#include "stm32g0xx.h"

void print_zero();
void delay(volatile uint32_t s);

void clearSSD(void){
	GPIOB -> ODR |= (1U << 0); //PB0 A
	GPIOB -> ODR |= (1U << 1); //PB1 B
	GPIOB -> ODR |= (1U << 2); //PB2 C
	GPIOB -> ODR |= (1U << 3); //PB3 D
	GPIOB -> ODR |= (1U << 4); //PB4 E
	GPIOB -> ODR |= (1U << 5); //PB5 F
	GPIOB -> ODR |= (1U << 6); //PB6 G
}

void setSSD(int x){
	clearSSD();
	switch(x){
	case 0:
		for(int i=0; i<6; i++){// A B C D E F
			GPIOB->ODR &= ~(1U << i);
		}
		break;
	case 1:
		for(int i=1; i<3; i++){ //B C
			GPIOB->ODR &= ~(1U << i);
			}
		break;
	case 2:
		for(int i=0; i<7; i++){// A B D E G
			if (i==0 || i==1 || i==3 || i==4 || i==6){
				GPIOB->ODR &= ~(1U << i);
			}
		}
		break;
	case 3:
		for(int i=0; i<7; i++){// A B C D G
			if (i==0 || i==1 || i==2 || i==3 || i==6){
				GPIOB->ODR &= ~(1U << i);
			}
		}
		break;
	case 4:
		for(int i=0; i<7; i++){// B C F G
			if (i==1 || i==2 || i==5 || i==6){
				GPIOB->ODR &= ~(1U << i);
			}
		}
		break;
	case 5:
		for(int i=0; i<7; i++){// A C D F G
			if (i==0 || i==2 || i==3 || i==5 || i==6){
				GPIOB->ODR &= ~(1U << i);
			}
		}
		break;
	case 6:
		GPIOB->ODR &= ~(1U << 0);// A C D E F G
		for(int i=2; i<7; i++){
			GPIOB->ODR &= ~(1U << i);
		}
		break;
	case 7:
		for(int i=0; i<3; i++){// A B C
			GPIOB->ODR &= ~(1U << i);
		}
		break;
	case 8:
		for(int i=0; i<7; i++){// A B C D E F G
			GPIOB->ODR &= ~(1U << i);
		}
		break;
	case 9:
		GPIOB->ODR &= ~(1U << 0); //A
		GPIOB->ODR &= ~(1U << 1); //B
		GPIOB->ODR &= ~(1U << 2); //C
		GPIOB->ODR &= ~(1U << 3); //D
		GPIOB->ODR &= ~(1U << 5); //F
		GPIOB->ODR &= ~(1U << 6); //G
		break;
	}
}
void counter(void){
	print_zero();
	delay(1000000);
	for(int i=0; i<=9; i++){//second counter
		GPIOA ->ODR |= (1U << 7); // D1 - PA7
		GPIOA ->ODR &= ~(1U << 6); // D2 - PA6
		GPIOA ->ODR &= ~(1U << 0); // D3 - PA0
		GPIOA ->ODR &= ~(1U << 5); // D4 - PA5
		setSSD(i);
		delay(1000000);
		for(int j=0; j<=9; j++){//milisecond counter
			if(i<9){
				GPIOA ->ODR &= ~(1U << 7); // D1 - PA7
				GPIOA ->ODR |= (1U << 6); // D2 - PA6
				GPIOA ->ODR &= ~(1U << 0); // D3 - PA0
				GPIOA ->ODR &= ~(1U << 5); // D4 - PA5
				setSSD(j);
				delay(50000);
				for(int m=0; m<=9; m++){//milisecond counter
					if(j<9){
						GPIOA ->ODR &= ~(1U << 7); // D1 - PA7
						GPIOA ->ODR &= ~(1U << 6); // D2 - PA6
						GPIOA ->ODR |= (1U << 0); // D3 - PA0
						GPIOA ->ODR &= ~(1U << 5); // D4 - PA5
						setSSD(m);
						delay(25000);
						for(int k=0; k<=9; k++){//milisecond counter
							if(m<9){
								GPIOA ->ODR &= ~(1U << 7); // D1 - PA7
								GPIOA ->ODR &= ~(1U << 6); // D2 - PA6
								GPIOA ->ODR &= ~(1U << 0); // D3 - PA0
								GPIOA ->ODR |= (1U << 5); // D4 - PA5
								setSSD(k);
								delay(12500);
							}
						}
					}
				}
			}
		}
	}
	GPIOB->ODR |= (1U << 8); // PB8 - D8 LED turn on
	delay(1000000);
	GPIOB->BRR |= (1U << 8); // led turn off
	print_zero();
	delay(1000000);
}
void button_ctrl(void){//PA1 Ä°S BUTTON
	/* rising edge, selection register and mask register */
	EXTI->RTSR1 |= (1U << 1);
	EXTI->EXTICR[0] |= (0U << 8*1);
	EXTI->IMR1 |= (1U << 1);
	/* enable NVIC and set interrupt priority */
	NVIC_SetPriority(EXTI0_1_IRQn, 0);
	NVIC_EnableIRQ(EXTI0_1_IRQn);
}

void EXTI0_1_IRQHandler(void){
	counter();
	EXTI->RPR1 |= (1U << 1); // rising edge
}

void enable_GPIOA(){
	/* enable required GPIOA registers and RCC register */
	RCC->IOPENR |= (1U << 0);
	for(int k=0; k<9; k++){
		if (k==0 || k==1 || k==5 || k==6 || k==7 || k==8){
			GPIOA->MODER &= ~(3U << 2*k);
			GPIOA->MODER |= (1U << 2*k);
		}
	}
}

void enable_GPIOB(){
	/* enable required GPIOB registers and RCC register */
	RCC->IOPENR |= (1U << 1);
	for(int k=0; k<9; k++){
		if (k==0 || k==1 || k==2 || k==3 || k==4 || k==5 || k==6 || k==8){
			GPIOB->MODER &= ~(3U << 2*k);
			GPIOB->MODER |= (1U << 2*k);
		}
	}
}

void print_zero(){
	GPIOA ->ODR |= (1U << 7); // D1 digit to PA7
	GPIOA ->ODR |= (1U << 6); // D2 digit to PA6
	GPIOA ->ODR |= (1U << 0); // D3 digit to PA0
	GPIOA ->ODR |= (1U << 5); // D4 digit to PA5
	setSSD(0);
}

int main(void) {
	enable_GPIOA(); enable_GPIOB();
	print_zero();
	button_ctrl();

	while(1) {
	}

	return 0;
}

void delay(volatile uint32_t s) {
	for(; s>0; s--);
}
