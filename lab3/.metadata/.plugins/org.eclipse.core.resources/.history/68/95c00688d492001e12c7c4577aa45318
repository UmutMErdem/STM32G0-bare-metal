
problem4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000008f8  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  080009b4  080009b4  000109b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080009dc  080009dc  000109e4  2**0
                  CONTENTS
  4 .ARM          00000000  080009dc  080009dc  000109e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  080009dc  080009e4  000109e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080009dc  080009dc  000109dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080009e0  080009e0  000109e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000109e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  080009e4  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  080009e4  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000109e4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00010a0c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000c2f  00000000  00000000  00010a4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000003d9  00000000  00000000  0001167e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000100  00000000  00000000  00011a58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000000b0  00000000  00000000  00011b58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000133a2  00000000  00000000  00011c08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000019a4  00000000  00000000  00024faa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007d41f  00000000  00000000  0002694e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000028c  00000000  00000000  000a3d70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004f  00000000  00000000  000a3ffc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000000 	.word	0x20000000
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800099c 	.word	0x0800099c

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000004 	.word	0x20000004
 8000100:	0800099c 	.word	0x0800099c

08000104 <__divsi3>:
 8000104:	4603      	mov	r3, r0
 8000106:	430b      	orrs	r3, r1
 8000108:	d47f      	bmi.n	800020a <__divsi3+0x106>
 800010a:	2200      	movs	r2, #0
 800010c:	0843      	lsrs	r3, r0, #1
 800010e:	428b      	cmp	r3, r1
 8000110:	d374      	bcc.n	80001fc <__divsi3+0xf8>
 8000112:	0903      	lsrs	r3, r0, #4
 8000114:	428b      	cmp	r3, r1
 8000116:	d35f      	bcc.n	80001d8 <__divsi3+0xd4>
 8000118:	0a03      	lsrs	r3, r0, #8
 800011a:	428b      	cmp	r3, r1
 800011c:	d344      	bcc.n	80001a8 <__divsi3+0xa4>
 800011e:	0b03      	lsrs	r3, r0, #12
 8000120:	428b      	cmp	r3, r1
 8000122:	d328      	bcc.n	8000176 <__divsi3+0x72>
 8000124:	0c03      	lsrs	r3, r0, #16
 8000126:	428b      	cmp	r3, r1
 8000128:	d30d      	bcc.n	8000146 <__divsi3+0x42>
 800012a:	22ff      	movs	r2, #255	; 0xff
 800012c:	0209      	lsls	r1, r1, #8
 800012e:	ba12      	rev	r2, r2
 8000130:	0c03      	lsrs	r3, r0, #16
 8000132:	428b      	cmp	r3, r1
 8000134:	d302      	bcc.n	800013c <__divsi3+0x38>
 8000136:	1212      	asrs	r2, r2, #8
 8000138:	0209      	lsls	r1, r1, #8
 800013a:	d065      	beq.n	8000208 <__divsi3+0x104>
 800013c:	0b03      	lsrs	r3, r0, #12
 800013e:	428b      	cmp	r3, r1
 8000140:	d319      	bcc.n	8000176 <__divsi3+0x72>
 8000142:	e000      	b.n	8000146 <__divsi3+0x42>
 8000144:	0a09      	lsrs	r1, r1, #8
 8000146:	0bc3      	lsrs	r3, r0, #15
 8000148:	428b      	cmp	r3, r1
 800014a:	d301      	bcc.n	8000150 <__divsi3+0x4c>
 800014c:	03cb      	lsls	r3, r1, #15
 800014e:	1ac0      	subs	r0, r0, r3
 8000150:	4152      	adcs	r2, r2
 8000152:	0b83      	lsrs	r3, r0, #14
 8000154:	428b      	cmp	r3, r1
 8000156:	d301      	bcc.n	800015c <__divsi3+0x58>
 8000158:	038b      	lsls	r3, r1, #14
 800015a:	1ac0      	subs	r0, r0, r3
 800015c:	4152      	adcs	r2, r2
 800015e:	0b43      	lsrs	r3, r0, #13
 8000160:	428b      	cmp	r3, r1
 8000162:	d301      	bcc.n	8000168 <__divsi3+0x64>
 8000164:	034b      	lsls	r3, r1, #13
 8000166:	1ac0      	subs	r0, r0, r3
 8000168:	4152      	adcs	r2, r2
 800016a:	0b03      	lsrs	r3, r0, #12
 800016c:	428b      	cmp	r3, r1
 800016e:	d301      	bcc.n	8000174 <__divsi3+0x70>
 8000170:	030b      	lsls	r3, r1, #12
 8000172:	1ac0      	subs	r0, r0, r3
 8000174:	4152      	adcs	r2, r2
 8000176:	0ac3      	lsrs	r3, r0, #11
 8000178:	428b      	cmp	r3, r1
 800017a:	d301      	bcc.n	8000180 <__divsi3+0x7c>
 800017c:	02cb      	lsls	r3, r1, #11
 800017e:	1ac0      	subs	r0, r0, r3
 8000180:	4152      	adcs	r2, r2
 8000182:	0a83      	lsrs	r3, r0, #10
 8000184:	428b      	cmp	r3, r1
 8000186:	d301      	bcc.n	800018c <__divsi3+0x88>
 8000188:	028b      	lsls	r3, r1, #10
 800018a:	1ac0      	subs	r0, r0, r3
 800018c:	4152      	adcs	r2, r2
 800018e:	0a43      	lsrs	r3, r0, #9
 8000190:	428b      	cmp	r3, r1
 8000192:	d301      	bcc.n	8000198 <__divsi3+0x94>
 8000194:	024b      	lsls	r3, r1, #9
 8000196:	1ac0      	subs	r0, r0, r3
 8000198:	4152      	adcs	r2, r2
 800019a:	0a03      	lsrs	r3, r0, #8
 800019c:	428b      	cmp	r3, r1
 800019e:	d301      	bcc.n	80001a4 <__divsi3+0xa0>
 80001a0:	020b      	lsls	r3, r1, #8
 80001a2:	1ac0      	subs	r0, r0, r3
 80001a4:	4152      	adcs	r2, r2
 80001a6:	d2cd      	bcs.n	8000144 <__divsi3+0x40>
 80001a8:	09c3      	lsrs	r3, r0, #7
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__divsi3+0xae>
 80001ae:	01cb      	lsls	r3, r1, #7
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0983      	lsrs	r3, r0, #6
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__divsi3+0xba>
 80001ba:	018b      	lsls	r3, r1, #6
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0943      	lsrs	r3, r0, #5
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__divsi3+0xc6>
 80001c6:	014b      	lsls	r3, r1, #5
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	0903      	lsrs	r3, r0, #4
 80001ce:	428b      	cmp	r3, r1
 80001d0:	d301      	bcc.n	80001d6 <__divsi3+0xd2>
 80001d2:	010b      	lsls	r3, r1, #4
 80001d4:	1ac0      	subs	r0, r0, r3
 80001d6:	4152      	adcs	r2, r2
 80001d8:	08c3      	lsrs	r3, r0, #3
 80001da:	428b      	cmp	r3, r1
 80001dc:	d301      	bcc.n	80001e2 <__divsi3+0xde>
 80001de:	00cb      	lsls	r3, r1, #3
 80001e0:	1ac0      	subs	r0, r0, r3
 80001e2:	4152      	adcs	r2, r2
 80001e4:	0883      	lsrs	r3, r0, #2
 80001e6:	428b      	cmp	r3, r1
 80001e8:	d301      	bcc.n	80001ee <__divsi3+0xea>
 80001ea:	008b      	lsls	r3, r1, #2
 80001ec:	1ac0      	subs	r0, r0, r3
 80001ee:	4152      	adcs	r2, r2
 80001f0:	0843      	lsrs	r3, r0, #1
 80001f2:	428b      	cmp	r3, r1
 80001f4:	d301      	bcc.n	80001fa <__divsi3+0xf6>
 80001f6:	004b      	lsls	r3, r1, #1
 80001f8:	1ac0      	subs	r0, r0, r3
 80001fa:	4152      	adcs	r2, r2
 80001fc:	1a41      	subs	r1, r0, r1
 80001fe:	d200      	bcs.n	8000202 <__divsi3+0xfe>
 8000200:	4601      	mov	r1, r0
 8000202:	4152      	adcs	r2, r2
 8000204:	4610      	mov	r0, r2
 8000206:	4770      	bx	lr
 8000208:	e05d      	b.n	80002c6 <__divsi3+0x1c2>
 800020a:	0fca      	lsrs	r2, r1, #31
 800020c:	d000      	beq.n	8000210 <__divsi3+0x10c>
 800020e:	4249      	negs	r1, r1
 8000210:	1003      	asrs	r3, r0, #32
 8000212:	d300      	bcc.n	8000216 <__divsi3+0x112>
 8000214:	4240      	negs	r0, r0
 8000216:	4053      	eors	r3, r2
 8000218:	2200      	movs	r2, #0
 800021a:	469c      	mov	ip, r3
 800021c:	0903      	lsrs	r3, r0, #4
 800021e:	428b      	cmp	r3, r1
 8000220:	d32d      	bcc.n	800027e <__divsi3+0x17a>
 8000222:	0a03      	lsrs	r3, r0, #8
 8000224:	428b      	cmp	r3, r1
 8000226:	d312      	bcc.n	800024e <__divsi3+0x14a>
 8000228:	22fc      	movs	r2, #252	; 0xfc
 800022a:	0189      	lsls	r1, r1, #6
 800022c:	ba12      	rev	r2, r2
 800022e:	0a03      	lsrs	r3, r0, #8
 8000230:	428b      	cmp	r3, r1
 8000232:	d30c      	bcc.n	800024e <__divsi3+0x14a>
 8000234:	0189      	lsls	r1, r1, #6
 8000236:	1192      	asrs	r2, r2, #6
 8000238:	428b      	cmp	r3, r1
 800023a:	d308      	bcc.n	800024e <__divsi3+0x14a>
 800023c:	0189      	lsls	r1, r1, #6
 800023e:	1192      	asrs	r2, r2, #6
 8000240:	428b      	cmp	r3, r1
 8000242:	d304      	bcc.n	800024e <__divsi3+0x14a>
 8000244:	0189      	lsls	r1, r1, #6
 8000246:	d03a      	beq.n	80002be <__divsi3+0x1ba>
 8000248:	1192      	asrs	r2, r2, #6
 800024a:	e000      	b.n	800024e <__divsi3+0x14a>
 800024c:	0989      	lsrs	r1, r1, #6
 800024e:	09c3      	lsrs	r3, r0, #7
 8000250:	428b      	cmp	r3, r1
 8000252:	d301      	bcc.n	8000258 <__divsi3+0x154>
 8000254:	01cb      	lsls	r3, r1, #7
 8000256:	1ac0      	subs	r0, r0, r3
 8000258:	4152      	adcs	r2, r2
 800025a:	0983      	lsrs	r3, r0, #6
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x160>
 8000260:	018b      	lsls	r3, r1, #6
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0943      	lsrs	r3, r0, #5
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x16c>
 800026c:	014b      	lsls	r3, r1, #5
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0903      	lsrs	r3, r0, #4
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x178>
 8000278:	010b      	lsls	r3, r1, #4
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	08c3      	lsrs	r3, r0, #3
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x184>
 8000284:	00cb      	lsls	r3, r1, #3
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0883      	lsrs	r3, r0, #2
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x190>
 8000290:	008b      	lsls	r3, r1, #2
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	d2d9      	bcs.n	800024c <__divsi3+0x148>
 8000298:	0843      	lsrs	r3, r0, #1
 800029a:	428b      	cmp	r3, r1
 800029c:	d301      	bcc.n	80002a2 <__divsi3+0x19e>
 800029e:	004b      	lsls	r3, r1, #1
 80002a0:	1ac0      	subs	r0, r0, r3
 80002a2:	4152      	adcs	r2, r2
 80002a4:	1a41      	subs	r1, r0, r1
 80002a6:	d200      	bcs.n	80002aa <__divsi3+0x1a6>
 80002a8:	4601      	mov	r1, r0
 80002aa:	4663      	mov	r3, ip
 80002ac:	4152      	adcs	r2, r2
 80002ae:	105b      	asrs	r3, r3, #1
 80002b0:	4610      	mov	r0, r2
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x1b4>
 80002b4:	4240      	negs	r0, r0
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	d500      	bpl.n	80002bc <__divsi3+0x1b8>
 80002ba:	4249      	negs	r1, r1
 80002bc:	4770      	bx	lr
 80002be:	4663      	mov	r3, ip
 80002c0:	105b      	asrs	r3, r3, #1
 80002c2:	d300      	bcc.n	80002c6 <__divsi3+0x1c2>
 80002c4:	4240      	negs	r0, r0
 80002c6:	b501      	push	{r0, lr}
 80002c8:	2000      	movs	r0, #0
 80002ca:	f000 f805 	bl	80002d8 <__aeabi_idiv0>
 80002ce:	bd02      	pop	{r1, pc}

080002d0 <__aeabi_idivmod>:
 80002d0:	2900      	cmp	r1, #0
 80002d2:	d0f8      	beq.n	80002c6 <__divsi3+0x1c2>
 80002d4:	e716      	b.n	8000104 <__divsi3>
 80002d6:	4770      	bx	lr

080002d8 <__aeabi_idiv0>:
 80002d8:	4770      	bx	lr
 80002da:	46c0      	nop			; (mov r8, r8)

080002dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	b082      	sub	sp, #8
 80002e0:	af00      	add	r7, sp, #0
 80002e2:	0002      	movs	r2, r0
 80002e4:	1dfb      	adds	r3, r7, #7
 80002e6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80002e8:	1dfb      	adds	r3, r7, #7
 80002ea:	781b      	ldrb	r3, [r3, #0]
 80002ec:	2b7f      	cmp	r3, #127	; 0x7f
 80002ee:	d809      	bhi.n	8000304 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80002f0:	1dfb      	adds	r3, r7, #7
 80002f2:	781b      	ldrb	r3, [r3, #0]
 80002f4:	001a      	movs	r2, r3
 80002f6:	231f      	movs	r3, #31
 80002f8:	401a      	ands	r2, r3
 80002fa:	4b04      	ldr	r3, [pc, #16]	; (800030c <__NVIC_EnableIRQ+0x30>)
 80002fc:	2101      	movs	r1, #1
 80002fe:	4091      	lsls	r1, r2
 8000300:	000a      	movs	r2, r1
 8000302:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000304:	46c0      	nop			; (mov r8, r8)
 8000306:	46bd      	mov	sp, r7
 8000308:	b002      	add	sp, #8
 800030a:	bd80      	pop	{r7, pc}
 800030c:	e000e100 	.word	0xe000e100

08000310 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000310:	b590      	push	{r4, r7, lr}
 8000312:	b083      	sub	sp, #12
 8000314:	af00      	add	r7, sp, #0
 8000316:	0002      	movs	r2, r0
 8000318:	6039      	str	r1, [r7, #0]
 800031a:	1dfb      	adds	r3, r7, #7
 800031c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800031e:	1dfb      	adds	r3, r7, #7
 8000320:	781b      	ldrb	r3, [r3, #0]
 8000322:	2b7f      	cmp	r3, #127	; 0x7f
 8000324:	d828      	bhi.n	8000378 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000326:	4a2f      	ldr	r2, [pc, #188]	; (80003e4 <__NVIC_SetPriority+0xd4>)
 8000328:	1dfb      	adds	r3, r7, #7
 800032a:	781b      	ldrb	r3, [r3, #0]
 800032c:	b25b      	sxtb	r3, r3
 800032e:	089b      	lsrs	r3, r3, #2
 8000330:	33c0      	adds	r3, #192	; 0xc0
 8000332:	009b      	lsls	r3, r3, #2
 8000334:	589b      	ldr	r3, [r3, r2]
 8000336:	1dfa      	adds	r2, r7, #7
 8000338:	7812      	ldrb	r2, [r2, #0]
 800033a:	0011      	movs	r1, r2
 800033c:	2203      	movs	r2, #3
 800033e:	400a      	ands	r2, r1
 8000340:	00d2      	lsls	r2, r2, #3
 8000342:	21ff      	movs	r1, #255	; 0xff
 8000344:	4091      	lsls	r1, r2
 8000346:	000a      	movs	r2, r1
 8000348:	43d2      	mvns	r2, r2
 800034a:	401a      	ands	r2, r3
 800034c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800034e:	683b      	ldr	r3, [r7, #0]
 8000350:	019b      	lsls	r3, r3, #6
 8000352:	22ff      	movs	r2, #255	; 0xff
 8000354:	401a      	ands	r2, r3
 8000356:	1dfb      	adds	r3, r7, #7
 8000358:	781b      	ldrb	r3, [r3, #0]
 800035a:	0018      	movs	r0, r3
 800035c:	2303      	movs	r3, #3
 800035e:	4003      	ands	r3, r0
 8000360:	00db      	lsls	r3, r3, #3
 8000362:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000364:	481f      	ldr	r0, [pc, #124]	; (80003e4 <__NVIC_SetPriority+0xd4>)
 8000366:	1dfb      	adds	r3, r7, #7
 8000368:	781b      	ldrb	r3, [r3, #0]
 800036a:	b25b      	sxtb	r3, r3
 800036c:	089b      	lsrs	r3, r3, #2
 800036e:	430a      	orrs	r2, r1
 8000370:	33c0      	adds	r3, #192	; 0xc0
 8000372:	009b      	lsls	r3, r3, #2
 8000374:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000376:	e031      	b.n	80003dc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000378:	4a1b      	ldr	r2, [pc, #108]	; (80003e8 <__NVIC_SetPriority+0xd8>)
 800037a:	1dfb      	adds	r3, r7, #7
 800037c:	781b      	ldrb	r3, [r3, #0]
 800037e:	0019      	movs	r1, r3
 8000380:	230f      	movs	r3, #15
 8000382:	400b      	ands	r3, r1
 8000384:	3b08      	subs	r3, #8
 8000386:	089b      	lsrs	r3, r3, #2
 8000388:	3306      	adds	r3, #6
 800038a:	009b      	lsls	r3, r3, #2
 800038c:	18d3      	adds	r3, r2, r3
 800038e:	3304      	adds	r3, #4
 8000390:	681b      	ldr	r3, [r3, #0]
 8000392:	1dfa      	adds	r2, r7, #7
 8000394:	7812      	ldrb	r2, [r2, #0]
 8000396:	0011      	movs	r1, r2
 8000398:	2203      	movs	r2, #3
 800039a:	400a      	ands	r2, r1
 800039c:	00d2      	lsls	r2, r2, #3
 800039e:	21ff      	movs	r1, #255	; 0xff
 80003a0:	4091      	lsls	r1, r2
 80003a2:	000a      	movs	r2, r1
 80003a4:	43d2      	mvns	r2, r2
 80003a6:	401a      	ands	r2, r3
 80003a8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80003aa:	683b      	ldr	r3, [r7, #0]
 80003ac:	019b      	lsls	r3, r3, #6
 80003ae:	22ff      	movs	r2, #255	; 0xff
 80003b0:	401a      	ands	r2, r3
 80003b2:	1dfb      	adds	r3, r7, #7
 80003b4:	781b      	ldrb	r3, [r3, #0]
 80003b6:	0018      	movs	r0, r3
 80003b8:	2303      	movs	r3, #3
 80003ba:	4003      	ands	r3, r0
 80003bc:	00db      	lsls	r3, r3, #3
 80003be:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80003c0:	4809      	ldr	r0, [pc, #36]	; (80003e8 <__NVIC_SetPriority+0xd8>)
 80003c2:	1dfb      	adds	r3, r7, #7
 80003c4:	781b      	ldrb	r3, [r3, #0]
 80003c6:	001c      	movs	r4, r3
 80003c8:	230f      	movs	r3, #15
 80003ca:	4023      	ands	r3, r4
 80003cc:	3b08      	subs	r3, #8
 80003ce:	089b      	lsrs	r3, r3, #2
 80003d0:	430a      	orrs	r2, r1
 80003d2:	3306      	adds	r3, #6
 80003d4:	009b      	lsls	r3, r3, #2
 80003d6:	18c3      	adds	r3, r0, r3
 80003d8:	3304      	adds	r3, #4
 80003da:	601a      	str	r2, [r3, #0]
}
 80003dc:	46c0      	nop			; (mov r8, r8)
 80003de:	46bd      	mov	sp, r7
 80003e0:	b003      	add	sp, #12
 80003e2:	bd90      	pop	{r4, r7, pc}
 80003e4:	e000e100 	.word	0xe000e100
 80003e8:	e000ed00 	.word	0xe000ed00

080003ec <main>:
void ButtonInit(void);
void GPIOA_Init(void);
void GPIOB_Init(void);
void EXTI0_1_IRQHandler(void);

int main(void) {
 80003ec:	b580      	push	{r7, lr}
 80003ee:	af00      	add	r7, sp, #0
	GPIOA_Init();
 80003f0:	f000 f9f8 	bl	80007e4 <GPIOA_Init>
	GPIOB_Init();
 80003f4:	f000 fa18 	bl	8000828 <GPIOB_Init>
	SetZero();
 80003f8:	f000 fa34 	bl	8000864 <SetZero>
	ButtonInit();
 80003fc:	f000 f9d2 	bl	80007a4 <ButtonInit>

	while(1) {
 8000400:	e7fe      	b.n	8000400 <main+0x14>
	...

08000404 <EXTI0_1_IRQHandler>:
	}

	return 0;
}

void EXTI0_1_IRQHandler(void){ // EXTI for button
 8000404:	b580      	push	{r7, lr}
 8000406:	af00      	add	r7, sp, #0
	counter(); // when button pressed, counter is started.
 8000408:	f000 f89c 	bl	8000544 <counter>
	EXTI->RPR1 |= (1U << 1); // Rising Pending Register
 800040c:	4b04      	ldr	r3, [pc, #16]	; (8000420 <EXTI0_1_IRQHandler+0x1c>)
 800040e:	68da      	ldr	r2, [r3, #12]
 8000410:	4b03      	ldr	r3, [pc, #12]	; (8000420 <EXTI0_1_IRQHandler+0x1c>)
 8000412:	2102      	movs	r1, #2
 8000414:	430a      	orrs	r2, r1
 8000416:	60da      	str	r2, [r3, #12]
}
 8000418:	46c0      	nop			; (mov r8, r8)
 800041a:	46bd      	mov	sp, r7
 800041c:	bd80      	pop	{r7, pc}
 800041e:	46c0      	nop			; (mov r8, r8)
 8000420:	40021800 	.word	0x40021800

08000424 <clearSSD>:

void clearSSD(void){ // Clear display
 8000424:	b580      	push	{r7, lr}
 8000426:	af00      	add	r7, sp, #0
	GPIOB -> ODR |= (1U << 0); //PB0 -> A
 8000428:	4b16      	ldr	r3, [pc, #88]	; (8000484 <clearSSD+0x60>)
 800042a:	695a      	ldr	r2, [r3, #20]
 800042c:	4b15      	ldr	r3, [pc, #84]	; (8000484 <clearSSD+0x60>)
 800042e:	2101      	movs	r1, #1
 8000430:	430a      	orrs	r2, r1
 8000432:	615a      	str	r2, [r3, #20]
	GPIOB -> ODR |= (1U << 1); //PB1 -> B
 8000434:	4b13      	ldr	r3, [pc, #76]	; (8000484 <clearSSD+0x60>)
 8000436:	695a      	ldr	r2, [r3, #20]
 8000438:	4b12      	ldr	r3, [pc, #72]	; (8000484 <clearSSD+0x60>)
 800043a:	2102      	movs	r1, #2
 800043c:	430a      	orrs	r2, r1
 800043e:	615a      	str	r2, [r3, #20]
	GPIOB -> ODR |= (1U << 2); //PB2 -> C
 8000440:	4b10      	ldr	r3, [pc, #64]	; (8000484 <clearSSD+0x60>)
 8000442:	695a      	ldr	r2, [r3, #20]
 8000444:	4b0f      	ldr	r3, [pc, #60]	; (8000484 <clearSSD+0x60>)
 8000446:	2104      	movs	r1, #4
 8000448:	430a      	orrs	r2, r1
 800044a:	615a      	str	r2, [r3, #20]
	GPIOB -> ODR |= (1U << 3); //PB3 -> D
 800044c:	4b0d      	ldr	r3, [pc, #52]	; (8000484 <clearSSD+0x60>)
 800044e:	695a      	ldr	r2, [r3, #20]
 8000450:	4b0c      	ldr	r3, [pc, #48]	; (8000484 <clearSSD+0x60>)
 8000452:	2108      	movs	r1, #8
 8000454:	430a      	orrs	r2, r1
 8000456:	615a      	str	r2, [r3, #20]
	GPIOB -> ODR |= (1U << 4); //PB4 -> E
 8000458:	4b0a      	ldr	r3, [pc, #40]	; (8000484 <clearSSD+0x60>)
 800045a:	695a      	ldr	r2, [r3, #20]
 800045c:	4b09      	ldr	r3, [pc, #36]	; (8000484 <clearSSD+0x60>)
 800045e:	2110      	movs	r1, #16
 8000460:	430a      	orrs	r2, r1
 8000462:	615a      	str	r2, [r3, #20]
	GPIOB -> ODR |= (1U << 5); //PB5 -> F
 8000464:	4b07      	ldr	r3, [pc, #28]	; (8000484 <clearSSD+0x60>)
 8000466:	695a      	ldr	r2, [r3, #20]
 8000468:	4b06      	ldr	r3, [pc, #24]	; (8000484 <clearSSD+0x60>)
 800046a:	2120      	movs	r1, #32
 800046c:	430a      	orrs	r2, r1
 800046e:	615a      	str	r2, [r3, #20]
	GPIOB -> ODR |= (1U << 6); //PB6 -> G
 8000470:	4b04      	ldr	r3, [pc, #16]	; (8000484 <clearSSD+0x60>)
 8000472:	695a      	ldr	r2, [r3, #20]
 8000474:	4b03      	ldr	r3, [pc, #12]	; (8000484 <clearSSD+0x60>)
 8000476:	2140      	movs	r1, #64	; 0x40
 8000478:	430a      	orrs	r2, r1
 800047a:	615a      	str	r2, [r3, #20]
}
 800047c:	46c0      	nop			; (mov r8, r8)
 800047e:	46bd      	mov	sp, r7
 8000480:	bd80      	pop	{r7, pc}
 8000482:	46c0      	nop			; (mov r8, r8)
 8000484:	50000400 	.word	0x50000400

08000488 <setSSD>:

void setSSD(int x){ // choose number we want and its leds are turned on.
 8000488:	b580      	push	{r7, lr}
 800048a:	b082      	sub	sp, #8
 800048c:	af00      	add	r7, sp, #0
 800048e:	6078      	str	r0, [r7, #4]
	clearSSD();
 8000490:	f7ff ffc8 	bl	8000424 <clearSSD>
	switch(x){
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	2b09      	cmp	r3, #9
 8000498:	d84b      	bhi.n	8000532 <setSSD+0xaa>
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	009a      	lsls	r2, r3, #2
 800049e:	4b27      	ldr	r3, [pc, #156]	; (800053c <setSSD+0xb4>)
 80004a0:	18d3      	adds	r3, r2, r3
 80004a2:	681b      	ldr	r3, [r3, #0]
 80004a4:	469f      	mov	pc, r3
		case 0:
			GPIOB->ODR &= ~(0x3F); // A,B,C,D,E,F is on
 80004a6:	4b26      	ldr	r3, [pc, #152]	; (8000540 <setSSD+0xb8>)
 80004a8:	695a      	ldr	r2, [r3, #20]
 80004aa:	4b25      	ldr	r3, [pc, #148]	; (8000540 <setSSD+0xb8>)
 80004ac:	213f      	movs	r1, #63	; 0x3f
 80004ae:	438a      	bics	r2, r1
 80004b0:	615a      	str	r2, [r3, #20]
			break;
 80004b2:	e03e      	b.n	8000532 <setSSD+0xaa>
		case 1:
			GPIOB->ODR &= ~(0x6); // B,C is on
 80004b4:	4b22      	ldr	r3, [pc, #136]	; (8000540 <setSSD+0xb8>)
 80004b6:	695a      	ldr	r2, [r3, #20]
 80004b8:	4b21      	ldr	r3, [pc, #132]	; (8000540 <setSSD+0xb8>)
 80004ba:	2106      	movs	r1, #6
 80004bc:	438a      	bics	r2, r1
 80004be:	615a      	str	r2, [r3, #20]
			break;
 80004c0:	e037      	b.n	8000532 <setSSD+0xaa>
		case 2:
			GPIOB->ODR &= ~(0x5B); // A,B,D,E,G is on
 80004c2:	4b1f      	ldr	r3, [pc, #124]	; (8000540 <setSSD+0xb8>)
 80004c4:	695a      	ldr	r2, [r3, #20]
 80004c6:	4b1e      	ldr	r3, [pc, #120]	; (8000540 <setSSD+0xb8>)
 80004c8:	215b      	movs	r1, #91	; 0x5b
 80004ca:	438a      	bics	r2, r1
 80004cc:	615a      	str	r2, [r3, #20]
			break;
 80004ce:	e030      	b.n	8000532 <setSSD+0xaa>
		case 3:
			GPIOB->ODR &= ~(0x4F); // A,B,C,D,G is on
 80004d0:	4b1b      	ldr	r3, [pc, #108]	; (8000540 <setSSD+0xb8>)
 80004d2:	695a      	ldr	r2, [r3, #20]
 80004d4:	4b1a      	ldr	r3, [pc, #104]	; (8000540 <setSSD+0xb8>)
 80004d6:	214f      	movs	r1, #79	; 0x4f
 80004d8:	438a      	bics	r2, r1
 80004da:	615a      	str	r2, [r3, #20]
			break;
 80004dc:	e029      	b.n	8000532 <setSSD+0xaa>
		case 4:
			GPIOB->ODR &= ~(0x66); // B,C,F,G is on
 80004de:	4b18      	ldr	r3, [pc, #96]	; (8000540 <setSSD+0xb8>)
 80004e0:	695a      	ldr	r2, [r3, #20]
 80004e2:	4b17      	ldr	r3, [pc, #92]	; (8000540 <setSSD+0xb8>)
 80004e4:	2166      	movs	r1, #102	; 0x66
 80004e6:	438a      	bics	r2, r1
 80004e8:	615a      	str	r2, [r3, #20]
			break;
 80004ea:	e022      	b.n	8000532 <setSSD+0xaa>
		case 5:
			GPIOB->ODR &= ~(0x6D); // A,C,D,F,G is on
 80004ec:	4b14      	ldr	r3, [pc, #80]	; (8000540 <setSSD+0xb8>)
 80004ee:	695a      	ldr	r2, [r3, #20]
 80004f0:	4b13      	ldr	r3, [pc, #76]	; (8000540 <setSSD+0xb8>)
 80004f2:	216d      	movs	r1, #109	; 0x6d
 80004f4:	438a      	bics	r2, r1
 80004f6:	615a      	str	r2, [r3, #20]
			break;
 80004f8:	e01b      	b.n	8000532 <setSSD+0xaa>
		case 6:
			GPIOB->ODR &= ~(0x7D); // A,C,D,E,F,G is on
 80004fa:	4b11      	ldr	r3, [pc, #68]	; (8000540 <setSSD+0xb8>)
 80004fc:	695a      	ldr	r2, [r3, #20]
 80004fe:	4b10      	ldr	r3, [pc, #64]	; (8000540 <setSSD+0xb8>)
 8000500:	217d      	movs	r1, #125	; 0x7d
 8000502:	438a      	bics	r2, r1
 8000504:	615a      	str	r2, [r3, #20]
			break;
 8000506:	e014      	b.n	8000532 <setSSD+0xaa>
		case 7:
			GPIOB->ODR &= ~(0x7); // A,B,C is on
 8000508:	4b0d      	ldr	r3, [pc, #52]	; (8000540 <setSSD+0xb8>)
 800050a:	695a      	ldr	r2, [r3, #20]
 800050c:	4b0c      	ldr	r3, [pc, #48]	; (8000540 <setSSD+0xb8>)
 800050e:	2107      	movs	r1, #7
 8000510:	438a      	bics	r2, r1
 8000512:	615a      	str	r2, [r3, #20]
			break;
 8000514:	e00d      	b.n	8000532 <setSSD+0xaa>
		case 8:
			GPIOB->ODR &= ~(0x7F); // A,B,C,D,E,F,G is on
 8000516:	4b0a      	ldr	r3, [pc, #40]	; (8000540 <setSSD+0xb8>)
 8000518:	695a      	ldr	r2, [r3, #20]
 800051a:	4b09      	ldr	r3, [pc, #36]	; (8000540 <setSSD+0xb8>)
 800051c:	217f      	movs	r1, #127	; 0x7f
 800051e:	438a      	bics	r2, r1
 8000520:	615a      	str	r2, [r3, #20]
			break;
 8000522:	e006      	b.n	8000532 <setSSD+0xaa>
		case 9:
			GPIOB->ODR &= ~(0x6F); //A,B,C,D,F,G is on; E is off
 8000524:	4b06      	ldr	r3, [pc, #24]	; (8000540 <setSSD+0xb8>)
 8000526:	695a      	ldr	r2, [r3, #20]
 8000528:	4b05      	ldr	r3, [pc, #20]	; (8000540 <setSSD+0xb8>)
 800052a:	216f      	movs	r1, #111	; 0x6f
 800052c:	438a      	bics	r2, r1
 800052e:	615a      	str	r2, [r3, #20]
			break;
 8000530:	46c0      	nop			; (mov r8, r8)
	}
}
 8000532:	46c0      	nop			; (mov r8, r8)
 8000534:	46bd      	mov	sp, r7
 8000536:	b002      	add	sp, #8
 8000538:	bd80      	pop	{r7, pc}
 800053a:	46c0      	nop			; (mov r8, r8)
 800053c:	080009b4 	.word	0x080009b4
 8000540:	50000400 	.word	0x50000400

08000544 <counter>:
void counter(void){
 8000544:	b580      	push	{r7, lr}
 8000546:	b086      	sub	sp, #24
 8000548:	af00      	add	r7, sp, #0
	SetZero(); // leds show us 0000 value.
 800054a:	f000 f98b 	bl	8000864 <SetZero>
	delay(1000000);
 800054e:	4b92      	ldr	r3, [pc, #584]	; (8000798 <counter+0x254>)
 8000550:	0018      	movs	r0, r3
 8000552:	f000 f9af 	bl	80008b4 <delay>
	for(int i=0; i<=9999; i++){ // count up timer until 10000.
 8000556:	2300      	movs	r3, #0
 8000558:	617b      	str	r3, [r7, #20]
 800055a:	e0fb      	b.n	8000754 <counter+0x210>
		int thousand, hundred, decimal, unit;
		thousand=(i/1000); // thousand digit of i
 800055c:	697b      	ldr	r3, [r7, #20]
 800055e:	22fa      	movs	r2, #250	; 0xfa
 8000560:	0091      	lsls	r1, r2, #2
 8000562:	0018      	movs	r0, r3
 8000564:	f7ff fdce 	bl	8000104 <__divsi3>
 8000568:	0003      	movs	r3, r0
 800056a:	613b      	str	r3, [r7, #16]
		hundred=((i-thousand*1000)/100); // hundred digit of i
 800056c:	693a      	ldr	r2, [r7, #16]
 800056e:	0013      	movs	r3, r2
 8000570:	059b      	lsls	r3, r3, #22
 8000572:	1a9b      	subs	r3, r3, r2
 8000574:	019b      	lsls	r3, r3, #6
 8000576:	189b      	adds	r3, r3, r2
 8000578:	005b      	lsls	r3, r3, #1
 800057a:	189b      	adds	r3, r3, r2
 800057c:	00db      	lsls	r3, r3, #3
 800057e:	001a      	movs	r2, r3
 8000580:	697b      	ldr	r3, [r7, #20]
 8000582:	18d3      	adds	r3, r2, r3
 8000584:	2164      	movs	r1, #100	; 0x64
 8000586:	0018      	movs	r0, r3
 8000588:	f7ff fdbc 	bl	8000104 <__divsi3>
 800058c:	0003      	movs	r3, r0
 800058e:	60fb      	str	r3, [r7, #12]
		decimal=((i- thousand*1000 - hundred*100)/10); // decimal digit of i
 8000590:	693a      	ldr	r2, [r7, #16]
 8000592:	0013      	movs	r3, r2
 8000594:	059b      	lsls	r3, r3, #22
 8000596:	1a9b      	subs	r3, r3, r2
 8000598:	019b      	lsls	r3, r3, #6
 800059a:	189b      	adds	r3, r3, r2
 800059c:	005b      	lsls	r3, r3, #1
 800059e:	189b      	adds	r3, r3, r2
 80005a0:	00db      	lsls	r3, r3, #3
 80005a2:	001a      	movs	r2, r3
 80005a4:	697b      	ldr	r3, [r7, #20]
 80005a6:	18d1      	adds	r1, r2, r3
 80005a8:	68fa      	ldr	r2, [r7, #12]
 80005aa:	0013      	movs	r3, r2
 80005ac:	065b      	lsls	r3, r3, #25
 80005ae:	1a9b      	subs	r3, r3, r2
 80005b0:	009b      	lsls	r3, r3, #2
 80005b2:	189b      	adds	r3, r3, r2
 80005b4:	00db      	lsls	r3, r3, #3
 80005b6:	1a9b      	subs	r3, r3, r2
 80005b8:	009b      	lsls	r3, r3, #2
 80005ba:	18cb      	adds	r3, r1, r3
 80005bc:	210a      	movs	r1, #10
 80005be:	0018      	movs	r0, r3
 80005c0:	f7ff fda0 	bl	8000104 <__divsi3>
 80005c4:	0003      	movs	r3, r0
 80005c6:	60bb      	str	r3, [r7, #8]
		unit=(i- thousand*1000 - hundred*100 - decimal*10); // unit digit of i
 80005c8:	693a      	ldr	r2, [r7, #16]
 80005ca:	0013      	movs	r3, r2
 80005cc:	059b      	lsls	r3, r3, #22
 80005ce:	1a9b      	subs	r3, r3, r2
 80005d0:	019b      	lsls	r3, r3, #6
 80005d2:	189b      	adds	r3, r3, r2
 80005d4:	005b      	lsls	r3, r3, #1
 80005d6:	189b      	adds	r3, r3, r2
 80005d8:	00db      	lsls	r3, r3, #3
 80005da:	001a      	movs	r2, r3
 80005dc:	697b      	ldr	r3, [r7, #20]
 80005de:	18d1      	adds	r1, r2, r3
 80005e0:	68fa      	ldr	r2, [r7, #12]
 80005e2:	0013      	movs	r3, r2
 80005e4:	065b      	lsls	r3, r3, #25
 80005e6:	1a9b      	subs	r3, r3, r2
 80005e8:	009b      	lsls	r3, r3, #2
 80005ea:	189b      	adds	r3, r3, r2
 80005ec:	00db      	lsls	r3, r3, #3
 80005ee:	1a9b      	subs	r3, r3, r2
 80005f0:	009b      	lsls	r3, r3, #2
 80005f2:	18c9      	adds	r1, r1, r3
 80005f4:	68ba      	ldr	r2, [r7, #8]
 80005f6:	0013      	movs	r3, r2
 80005f8:	075b      	lsls	r3, r3, #29
 80005fa:	1a9b      	subs	r3, r3, r2
 80005fc:	009b      	lsls	r3, r3, #2
 80005fe:	1a9b      	subs	r3, r3, r2
 8000600:	005b      	lsls	r3, r3, #1
 8000602:	18cb      	adds	r3, r1, r3
 8000604:	607b      	str	r3, [r7, #4]

		/* unit digit we want is set to 1 and the others are set to 0*/
		GPIOA ->ODR &= ~(1U << 7); // off D1 - PA7
 8000606:	23a0      	movs	r3, #160	; 0xa0
 8000608:	05db      	lsls	r3, r3, #23
 800060a:	695a      	ldr	r2, [r3, #20]
 800060c:	23a0      	movs	r3, #160	; 0xa0
 800060e:	05db      	lsls	r3, r3, #23
 8000610:	2180      	movs	r1, #128	; 0x80
 8000612:	438a      	bics	r2, r1
 8000614:	615a      	str	r2, [r3, #20]
		GPIOA ->ODR &= ~(1U << 6); // off D2 - PA6
 8000616:	23a0      	movs	r3, #160	; 0xa0
 8000618:	05db      	lsls	r3, r3, #23
 800061a:	695a      	ldr	r2, [r3, #20]
 800061c:	23a0      	movs	r3, #160	; 0xa0
 800061e:	05db      	lsls	r3, r3, #23
 8000620:	2140      	movs	r1, #64	; 0x40
 8000622:	438a      	bics	r2, r1
 8000624:	615a      	str	r2, [r3, #20]
		GPIOA ->ODR &= ~(1U << 0); // off D3 - PA0
 8000626:	23a0      	movs	r3, #160	; 0xa0
 8000628:	05db      	lsls	r3, r3, #23
 800062a:	695a      	ldr	r2, [r3, #20]
 800062c:	23a0      	movs	r3, #160	; 0xa0
 800062e:	05db      	lsls	r3, r3, #23
 8000630:	2101      	movs	r1, #1
 8000632:	438a      	bics	r2, r1
 8000634:	615a      	str	r2, [r3, #20]
		GPIOA ->ODR |= (1U << 5); // on D4 - PA5
 8000636:	23a0      	movs	r3, #160	; 0xa0
 8000638:	05db      	lsls	r3, r3, #23
 800063a:	695a      	ldr	r2, [r3, #20]
 800063c:	23a0      	movs	r3, #160	; 0xa0
 800063e:	05db      	lsls	r3, r3, #23
 8000640:	2120      	movs	r1, #32
 8000642:	430a      	orrs	r2, r1
 8000644:	615a      	str	r2, [r3, #20]
		setSSD(unit);
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	0018      	movs	r0, r3
 800064a:	f7ff ff1d 	bl	8000488 <setSSD>
		delay(300);
 800064e:	2396      	movs	r3, #150	; 0x96
 8000650:	005b      	lsls	r3, r3, #1
 8000652:	0018      	movs	r0, r3
 8000654:	f000 f92e 	bl	80008b4 <delay>

		/* decimal digit we want is set to 1 and the others are set to 0*/
		GPIOA ->ODR &= ~(1U << 7); // off D1 - PA7
 8000658:	23a0      	movs	r3, #160	; 0xa0
 800065a:	05db      	lsls	r3, r3, #23
 800065c:	695a      	ldr	r2, [r3, #20]
 800065e:	23a0      	movs	r3, #160	; 0xa0
 8000660:	05db      	lsls	r3, r3, #23
 8000662:	2180      	movs	r1, #128	; 0x80
 8000664:	438a      	bics	r2, r1
 8000666:	615a      	str	r2, [r3, #20]
		GPIOA ->ODR &= ~(1U << 6); // off D2 - PA6
 8000668:	23a0      	movs	r3, #160	; 0xa0
 800066a:	05db      	lsls	r3, r3, #23
 800066c:	695a      	ldr	r2, [r3, #20]
 800066e:	23a0      	movs	r3, #160	; 0xa0
 8000670:	05db      	lsls	r3, r3, #23
 8000672:	2140      	movs	r1, #64	; 0x40
 8000674:	438a      	bics	r2, r1
 8000676:	615a      	str	r2, [r3, #20]
		GPIOA ->ODR |= (1U << 0); // on D3 - PA0
 8000678:	23a0      	movs	r3, #160	; 0xa0
 800067a:	05db      	lsls	r3, r3, #23
 800067c:	695a      	ldr	r2, [r3, #20]
 800067e:	23a0      	movs	r3, #160	; 0xa0
 8000680:	05db      	lsls	r3, r3, #23
 8000682:	2101      	movs	r1, #1
 8000684:	430a      	orrs	r2, r1
 8000686:	615a      	str	r2, [r3, #20]
		GPIOA ->ODR &= ~(1U << 5); // off D4 - PA5
 8000688:	23a0      	movs	r3, #160	; 0xa0
 800068a:	05db      	lsls	r3, r3, #23
 800068c:	695a      	ldr	r2, [r3, #20]
 800068e:	23a0      	movs	r3, #160	; 0xa0
 8000690:	05db      	lsls	r3, r3, #23
 8000692:	2120      	movs	r1, #32
 8000694:	438a      	bics	r2, r1
 8000696:	615a      	str	r2, [r3, #20]
		setSSD(decimal);
 8000698:	68bb      	ldr	r3, [r7, #8]
 800069a:	0018      	movs	r0, r3
 800069c:	f7ff fef4 	bl	8000488 <setSSD>
		delay(300);
 80006a0:	2396      	movs	r3, #150	; 0x96
 80006a2:	005b      	lsls	r3, r3, #1
 80006a4:	0018      	movs	r0, r3
 80006a6:	f000 f905 	bl	80008b4 <delay>

		/* hundred digit we want is set to 1 and the others are set to 0*/
		GPIOA ->ODR &= ~(1U << 7); // off D1 - PA7
 80006aa:	23a0      	movs	r3, #160	; 0xa0
 80006ac:	05db      	lsls	r3, r3, #23
 80006ae:	695a      	ldr	r2, [r3, #20]
 80006b0:	23a0      	movs	r3, #160	; 0xa0
 80006b2:	05db      	lsls	r3, r3, #23
 80006b4:	2180      	movs	r1, #128	; 0x80
 80006b6:	438a      	bics	r2, r1
 80006b8:	615a      	str	r2, [r3, #20]
		GPIOA ->ODR |= (1U << 6); // on D2 - PA6
 80006ba:	23a0      	movs	r3, #160	; 0xa0
 80006bc:	05db      	lsls	r3, r3, #23
 80006be:	695a      	ldr	r2, [r3, #20]
 80006c0:	23a0      	movs	r3, #160	; 0xa0
 80006c2:	05db      	lsls	r3, r3, #23
 80006c4:	2140      	movs	r1, #64	; 0x40
 80006c6:	430a      	orrs	r2, r1
 80006c8:	615a      	str	r2, [r3, #20]
		GPIOA ->ODR &= ~(1U << 0); // off D3 - PA0
 80006ca:	23a0      	movs	r3, #160	; 0xa0
 80006cc:	05db      	lsls	r3, r3, #23
 80006ce:	695a      	ldr	r2, [r3, #20]
 80006d0:	23a0      	movs	r3, #160	; 0xa0
 80006d2:	05db      	lsls	r3, r3, #23
 80006d4:	2101      	movs	r1, #1
 80006d6:	438a      	bics	r2, r1
 80006d8:	615a      	str	r2, [r3, #20]
		GPIOA ->ODR &= ~(1U << 5); // off D4 - PA5
 80006da:	23a0      	movs	r3, #160	; 0xa0
 80006dc:	05db      	lsls	r3, r3, #23
 80006de:	695a      	ldr	r2, [r3, #20]
 80006e0:	23a0      	movs	r3, #160	; 0xa0
 80006e2:	05db      	lsls	r3, r3, #23
 80006e4:	2120      	movs	r1, #32
 80006e6:	438a      	bics	r2, r1
 80006e8:	615a      	str	r2, [r3, #20]
		setSSD(hundred);
 80006ea:	68fb      	ldr	r3, [r7, #12]
 80006ec:	0018      	movs	r0, r3
 80006ee:	f7ff fecb 	bl	8000488 <setSSD>
		delay(300);
 80006f2:	2396      	movs	r3, #150	; 0x96
 80006f4:	005b      	lsls	r3, r3, #1
 80006f6:	0018      	movs	r0, r3
 80006f8:	f000 f8dc 	bl	80008b4 <delay>

		/* thousand digit we want is set to 1 and the others are set to 0*/
		GPIOA ->ODR |= (1U << 7); // on D1 - PA7
 80006fc:	23a0      	movs	r3, #160	; 0xa0
 80006fe:	05db      	lsls	r3, r3, #23
 8000700:	695a      	ldr	r2, [r3, #20]
 8000702:	23a0      	movs	r3, #160	; 0xa0
 8000704:	05db      	lsls	r3, r3, #23
 8000706:	2180      	movs	r1, #128	; 0x80
 8000708:	430a      	orrs	r2, r1
 800070a:	615a      	str	r2, [r3, #20]
		GPIOA ->ODR &= ~(1U << 6); // off D2 - PA6
 800070c:	23a0      	movs	r3, #160	; 0xa0
 800070e:	05db      	lsls	r3, r3, #23
 8000710:	695a      	ldr	r2, [r3, #20]
 8000712:	23a0      	movs	r3, #160	; 0xa0
 8000714:	05db      	lsls	r3, r3, #23
 8000716:	2140      	movs	r1, #64	; 0x40
 8000718:	438a      	bics	r2, r1
 800071a:	615a      	str	r2, [r3, #20]
		GPIOA ->ODR &= ~(1U << 0); // off D3 - PA0
 800071c:	23a0      	movs	r3, #160	; 0xa0
 800071e:	05db      	lsls	r3, r3, #23
 8000720:	695a      	ldr	r2, [r3, #20]
 8000722:	23a0      	movs	r3, #160	; 0xa0
 8000724:	05db      	lsls	r3, r3, #23
 8000726:	2101      	movs	r1, #1
 8000728:	438a      	bics	r2, r1
 800072a:	615a      	str	r2, [r3, #20]
		GPIOA ->ODR &= ~(1U << 5); // off D4 - PA5
 800072c:	23a0      	movs	r3, #160	; 0xa0
 800072e:	05db      	lsls	r3, r3, #23
 8000730:	695a      	ldr	r2, [r3, #20]
 8000732:	23a0      	movs	r3, #160	; 0xa0
 8000734:	05db      	lsls	r3, r3, #23
 8000736:	2120      	movs	r1, #32
 8000738:	438a      	bics	r2, r1
 800073a:	615a      	str	r2, [r3, #20]
		setSSD(thousand);
 800073c:	693b      	ldr	r3, [r7, #16]
 800073e:	0018      	movs	r0, r3
 8000740:	f7ff fea2 	bl	8000488 <setSSD>
		delay(300);
 8000744:	2396      	movs	r3, #150	; 0x96
 8000746:	005b      	lsls	r3, r3, #1
 8000748:	0018      	movs	r0, r3
 800074a:	f000 f8b3 	bl	80008b4 <delay>
	for(int i=0; i<=9999; i++){ // count up timer until 10000.
 800074e:	697b      	ldr	r3, [r7, #20]
 8000750:	3301      	adds	r3, #1
 8000752:	617b      	str	r3, [r7, #20]
 8000754:	697b      	ldr	r3, [r7, #20]
 8000756:	4a11      	ldr	r2, [pc, #68]	; (800079c <counter+0x258>)
 8000758:	4293      	cmp	r3, r2
 800075a:	dc00      	bgt.n	800075e <counter+0x21a>
 800075c:	e6fe      	b.n	800055c <counter+0x18>
	}

	GPIOB->ODR |= (1U << 8); // PB8 - LED turn on
 800075e:	4b10      	ldr	r3, [pc, #64]	; (80007a0 <counter+0x25c>)
 8000760:	695a      	ldr	r2, [r3, #20]
 8000762:	4b0f      	ldr	r3, [pc, #60]	; (80007a0 <counter+0x25c>)
 8000764:	2180      	movs	r1, #128	; 0x80
 8000766:	0049      	lsls	r1, r1, #1
 8000768:	430a      	orrs	r2, r1
 800076a:	615a      	str	r2, [r3, #20]
	delay(1000000);
 800076c:	4b0a      	ldr	r3, [pc, #40]	; (8000798 <counter+0x254>)
 800076e:	0018      	movs	r0, r3
 8000770:	f000 f8a0 	bl	80008b4 <delay>
	GPIOB->BRR |= (1U << 8); // led turn off
 8000774:	4b0a      	ldr	r3, [pc, #40]	; (80007a0 <counter+0x25c>)
 8000776:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000778:	4b09      	ldr	r3, [pc, #36]	; (80007a0 <counter+0x25c>)
 800077a:	2180      	movs	r1, #128	; 0x80
 800077c:	0049      	lsls	r1, r1, #1
 800077e:	430a      	orrs	r2, r1
 8000780:	629a      	str	r2, [r3, #40]	; 0x28
	SetZero();
 8000782:	f000 f86f 	bl	8000864 <SetZero>
	delay(1000000);
 8000786:	4b04      	ldr	r3, [pc, #16]	; (8000798 <counter+0x254>)
 8000788:	0018      	movs	r0, r3
 800078a:	f000 f893 	bl	80008b4 <delay>
}
 800078e:	46c0      	nop			; (mov r8, r8)
 8000790:	46bd      	mov	sp, r7
 8000792:	b006      	add	sp, #24
 8000794:	bd80      	pop	{r7, pc}
 8000796:	46c0      	nop			; (mov r8, r8)
 8000798:	000f4240 	.word	0x000f4240
 800079c:	0000270f 	.word	0x0000270f
 80007a0:	50000400 	.word	0x50000400

080007a4 <ButtonInit>:
void ButtonInit(void){
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
	/* rising edge, selection register and mask register */
	// PA1 is button
	EXTI->RTSR1 |= (1U << 1); // Rising Trigger Selection Register
 80007a8:	4b0d      	ldr	r3, [pc, #52]	; (80007e0 <ButtonInit+0x3c>)
 80007aa:	681a      	ldr	r2, [r3, #0]
 80007ac:	4b0c      	ldr	r3, [pc, #48]	; (80007e0 <ButtonInit+0x3c>)
 80007ae:	2102      	movs	r1, #2
 80007b0:	430a      	orrs	r2, r1
 80007b2:	601a      	str	r2, [r3, #0]
	EXTI->EXTICR[0] |= (0U << 8*1); // External Interrupt Configuration Register | for port selection
 80007b4:	4a0a      	ldr	r2, [pc, #40]	; (80007e0 <ButtonInit+0x3c>)
 80007b6:	4b0a      	ldr	r3, [pc, #40]	; (80007e0 <ButtonInit+0x3c>)
 80007b8:	6e12      	ldr	r2, [r2, #96]	; 0x60
 80007ba:	661a      	str	r2, [r3, #96]	; 0x60
	EXTI->IMR1 |= (1U << 1); // Interrupt Mask Register
 80007bc:	4a08      	ldr	r2, [pc, #32]	; (80007e0 <ButtonInit+0x3c>)
 80007be:	2380      	movs	r3, #128	; 0x80
 80007c0:	58d3      	ldr	r3, [r2, r3]
 80007c2:	4907      	ldr	r1, [pc, #28]	; (80007e0 <ButtonInit+0x3c>)
 80007c4:	2202      	movs	r2, #2
 80007c6:	4313      	orrs	r3, r2
 80007c8:	2280      	movs	r2, #128	; 0x80
 80007ca:	508b      	str	r3, [r1, r2]

	/* enable NVIC and set interrupt priority */
	NVIC_SetPriority(EXTI0_1_IRQn, 0);
 80007cc:	2100      	movs	r1, #0
 80007ce:	2005      	movs	r0, #5
 80007d0:	f7ff fd9e 	bl	8000310 <__NVIC_SetPriority>
	NVIC_EnableIRQ(EXTI0_1_IRQn);
 80007d4:	2005      	movs	r0, #5
 80007d6:	f7ff fd81 	bl	80002dc <__NVIC_EnableIRQ>
}
 80007da:	46c0      	nop			; (mov r8, r8)
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	40021800 	.word	0x40021800

080007e4 <GPIOA_Init>:

void GPIOA_Init(void){
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0
	/* enable required GPIOA registers and RCC register */
	/*PA7 -> D1 digit, PA6 -> D2 digit, PA0 -> D3 digit, PA5 -> D4 digit,*/
	RCC->IOPENR |= (1U << 0);
 80007e8:	4b0c      	ldr	r3, [pc, #48]	; (800081c <GPIOA_Init+0x38>)
 80007ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80007ec:	4b0b      	ldr	r3, [pc, #44]	; (800081c <GPIOA_Init+0x38>)
 80007ee:	2101      	movs	r1, #1
 80007f0:	430a      	orrs	r2, r1
 80007f2:	635a      	str	r2, [r3, #52]	; 0x34
	GPIOA->MODER &= ~(0xFC03); // &= ~(0b1111_1100_0000_0011)
 80007f4:	23a0      	movs	r3, #160	; 0xa0
 80007f6:	05db      	lsls	r3, r3, #23
 80007f8:	681a      	ldr	r2, [r3, #0]
 80007fa:	23a0      	movs	r3, #160	; 0xa0
 80007fc:	05db      	lsls	r3, r3, #23
 80007fe:	4908      	ldr	r1, [pc, #32]	; (8000820 <GPIOA_Init+0x3c>)
 8000800:	400a      	ands	r2, r1
 8000802:	601a      	str	r2, [r3, #0]
	GPIOA->MODER |= 0x5401; // |= (0b0101_0100_0000_0001)
 8000804:	23a0      	movs	r3, #160	; 0xa0
 8000806:	05db      	lsls	r3, r3, #23
 8000808:	681a      	ldr	r2, [r3, #0]
 800080a:	23a0      	movs	r3, #160	; 0xa0
 800080c:	05db      	lsls	r3, r3, #23
 800080e:	4905      	ldr	r1, [pc, #20]	; (8000824 <GPIOA_Init+0x40>)
 8000810:	430a      	orrs	r2, r1
 8000812:	601a      	str	r2, [r3, #0]
}
 8000814:	46c0      	nop			; (mov r8, r8)
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}
 800081a:	46c0      	nop			; (mov r8, r8)
 800081c:	40021000 	.word	0x40021000
 8000820:	ffff03fc 	.word	0xffff03fc
 8000824:	00005401 	.word	0x00005401

08000828 <GPIOB_Init>:

void GPIOB_Init(void){
 8000828:	b580      	push	{r7, lr}
 800082a:	af00      	add	r7, sp, #0
	/* enable required GPIOB registers and RCC register */
	/*PB0-PB6 output pins are assigned from A to G respectively*/
	RCC->IOPENR |= (1U << 1);
 800082c:	4b0a      	ldr	r3, [pc, #40]	; (8000858 <GPIOB_Init+0x30>)
 800082e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000830:	4b09      	ldr	r3, [pc, #36]	; (8000858 <GPIOB_Init+0x30>)
 8000832:	2102      	movs	r1, #2
 8000834:	430a      	orrs	r2, r1
 8000836:	635a      	str	r2, [r3, #52]	; 0x34
	GPIOB->MODER &= ~(0x3FFF); // &= ~(0b0011_1111_1111_1111)
 8000838:	4b08      	ldr	r3, [pc, #32]	; (800085c <GPIOB_Init+0x34>)
 800083a:	681a      	ldr	r2, [r3, #0]
 800083c:	4b07      	ldr	r3, [pc, #28]	; (800085c <GPIOB_Init+0x34>)
 800083e:	0b92      	lsrs	r2, r2, #14
 8000840:	0392      	lsls	r2, r2, #14
 8000842:	601a      	str	r2, [r3, #0]
	GPIOB->MODER |= 0x1555; // |= (0b0001_0101_0101_0101)
 8000844:	4b05      	ldr	r3, [pc, #20]	; (800085c <GPIOB_Init+0x34>)
 8000846:	681a      	ldr	r2, [r3, #0]
 8000848:	4b04      	ldr	r3, [pc, #16]	; (800085c <GPIOB_Init+0x34>)
 800084a:	4905      	ldr	r1, [pc, #20]	; (8000860 <GPIOB_Init+0x38>)
 800084c:	430a      	orrs	r2, r1
 800084e:	601a      	str	r2, [r3, #0]
}
 8000850:	46c0      	nop			; (mov r8, r8)
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}
 8000856:	46c0      	nop			; (mov r8, r8)
 8000858:	40021000 	.word	0x40021000
 800085c:	50000400 	.word	0x50000400
 8000860:	00001555 	.word	0x00001555

08000864 <SetZero>:

void SetZero(void){
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0
	GPIOA ->ODR |= (1U << 7); // D1 digit -> PA7
 8000868:	23a0      	movs	r3, #160	; 0xa0
 800086a:	05db      	lsls	r3, r3, #23
 800086c:	695a      	ldr	r2, [r3, #20]
 800086e:	23a0      	movs	r3, #160	; 0xa0
 8000870:	05db      	lsls	r3, r3, #23
 8000872:	2180      	movs	r1, #128	; 0x80
 8000874:	430a      	orrs	r2, r1
 8000876:	615a      	str	r2, [r3, #20]
	GPIOA ->ODR |= (1U << 6); // D2 digit -> PA6
 8000878:	23a0      	movs	r3, #160	; 0xa0
 800087a:	05db      	lsls	r3, r3, #23
 800087c:	695a      	ldr	r2, [r3, #20]
 800087e:	23a0      	movs	r3, #160	; 0xa0
 8000880:	05db      	lsls	r3, r3, #23
 8000882:	2140      	movs	r1, #64	; 0x40
 8000884:	430a      	orrs	r2, r1
 8000886:	615a      	str	r2, [r3, #20]
	GPIOA ->ODR |= (1U << 0); // D3 digit -> PA0
 8000888:	23a0      	movs	r3, #160	; 0xa0
 800088a:	05db      	lsls	r3, r3, #23
 800088c:	695a      	ldr	r2, [r3, #20]
 800088e:	23a0      	movs	r3, #160	; 0xa0
 8000890:	05db      	lsls	r3, r3, #23
 8000892:	2101      	movs	r1, #1
 8000894:	430a      	orrs	r2, r1
 8000896:	615a      	str	r2, [r3, #20]
	GPIOA ->ODR |= (1U << 5); // D4 digit -> PA5
 8000898:	23a0      	movs	r3, #160	; 0xa0
 800089a:	05db      	lsls	r3, r3, #23
 800089c:	695a      	ldr	r2, [r3, #20]
 800089e:	23a0      	movs	r3, #160	; 0xa0
 80008a0:	05db      	lsls	r3, r3, #23
 80008a2:	2120      	movs	r1, #32
 80008a4:	430a      	orrs	r2, r1
 80008a6:	615a      	str	r2, [r3, #20]
	setSSD(0);
 80008a8:	2000      	movs	r0, #0
 80008aa:	f7ff fded 	bl	8000488 <setSSD>
}
 80008ae:	46c0      	nop			; (mov r8, r8)
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd80      	pop	{r7, pc}

080008b4 <delay>:

void delay(uint32_t time) {
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b082      	sub	sp, #8
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
	for(; time>0; time--);
 80008bc:	e002      	b.n	80008c4 <delay+0x10>
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	3b01      	subs	r3, #1
 80008c2:	607b      	str	r3, [r7, #4]
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d1f9      	bne.n	80008be <delay+0xa>
}
 80008ca:	46c0      	nop			; (mov r8, r8)
 80008cc:	46c0      	nop			; (mov r8, r8)
 80008ce:	46bd      	mov	sp, r7
 80008d0:	b002      	add	sp, #8
 80008d2:	bd80      	pop	{r7, pc}

080008d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008d8:	e7fe      	b.n	80008d8 <NMI_Handler+0x4>

080008da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008da:	b580      	push	{r7, lr}
 80008dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008de:	e7fe      	b.n	80008de <HardFault_Handler+0x4>

080008e0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80008e4:	46c0      	nop			; (mov r8, r8)
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}

080008ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008ea:	b580      	push	{r7, lr}
 80008ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008ee:	46c0      	nop			; (mov r8, r8)
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}

080008f4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008f8:	46c0      	nop			; (mov r8, r8)
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
	...

08000900 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000900:	480d      	ldr	r0, [pc, #52]	; (8000938 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000902:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000904:	f7ff fff6 	bl	80008f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000908:	480c      	ldr	r0, [pc, #48]	; (800093c <LoopForever+0x6>)
  ldr r1, =_edata
 800090a:	490d      	ldr	r1, [pc, #52]	; (8000940 <LoopForever+0xa>)
  ldr r2, =_sidata
 800090c:	4a0d      	ldr	r2, [pc, #52]	; (8000944 <LoopForever+0xe>)
  movs r3, #0
 800090e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000910:	e002      	b.n	8000918 <LoopCopyDataInit>

08000912 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000912:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000914:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000916:	3304      	adds	r3, #4

08000918 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000918:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800091a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800091c:	d3f9      	bcc.n	8000912 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800091e:	4a0a      	ldr	r2, [pc, #40]	; (8000948 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000920:	4c0a      	ldr	r4, [pc, #40]	; (800094c <LoopForever+0x16>)
  movs r3, #0
 8000922:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000924:	e001      	b.n	800092a <LoopFillZerobss>

08000926 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000926:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000928:	3204      	adds	r2, #4

0800092a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800092a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800092c:	d3fb      	bcc.n	8000926 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800092e:	f000 f811 	bl	8000954 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000932:	f7ff fd5b 	bl	80003ec <main>

08000936 <LoopForever>:

LoopForever:
  b LoopForever
 8000936:	e7fe      	b.n	8000936 <LoopForever>
  ldr   r0, =_estack
 8000938:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 800093c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000940:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000944:	080009e4 	.word	0x080009e4
  ldr r2, =_sbss
 8000948:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800094c:	2000001c 	.word	0x2000001c

08000950 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000950:	e7fe      	b.n	8000950 <ADC1_IRQHandler>
	...

08000954 <__libc_init_array>:
 8000954:	b570      	push	{r4, r5, r6, lr}
 8000956:	2600      	movs	r6, #0
 8000958:	4c0c      	ldr	r4, [pc, #48]	; (800098c <__libc_init_array+0x38>)
 800095a:	4d0d      	ldr	r5, [pc, #52]	; (8000990 <__libc_init_array+0x3c>)
 800095c:	1b64      	subs	r4, r4, r5
 800095e:	10a4      	asrs	r4, r4, #2
 8000960:	42a6      	cmp	r6, r4
 8000962:	d109      	bne.n	8000978 <__libc_init_array+0x24>
 8000964:	2600      	movs	r6, #0
 8000966:	f000 f819 	bl	800099c <_init>
 800096a:	4c0a      	ldr	r4, [pc, #40]	; (8000994 <__libc_init_array+0x40>)
 800096c:	4d0a      	ldr	r5, [pc, #40]	; (8000998 <__libc_init_array+0x44>)
 800096e:	1b64      	subs	r4, r4, r5
 8000970:	10a4      	asrs	r4, r4, #2
 8000972:	42a6      	cmp	r6, r4
 8000974:	d105      	bne.n	8000982 <__libc_init_array+0x2e>
 8000976:	bd70      	pop	{r4, r5, r6, pc}
 8000978:	00b3      	lsls	r3, r6, #2
 800097a:	58eb      	ldr	r3, [r5, r3]
 800097c:	4798      	blx	r3
 800097e:	3601      	adds	r6, #1
 8000980:	e7ee      	b.n	8000960 <__libc_init_array+0xc>
 8000982:	00b3      	lsls	r3, r6, #2
 8000984:	58eb      	ldr	r3, [r5, r3]
 8000986:	4798      	blx	r3
 8000988:	3601      	adds	r6, #1
 800098a:	e7f2      	b.n	8000972 <__libc_init_array+0x1e>
 800098c:	080009dc 	.word	0x080009dc
 8000990:	080009dc 	.word	0x080009dc
 8000994:	080009e0 	.word	0x080009e0
 8000998:	080009dc 	.word	0x080009dc

0800099c <_init>:
 800099c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800099e:	46c0      	nop			; (mov r8, r8)
 80009a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80009a2:	bc08      	pop	{r3}
 80009a4:	469e      	mov	lr, r3
 80009a6:	4770      	bx	lr

080009a8 <_fini>:
 80009a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80009aa:	46c0      	nop			; (mov r8, r8)
 80009ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80009ae:	bc08      	pop	{r3}
 80009b0:	469e      	mov	lr, r3
 80009b2:	4770      	bx	lr
