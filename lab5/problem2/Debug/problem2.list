
problem2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001714  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  080017d0  080017d0  000117d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001834  08001834  00020054  2**0
                  CONTENTS
  4 .ARM          00000000  08001834  08001834  00020054  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001834  08001834  00020054  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001834  08001834  00011834  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001838  08001838  00011838  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000054  20000000  0800183c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000170  20000054  08001890  00020054  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001c4  08001890  000201c4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001c26  00000000  00000000  000200bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000843  00000000  00000000  00021ce5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000288  00000000  00000000  00022528  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000001d0  00000000  00000000  000227b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00014175  00000000  00000000  00022980  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00002d61  00000000  00000000  00036af5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00081143  00000000  00000000  00039856  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000cc4  00000000  00000000  000ba99c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004f  00000000  00000000  000bb660  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000054 	.word	0x20000054
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080017b8 	.word	0x080017b8

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000058 	.word	0x20000058
 8000100:	080017b8 	.word	0x080017b8

08000104 <__gnu_thumb1_case_shi>:
 8000104:	b403      	push	{r0, r1}
 8000106:	4671      	mov	r1, lr
 8000108:	0849      	lsrs	r1, r1, #1
 800010a:	0040      	lsls	r0, r0, #1
 800010c:	0049      	lsls	r1, r1, #1
 800010e:	5e09      	ldrsh	r1, [r1, r0]
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	448e      	add	lr, r1
 8000114:	bc03      	pop	{r0, r1}
 8000116:	4770      	bx	lr

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f8f0 	bl	8000400 <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__divsi3>:
 800022c:	4603      	mov	r3, r0
 800022e:	430b      	orrs	r3, r1
 8000230:	d47f      	bmi.n	8000332 <__divsi3+0x106>
 8000232:	2200      	movs	r2, #0
 8000234:	0843      	lsrs	r3, r0, #1
 8000236:	428b      	cmp	r3, r1
 8000238:	d374      	bcc.n	8000324 <__divsi3+0xf8>
 800023a:	0903      	lsrs	r3, r0, #4
 800023c:	428b      	cmp	r3, r1
 800023e:	d35f      	bcc.n	8000300 <__divsi3+0xd4>
 8000240:	0a03      	lsrs	r3, r0, #8
 8000242:	428b      	cmp	r3, r1
 8000244:	d344      	bcc.n	80002d0 <__divsi3+0xa4>
 8000246:	0b03      	lsrs	r3, r0, #12
 8000248:	428b      	cmp	r3, r1
 800024a:	d328      	bcc.n	800029e <__divsi3+0x72>
 800024c:	0c03      	lsrs	r3, r0, #16
 800024e:	428b      	cmp	r3, r1
 8000250:	d30d      	bcc.n	800026e <__divsi3+0x42>
 8000252:	22ff      	movs	r2, #255	; 0xff
 8000254:	0209      	lsls	r1, r1, #8
 8000256:	ba12      	rev	r2, r2
 8000258:	0c03      	lsrs	r3, r0, #16
 800025a:	428b      	cmp	r3, r1
 800025c:	d302      	bcc.n	8000264 <__divsi3+0x38>
 800025e:	1212      	asrs	r2, r2, #8
 8000260:	0209      	lsls	r1, r1, #8
 8000262:	d065      	beq.n	8000330 <__divsi3+0x104>
 8000264:	0b03      	lsrs	r3, r0, #12
 8000266:	428b      	cmp	r3, r1
 8000268:	d319      	bcc.n	800029e <__divsi3+0x72>
 800026a:	e000      	b.n	800026e <__divsi3+0x42>
 800026c:	0a09      	lsrs	r1, r1, #8
 800026e:	0bc3      	lsrs	r3, r0, #15
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x4c>
 8000274:	03cb      	lsls	r3, r1, #15
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b83      	lsrs	r3, r0, #14
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x58>
 8000280:	038b      	lsls	r3, r1, #14
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0b43      	lsrs	r3, r0, #13
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x64>
 800028c:	034b      	lsls	r3, r1, #13
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0b03      	lsrs	r3, r0, #12
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x70>
 8000298:	030b      	lsls	r3, r1, #12
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0ac3      	lsrs	r3, r0, #11
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x7c>
 80002a4:	02cb      	lsls	r3, r1, #11
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a83      	lsrs	r3, r0, #10
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x88>
 80002b0:	028b      	lsls	r3, r1, #10
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0a43      	lsrs	r3, r0, #9
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x94>
 80002bc:	024b      	lsls	r3, r1, #9
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0a03      	lsrs	r3, r0, #8
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0xa0>
 80002c8:	020b      	lsls	r3, r1, #8
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	d2cd      	bcs.n	800026c <__divsi3+0x40>
 80002d0:	09c3      	lsrs	r3, r0, #7
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xae>
 80002d6:	01cb      	lsls	r3, r1, #7
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0983      	lsrs	r3, r0, #6
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xba>
 80002e2:	018b      	lsls	r3, r1, #6
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	0943      	lsrs	r3, r0, #5
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xc6>
 80002ee:	014b      	lsls	r3, r1, #5
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0903      	lsrs	r3, r0, #4
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xd2>
 80002fa:	010b      	lsls	r3, r1, #4
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	08c3      	lsrs	r3, r0, #3
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xde>
 8000306:	00cb      	lsls	r3, r1, #3
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0883      	lsrs	r3, r0, #2
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xea>
 8000312:	008b      	lsls	r3, r1, #2
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0843      	lsrs	r3, r0, #1
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xf6>
 800031e:	004b      	lsls	r3, r1, #1
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	1a41      	subs	r1, r0, r1
 8000326:	d200      	bcs.n	800032a <__divsi3+0xfe>
 8000328:	4601      	mov	r1, r0
 800032a:	4152      	adcs	r2, r2
 800032c:	4610      	mov	r0, r2
 800032e:	4770      	bx	lr
 8000330:	e05d      	b.n	80003ee <__divsi3+0x1c2>
 8000332:	0fca      	lsrs	r2, r1, #31
 8000334:	d000      	beq.n	8000338 <__divsi3+0x10c>
 8000336:	4249      	negs	r1, r1
 8000338:	1003      	asrs	r3, r0, #32
 800033a:	d300      	bcc.n	800033e <__divsi3+0x112>
 800033c:	4240      	negs	r0, r0
 800033e:	4053      	eors	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	469c      	mov	ip, r3
 8000344:	0903      	lsrs	r3, r0, #4
 8000346:	428b      	cmp	r3, r1
 8000348:	d32d      	bcc.n	80003a6 <__divsi3+0x17a>
 800034a:	0a03      	lsrs	r3, r0, #8
 800034c:	428b      	cmp	r3, r1
 800034e:	d312      	bcc.n	8000376 <__divsi3+0x14a>
 8000350:	22fc      	movs	r2, #252	; 0xfc
 8000352:	0189      	lsls	r1, r1, #6
 8000354:	ba12      	rev	r2, r2
 8000356:	0a03      	lsrs	r3, r0, #8
 8000358:	428b      	cmp	r3, r1
 800035a:	d30c      	bcc.n	8000376 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	1192      	asrs	r2, r2, #6
 8000360:	428b      	cmp	r3, r1
 8000362:	d308      	bcc.n	8000376 <__divsi3+0x14a>
 8000364:	0189      	lsls	r1, r1, #6
 8000366:	1192      	asrs	r2, r2, #6
 8000368:	428b      	cmp	r3, r1
 800036a:	d304      	bcc.n	8000376 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	d03a      	beq.n	80003e6 <__divsi3+0x1ba>
 8000370:	1192      	asrs	r2, r2, #6
 8000372:	e000      	b.n	8000376 <__divsi3+0x14a>
 8000374:	0989      	lsrs	r1, r1, #6
 8000376:	09c3      	lsrs	r3, r0, #7
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x154>
 800037c:	01cb      	lsls	r3, r1, #7
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0983      	lsrs	r3, r0, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x160>
 8000388:	018b      	lsls	r3, r1, #6
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	0943      	lsrs	r3, r0, #5
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x16c>
 8000394:	014b      	lsls	r3, r1, #5
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0903      	lsrs	r3, r0, #4
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x178>
 80003a0:	010b      	lsls	r3, r1, #4
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	08c3      	lsrs	r3, r0, #3
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x184>
 80003ac:	00cb      	lsls	r3, r1, #3
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0883      	lsrs	r3, r0, #2
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x190>
 80003b8:	008b      	lsls	r3, r1, #2
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	d2d9      	bcs.n	8000374 <__divsi3+0x148>
 80003c0:	0843      	lsrs	r3, r0, #1
 80003c2:	428b      	cmp	r3, r1
 80003c4:	d301      	bcc.n	80003ca <__divsi3+0x19e>
 80003c6:	004b      	lsls	r3, r1, #1
 80003c8:	1ac0      	subs	r0, r0, r3
 80003ca:	4152      	adcs	r2, r2
 80003cc:	1a41      	subs	r1, r0, r1
 80003ce:	d200      	bcs.n	80003d2 <__divsi3+0x1a6>
 80003d0:	4601      	mov	r1, r0
 80003d2:	4663      	mov	r3, ip
 80003d4:	4152      	adcs	r2, r2
 80003d6:	105b      	asrs	r3, r3, #1
 80003d8:	4610      	mov	r0, r2
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x1b4>
 80003dc:	4240      	negs	r0, r0
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d500      	bpl.n	80003e4 <__divsi3+0x1b8>
 80003e2:	4249      	negs	r1, r1
 80003e4:	4770      	bx	lr
 80003e6:	4663      	mov	r3, ip
 80003e8:	105b      	asrs	r3, r3, #1
 80003ea:	d300      	bcc.n	80003ee <__divsi3+0x1c2>
 80003ec:	4240      	negs	r0, r0
 80003ee:	b501      	push	{r0, lr}
 80003f0:	2000      	movs	r0, #0
 80003f2:	f000 f805 	bl	8000400 <__aeabi_idiv0>
 80003f6:	bd02      	pop	{r1, pc}

080003f8 <__aeabi_idivmod>:
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d0f8      	beq.n	80003ee <__divsi3+0x1c2>
 80003fc:	e716      	b.n	800022c <__divsi3>
 80003fe:	4770      	bx	lr

08000400 <__aeabi_idiv0>:
 8000400:	4770      	bx	lr
 8000402:	46c0      	nop			; (mov r8, r8)

08000404 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	b082      	sub	sp, #8
 8000408:	af00      	add	r7, sp, #0
 800040a:	0002      	movs	r2, r0
 800040c:	1dfb      	adds	r3, r7, #7
 800040e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000410:	1dfb      	adds	r3, r7, #7
 8000412:	781b      	ldrb	r3, [r3, #0]
 8000414:	2b7f      	cmp	r3, #127	; 0x7f
 8000416:	d809      	bhi.n	800042c <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000418:	1dfb      	adds	r3, r7, #7
 800041a:	781b      	ldrb	r3, [r3, #0]
 800041c:	001a      	movs	r2, r3
 800041e:	231f      	movs	r3, #31
 8000420:	401a      	ands	r2, r3
 8000422:	4b04      	ldr	r3, [pc, #16]	; (8000434 <__NVIC_EnableIRQ+0x30>)
 8000424:	2101      	movs	r1, #1
 8000426:	4091      	lsls	r1, r2
 8000428:	000a      	movs	r2, r1
 800042a:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 800042c:	46c0      	nop			; (mov r8, r8)
 800042e:	46bd      	mov	sp, r7
 8000430:	b002      	add	sp, #8
 8000432:	bd80      	pop	{r7, pc}
 8000434:	e000e100 	.word	0xe000e100

08000438 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000438:	b590      	push	{r4, r7, lr}
 800043a:	b083      	sub	sp, #12
 800043c:	af00      	add	r7, sp, #0
 800043e:	0002      	movs	r2, r0
 8000440:	6039      	str	r1, [r7, #0]
 8000442:	1dfb      	adds	r3, r7, #7
 8000444:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000446:	1dfb      	adds	r3, r7, #7
 8000448:	781b      	ldrb	r3, [r3, #0]
 800044a:	2b7f      	cmp	r3, #127	; 0x7f
 800044c:	d828      	bhi.n	80004a0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800044e:	4a2f      	ldr	r2, [pc, #188]	; (800050c <__NVIC_SetPriority+0xd4>)
 8000450:	1dfb      	adds	r3, r7, #7
 8000452:	781b      	ldrb	r3, [r3, #0]
 8000454:	b25b      	sxtb	r3, r3
 8000456:	089b      	lsrs	r3, r3, #2
 8000458:	33c0      	adds	r3, #192	; 0xc0
 800045a:	009b      	lsls	r3, r3, #2
 800045c:	589b      	ldr	r3, [r3, r2]
 800045e:	1dfa      	adds	r2, r7, #7
 8000460:	7812      	ldrb	r2, [r2, #0]
 8000462:	0011      	movs	r1, r2
 8000464:	2203      	movs	r2, #3
 8000466:	400a      	ands	r2, r1
 8000468:	00d2      	lsls	r2, r2, #3
 800046a:	21ff      	movs	r1, #255	; 0xff
 800046c:	4091      	lsls	r1, r2
 800046e:	000a      	movs	r2, r1
 8000470:	43d2      	mvns	r2, r2
 8000472:	401a      	ands	r2, r3
 8000474:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000476:	683b      	ldr	r3, [r7, #0]
 8000478:	019b      	lsls	r3, r3, #6
 800047a:	22ff      	movs	r2, #255	; 0xff
 800047c:	401a      	ands	r2, r3
 800047e:	1dfb      	adds	r3, r7, #7
 8000480:	781b      	ldrb	r3, [r3, #0]
 8000482:	0018      	movs	r0, r3
 8000484:	2303      	movs	r3, #3
 8000486:	4003      	ands	r3, r0
 8000488:	00db      	lsls	r3, r3, #3
 800048a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800048c:	481f      	ldr	r0, [pc, #124]	; (800050c <__NVIC_SetPriority+0xd4>)
 800048e:	1dfb      	adds	r3, r7, #7
 8000490:	781b      	ldrb	r3, [r3, #0]
 8000492:	b25b      	sxtb	r3, r3
 8000494:	089b      	lsrs	r3, r3, #2
 8000496:	430a      	orrs	r2, r1
 8000498:	33c0      	adds	r3, #192	; 0xc0
 800049a:	009b      	lsls	r3, r3, #2
 800049c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800049e:	e031      	b.n	8000504 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80004a0:	4a1b      	ldr	r2, [pc, #108]	; (8000510 <__NVIC_SetPriority+0xd8>)
 80004a2:	1dfb      	adds	r3, r7, #7
 80004a4:	781b      	ldrb	r3, [r3, #0]
 80004a6:	0019      	movs	r1, r3
 80004a8:	230f      	movs	r3, #15
 80004aa:	400b      	ands	r3, r1
 80004ac:	3b08      	subs	r3, #8
 80004ae:	089b      	lsrs	r3, r3, #2
 80004b0:	3306      	adds	r3, #6
 80004b2:	009b      	lsls	r3, r3, #2
 80004b4:	18d3      	adds	r3, r2, r3
 80004b6:	3304      	adds	r3, #4
 80004b8:	681b      	ldr	r3, [r3, #0]
 80004ba:	1dfa      	adds	r2, r7, #7
 80004bc:	7812      	ldrb	r2, [r2, #0]
 80004be:	0011      	movs	r1, r2
 80004c0:	2203      	movs	r2, #3
 80004c2:	400a      	ands	r2, r1
 80004c4:	00d2      	lsls	r2, r2, #3
 80004c6:	21ff      	movs	r1, #255	; 0xff
 80004c8:	4091      	lsls	r1, r2
 80004ca:	000a      	movs	r2, r1
 80004cc:	43d2      	mvns	r2, r2
 80004ce:	401a      	ands	r2, r3
 80004d0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80004d2:	683b      	ldr	r3, [r7, #0]
 80004d4:	019b      	lsls	r3, r3, #6
 80004d6:	22ff      	movs	r2, #255	; 0xff
 80004d8:	401a      	ands	r2, r3
 80004da:	1dfb      	adds	r3, r7, #7
 80004dc:	781b      	ldrb	r3, [r3, #0]
 80004de:	0018      	movs	r0, r3
 80004e0:	2303      	movs	r3, #3
 80004e2:	4003      	ands	r3, r0
 80004e4:	00db      	lsls	r3, r3, #3
 80004e6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80004e8:	4809      	ldr	r0, [pc, #36]	; (8000510 <__NVIC_SetPriority+0xd8>)
 80004ea:	1dfb      	adds	r3, r7, #7
 80004ec:	781b      	ldrb	r3, [r3, #0]
 80004ee:	001c      	movs	r4, r3
 80004f0:	230f      	movs	r3, #15
 80004f2:	4023      	ands	r3, r4
 80004f4:	3b08      	subs	r3, #8
 80004f6:	089b      	lsrs	r3, r3, #2
 80004f8:	430a      	orrs	r2, r1
 80004fa:	3306      	adds	r3, #6
 80004fc:	009b      	lsls	r3, r3, #2
 80004fe:	18c3      	adds	r3, r0, r3
 8000500:	3304      	adds	r3, #4
 8000502:	601a      	str	r2, [r3, #0]
}
 8000504:	46c0      	nop			; (mov r8, r8)
 8000506:	46bd      	mov	sp, r7
 8000508:	b003      	add	sp, #12
 800050a:	bd90      	pop	{r4, r7, pc}
 800050c:	e000e100 	.word	0xe000e100
 8000510:	e000ed00 	.word	0xe000ed00

08000514 <TIM3_IRQHandler>:
void print(char *);
int _print(int, char *, int);
void printChar(uint8_t);
void Delay(volatile uint32_t);

void TIM3_IRQHandler(void){
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
	mic_val = ADC_Data();
 8000518:	f000 f95c 	bl	80007d4 <ADC_Data>
 800051c:	0003      	movs	r3, r0
 800051e:	001a      	movs	r2, r3
 8000520:	4b1b      	ldr	r3, [pc, #108]	; (8000590 <TIM3_IRQHandler+0x7c>)
 8000522:	801a      	strh	r2, [r3, #0]

	if((GPIOA->IDR >>4) & 1){ // if button is pressed
 8000524:	23a0      	movs	r3, #160	; 0xa0
 8000526:	05db      	lsls	r3, r3, #23
 8000528:	691b      	ldr	r3, [r3, #16]
 800052a:	2210      	movs	r2, #16
 800052c:	4013      	ands	r3, r2
 800052e:	d007      	beq.n	8000540 <TIM3_IRQHandler+0x2c>
		counter = 0;
 8000530:	4b18      	ldr	r3, [pc, #96]	; (8000594 <TIM3_IRQHandler+0x80>)
 8000532:	2200      	movs	r2, #0
 8000534:	801a      	strh	r2, [r3, #0]
		Delay(32000);
 8000536:	23fa      	movs	r3, #250	; 0xfa
 8000538:	01db      	lsls	r3, r3, #7
 800053a:	0018      	movs	r0, r3
 800053c:	f000 fbea 	bl	8000d14 <Delay>
	}
	if(mic_val > 96){
 8000540:	4b13      	ldr	r3, [pc, #76]	; (8000590 <TIM3_IRQHandler+0x7c>)
 8000542:	881b      	ldrh	r3, [r3, #0]
 8000544:	2b60      	cmp	r3, #96	; 0x60
 8000546:	d909      	bls.n	800055c <TIM3_IRQHandler+0x48>
		counter++;
 8000548:	4b12      	ldr	r3, [pc, #72]	; (8000594 <TIM3_IRQHandler+0x80>)
 800054a:	881b      	ldrh	r3, [r3, #0]
 800054c:	3301      	adds	r3, #1
 800054e:	b29a      	uxth	r2, r3
 8000550:	4b10      	ldr	r3, [pc, #64]	; (8000594 <TIM3_IRQHandler+0x80>)
 8000552:	801a      	strh	r2, [r3, #0]
		Delay(320000);
 8000554:	4b10      	ldr	r3, [pc, #64]	; (8000598 <TIM3_IRQHandler+0x84>)
 8000556:	0018      	movs	r0, r3
 8000558:	f000 fbdc 	bl	8000d14 <Delay>
	}
	counterDisplay(counter);
 800055c:	4b0d      	ldr	r3, [pc, #52]	; (8000594 <TIM3_IRQHandler+0x80>)
 800055e:	881b      	ldrh	r3, [r3, #0]
 8000560:	0018      	movs	r0, r3
 8000562:	f000 f838 	bl	80005d6 <counterDisplay>
	Delay(2000);
 8000566:	23fa      	movs	r3, #250	; 0xfa
 8000568:	00db      	lsls	r3, r3, #3
 800056a:	0018      	movs	r0, r3
 800056c:	f000 fbd2 	bl	8000d14 <Delay>

	TIM3->SR &=  ~(TIM_SR_CC1IF); // Clear capture compare interrupt 1 flag
 8000570:	4b0a      	ldr	r3, [pc, #40]	; (800059c <TIM3_IRQHandler+0x88>)
 8000572:	691a      	ldr	r2, [r3, #16]
 8000574:	4b09      	ldr	r3, [pc, #36]	; (800059c <TIM3_IRQHandler+0x88>)
 8000576:	2102      	movs	r1, #2
 8000578:	438a      	bics	r2, r1
 800057a:	611a      	str	r2, [r3, #16]
	TIM3->SR &= ~(TIM_SR_UIF); // Clear update status register
 800057c:	4b07      	ldr	r3, [pc, #28]	; (800059c <TIM3_IRQHandler+0x88>)
 800057e:	691a      	ldr	r2, [r3, #16]
 8000580:	4b06      	ldr	r3, [pc, #24]	; (800059c <TIM3_IRQHandler+0x88>)
 8000582:	2101      	movs	r1, #1
 8000584:	438a      	bics	r2, r1
 8000586:	611a      	str	r2, [r3, #16]
}
 8000588:	46c0      	nop			; (mov r8, r8)
 800058a:	46bd      	mov	sp, r7
 800058c:	bd80      	pop	{r7, pc}
 800058e:	46c0      	nop			; (mov r8, r8)
 8000590:	20000070 	.word	0x20000070
 8000594:	20000072 	.word	0x20000072
 8000598:	0004e200 	.word	0x0004e200
 800059c:	40000400 	.word	0x40000400

080005a0 <main>:

int main(void){
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0
	System_Config();
 80005a4:	f000 f808 	bl	80005b8 <System_Config>
	while(1){
		printInt(mic_val); // transmit of microphone data for real time graph
 80005a8:	4b02      	ldr	r3, [pc, #8]	; (80005b4 <main+0x14>)
 80005aa:	881b      	ldrh	r3, [r3, #0]
 80005ac:	0018      	movs	r0, r3
 80005ae:	f000 f929 	bl	8000804 <printInt>
 80005b2:	e7f9      	b.n	80005a8 <main+0x8>
 80005b4:	20000070 	.word	0x20000070

080005b8 <System_Config>:
	}
	return 0;
}

void System_Config(void){// all initialize are this function
 80005b8:	b580      	push	{r7, lr}
 80005ba:	af00      	add	r7, sp, #0
	SetZero(); // leds show us 0000 value.
 80005bc:	f000 fb82 	bl	8000cc4 <SetZero>
	GPIO_Config();
 80005c0:	f000 f988 	bl	80008d4 <GPIO_Config>
	TIM3_Config();
 80005c4:	f000 fa8a 	bl	8000adc <TIM3_Config>
	USART1_Config();
 80005c8:	f000 fabe 	bl	8000b48 <USART1_Config>
	ADC_Config();
 80005cc:	f000 fa3e 	bl	8000a4c <ADC_Config>
}
 80005d0:	46c0      	nop			; (mov r8, r8)
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bd80      	pop	{r7, pc}

080005d6 <counterDisplay>:

void counterDisplay(uint16_t counterVal){
 80005d6:	b580      	push	{r7, lr}
 80005d8:	b086      	sub	sp, #24
 80005da:	af00      	add	r7, sp, #0
 80005dc:	0002      	movs	r2, r0
 80005de:	1dbb      	adds	r3, r7, #6
 80005e0:	801a      	strh	r2, [r3, #0]
	int thousand, hundred, decimal, unit;
	thousand=(counterVal/1000); // thousand digit of counter
 80005e2:	1dbb      	adds	r3, r7, #6
 80005e4:	881b      	ldrh	r3, [r3, #0]
 80005e6:	22fa      	movs	r2, #250	; 0xfa
 80005e8:	0091      	lsls	r1, r2, #2
 80005ea:	0018      	movs	r0, r3
 80005ec:	f7ff fd94 	bl	8000118 <__udivsi3>
 80005f0:	0003      	movs	r3, r0
 80005f2:	b29b      	uxth	r3, r3
 80005f4:	617b      	str	r3, [r7, #20]
	hundred=((counterVal-thousand*1000)/100); // hundred digit of counter
 80005f6:	1dbb      	adds	r3, r7, #6
 80005f8:	8819      	ldrh	r1, [r3, #0]
 80005fa:	697a      	ldr	r2, [r7, #20]
 80005fc:	0013      	movs	r3, r2
 80005fe:	059b      	lsls	r3, r3, #22
 8000600:	1a9b      	subs	r3, r3, r2
 8000602:	019b      	lsls	r3, r3, #6
 8000604:	189b      	adds	r3, r3, r2
 8000606:	005b      	lsls	r3, r3, #1
 8000608:	189b      	adds	r3, r3, r2
 800060a:	00db      	lsls	r3, r3, #3
 800060c:	18cb      	adds	r3, r1, r3
 800060e:	2164      	movs	r1, #100	; 0x64
 8000610:	0018      	movs	r0, r3
 8000612:	f7ff fe0b 	bl	800022c <__divsi3>
 8000616:	0003      	movs	r3, r0
 8000618:	613b      	str	r3, [r7, #16]
	decimal=((counterVal- thousand*1000 - hundred*100)/10); // decimal digit of counter
 800061a:	1dbb      	adds	r3, r7, #6
 800061c:	8819      	ldrh	r1, [r3, #0]
 800061e:	697a      	ldr	r2, [r7, #20]
 8000620:	0013      	movs	r3, r2
 8000622:	059b      	lsls	r3, r3, #22
 8000624:	1a9b      	subs	r3, r3, r2
 8000626:	019b      	lsls	r3, r3, #6
 8000628:	189b      	adds	r3, r3, r2
 800062a:	005b      	lsls	r3, r3, #1
 800062c:	189b      	adds	r3, r3, r2
 800062e:	00db      	lsls	r3, r3, #3
 8000630:	18c9      	adds	r1, r1, r3
 8000632:	693a      	ldr	r2, [r7, #16]
 8000634:	0013      	movs	r3, r2
 8000636:	065b      	lsls	r3, r3, #25
 8000638:	1a9b      	subs	r3, r3, r2
 800063a:	009b      	lsls	r3, r3, #2
 800063c:	189b      	adds	r3, r3, r2
 800063e:	00db      	lsls	r3, r3, #3
 8000640:	1a9b      	subs	r3, r3, r2
 8000642:	009b      	lsls	r3, r3, #2
 8000644:	18cb      	adds	r3, r1, r3
 8000646:	210a      	movs	r1, #10
 8000648:	0018      	movs	r0, r3
 800064a:	f7ff fdef 	bl	800022c <__divsi3>
 800064e:	0003      	movs	r3, r0
 8000650:	60fb      	str	r3, [r7, #12]
	unit=(counterVal- thousand*1000 - hundred*100 - decimal*10); // unit digit of counter
 8000652:	1dbb      	adds	r3, r7, #6
 8000654:	8819      	ldrh	r1, [r3, #0]
 8000656:	697a      	ldr	r2, [r7, #20]
 8000658:	0013      	movs	r3, r2
 800065a:	059b      	lsls	r3, r3, #22
 800065c:	1a9b      	subs	r3, r3, r2
 800065e:	019b      	lsls	r3, r3, #6
 8000660:	189b      	adds	r3, r3, r2
 8000662:	005b      	lsls	r3, r3, #1
 8000664:	189b      	adds	r3, r3, r2
 8000666:	00db      	lsls	r3, r3, #3
 8000668:	18c9      	adds	r1, r1, r3
 800066a:	693a      	ldr	r2, [r7, #16]
 800066c:	0013      	movs	r3, r2
 800066e:	065b      	lsls	r3, r3, #25
 8000670:	1a9b      	subs	r3, r3, r2
 8000672:	009b      	lsls	r3, r3, #2
 8000674:	189b      	adds	r3, r3, r2
 8000676:	00db      	lsls	r3, r3, #3
 8000678:	1a9b      	subs	r3, r3, r2
 800067a:	009b      	lsls	r3, r3, #2
 800067c:	18c9      	adds	r1, r1, r3
 800067e:	68fa      	ldr	r2, [r7, #12]
 8000680:	0013      	movs	r3, r2
 8000682:	075b      	lsls	r3, r3, #29
 8000684:	1a9b      	subs	r3, r3, r2
 8000686:	009b      	lsls	r3, r3, #2
 8000688:	1a9b      	subs	r3, r3, r2
 800068a:	005b      	lsls	r3, r3, #1
 800068c:	18cb      	adds	r3, r1, r3
 800068e:	60bb      	str	r3, [r7, #8]

	/* unit digit we want is set to 1 and the others are set to 0*/
	GPIOA ->ODR &= ~(1U << 7); // off D1 - PA7
 8000690:	23a0      	movs	r3, #160	; 0xa0
 8000692:	05db      	lsls	r3, r3, #23
 8000694:	695a      	ldr	r2, [r3, #20]
 8000696:	23a0      	movs	r3, #160	; 0xa0
 8000698:	05db      	lsls	r3, r3, #23
 800069a:	2180      	movs	r1, #128	; 0x80
 800069c:	438a      	bics	r2, r1
 800069e:	615a      	str	r2, [r3, #20]
	GPIOA ->ODR &= ~(1U << 6); // off D2 - PA6
 80006a0:	23a0      	movs	r3, #160	; 0xa0
 80006a2:	05db      	lsls	r3, r3, #23
 80006a4:	695a      	ldr	r2, [r3, #20]
 80006a6:	23a0      	movs	r3, #160	; 0xa0
 80006a8:	05db      	lsls	r3, r3, #23
 80006aa:	2140      	movs	r1, #64	; 0x40
 80006ac:	438a      	bics	r2, r1
 80006ae:	615a      	str	r2, [r3, #20]
	GPIOA ->ODR &= ~(1U << 0); // off D3 - PA0
 80006b0:	23a0      	movs	r3, #160	; 0xa0
 80006b2:	05db      	lsls	r3, r3, #23
 80006b4:	695a      	ldr	r2, [r3, #20]
 80006b6:	23a0      	movs	r3, #160	; 0xa0
 80006b8:	05db      	lsls	r3, r3, #23
 80006ba:	2101      	movs	r1, #1
 80006bc:	438a      	bics	r2, r1
 80006be:	615a      	str	r2, [r3, #20]
	GPIOA ->ODR |= (1U << 5); // on D4 - PA5
 80006c0:	23a0      	movs	r3, #160	; 0xa0
 80006c2:	05db      	lsls	r3, r3, #23
 80006c4:	695a      	ldr	r2, [r3, #20]
 80006c6:	23a0      	movs	r3, #160	; 0xa0
 80006c8:	05db      	lsls	r3, r3, #23
 80006ca:	2120      	movs	r1, #32
 80006cc:	430a      	orrs	r2, r1
 80006ce:	615a      	str	r2, [r3, #20]
	setSSD(unit);
 80006d0:	68bb      	ldr	r3, [r7, #8]
 80006d2:	0018      	movs	r0, r3
 80006d4:	f000 fa98 	bl	8000c08 <setSSD>
	Delay(100);
 80006d8:	2064      	movs	r0, #100	; 0x64
 80006da:	f000 fb1b 	bl	8000d14 <Delay>

	/* decimal digit we want is set to 1 and the others are set to 0*/
	GPIOA ->ODR &= ~(1U << 7); // D1 - PA7
 80006de:	23a0      	movs	r3, #160	; 0xa0
 80006e0:	05db      	lsls	r3, r3, #23
 80006e2:	695a      	ldr	r2, [r3, #20]
 80006e4:	23a0      	movs	r3, #160	; 0xa0
 80006e6:	05db      	lsls	r3, r3, #23
 80006e8:	2180      	movs	r1, #128	; 0x80
 80006ea:	438a      	bics	r2, r1
 80006ec:	615a      	str	r2, [r3, #20]
	GPIOA ->ODR &= ~(1U << 6); // D2 - PA7
 80006ee:	23a0      	movs	r3, #160	; 0xa0
 80006f0:	05db      	lsls	r3, r3, #23
 80006f2:	695a      	ldr	r2, [r3, #20]
 80006f4:	23a0      	movs	r3, #160	; 0xa0
 80006f6:	05db      	lsls	r3, r3, #23
 80006f8:	2140      	movs	r1, #64	; 0x40
 80006fa:	438a      	bics	r2, r1
 80006fc:	615a      	str	r2, [r3, #20]
	GPIOA ->ODR |= (1U << 0); // D3 - PA7
 80006fe:	23a0      	movs	r3, #160	; 0xa0
 8000700:	05db      	lsls	r3, r3, #23
 8000702:	695a      	ldr	r2, [r3, #20]
 8000704:	23a0      	movs	r3, #160	; 0xa0
 8000706:	05db      	lsls	r3, r3, #23
 8000708:	2101      	movs	r1, #1
 800070a:	430a      	orrs	r2, r1
 800070c:	615a      	str	r2, [r3, #20]
	GPIOA ->ODR &= ~(1U << 5);
 800070e:	23a0      	movs	r3, #160	; 0xa0
 8000710:	05db      	lsls	r3, r3, #23
 8000712:	695a      	ldr	r2, [r3, #20]
 8000714:	23a0      	movs	r3, #160	; 0xa0
 8000716:	05db      	lsls	r3, r3, #23
 8000718:	2120      	movs	r1, #32
 800071a:	438a      	bics	r2, r1
 800071c:	615a      	str	r2, [r3, #20]
	setSSD(decimal);
 800071e:	68fb      	ldr	r3, [r7, #12]
 8000720:	0018      	movs	r0, r3
 8000722:	f000 fa71 	bl	8000c08 <setSSD>
	Delay(100);
 8000726:	2064      	movs	r0, #100	; 0x64
 8000728:	f000 faf4 	bl	8000d14 <Delay>

	/* hundred digit we want is set to 1 and the others are set to 0*/
	GPIOA ->ODR &= ~(1U << 7); // D1 - PA7
 800072c:	23a0      	movs	r3, #160	; 0xa0
 800072e:	05db      	lsls	r3, r3, #23
 8000730:	695a      	ldr	r2, [r3, #20]
 8000732:	23a0      	movs	r3, #160	; 0xa0
 8000734:	05db      	lsls	r3, r3, #23
 8000736:	2180      	movs	r1, #128	; 0x80
 8000738:	438a      	bics	r2, r1
 800073a:	615a      	str	r2, [r3, #20]
	GPIOA ->ODR |= (1U << 6); // D2 - PA7
 800073c:	23a0      	movs	r3, #160	; 0xa0
 800073e:	05db      	lsls	r3, r3, #23
 8000740:	695a      	ldr	r2, [r3, #20]
 8000742:	23a0      	movs	r3, #160	; 0xa0
 8000744:	05db      	lsls	r3, r3, #23
 8000746:	2140      	movs	r1, #64	; 0x40
 8000748:	430a      	orrs	r2, r1
 800074a:	615a      	str	r2, [r3, #20]
	GPIOA ->ODR &= ~(1U << 0); // D3 - PA7
 800074c:	23a0      	movs	r3, #160	; 0xa0
 800074e:	05db      	lsls	r3, r3, #23
 8000750:	695a      	ldr	r2, [r3, #20]
 8000752:	23a0      	movs	r3, #160	; 0xa0
 8000754:	05db      	lsls	r3, r3, #23
 8000756:	2101      	movs	r1, #1
 8000758:	438a      	bics	r2, r1
 800075a:	615a      	str	r2, [r3, #20]
	GPIOA ->ODR &= ~(1U << 5);
 800075c:	23a0      	movs	r3, #160	; 0xa0
 800075e:	05db      	lsls	r3, r3, #23
 8000760:	695a      	ldr	r2, [r3, #20]
 8000762:	23a0      	movs	r3, #160	; 0xa0
 8000764:	05db      	lsls	r3, r3, #23
 8000766:	2120      	movs	r1, #32
 8000768:	438a      	bics	r2, r1
 800076a:	615a      	str	r2, [r3, #20]
	setSSD(hundred);
 800076c:	693b      	ldr	r3, [r7, #16]
 800076e:	0018      	movs	r0, r3
 8000770:	f000 fa4a 	bl	8000c08 <setSSD>
	Delay(100);
 8000774:	2064      	movs	r0, #100	; 0x64
 8000776:	f000 facd 	bl	8000d14 <Delay>

	/* thousand digit we want is set to 1 and the others are set to 0*/
	GPIOA ->ODR |= (1U << 7); // D1 - PA7
 800077a:	23a0      	movs	r3, #160	; 0xa0
 800077c:	05db      	lsls	r3, r3, #23
 800077e:	695a      	ldr	r2, [r3, #20]
 8000780:	23a0      	movs	r3, #160	; 0xa0
 8000782:	05db      	lsls	r3, r3, #23
 8000784:	2180      	movs	r1, #128	; 0x80
 8000786:	430a      	orrs	r2, r1
 8000788:	615a      	str	r2, [r3, #20]
	GPIOA ->ODR &= ~(1U << 6); // D2 - PA7
 800078a:	23a0      	movs	r3, #160	; 0xa0
 800078c:	05db      	lsls	r3, r3, #23
 800078e:	695a      	ldr	r2, [r3, #20]
 8000790:	23a0      	movs	r3, #160	; 0xa0
 8000792:	05db      	lsls	r3, r3, #23
 8000794:	2140      	movs	r1, #64	; 0x40
 8000796:	438a      	bics	r2, r1
 8000798:	615a      	str	r2, [r3, #20]
	GPIOA ->ODR &= ~(1U << 0); // D3 - PA7
 800079a:	23a0      	movs	r3, #160	; 0xa0
 800079c:	05db      	lsls	r3, r3, #23
 800079e:	695a      	ldr	r2, [r3, #20]
 80007a0:	23a0      	movs	r3, #160	; 0xa0
 80007a2:	05db      	lsls	r3, r3, #23
 80007a4:	2101      	movs	r1, #1
 80007a6:	438a      	bics	r2, r1
 80007a8:	615a      	str	r2, [r3, #20]
	GPIOA ->ODR &= ~(1U << 5);
 80007aa:	23a0      	movs	r3, #160	; 0xa0
 80007ac:	05db      	lsls	r3, r3, #23
 80007ae:	695a      	ldr	r2, [r3, #20]
 80007b0:	23a0      	movs	r3, #160	; 0xa0
 80007b2:	05db      	lsls	r3, r3, #23
 80007b4:	2120      	movs	r1, #32
 80007b6:	438a      	bics	r2, r1
 80007b8:	615a      	str	r2, [r3, #20]
	setSSD(thousand);
 80007ba:	697b      	ldr	r3, [r7, #20]
 80007bc:	0018      	movs	r0, r3
 80007be:	f000 fa23 	bl	8000c08 <setSSD>
	Delay(300);
 80007c2:	2396      	movs	r3, #150	; 0x96
 80007c4:	005b      	lsls	r3, r3, #1
 80007c6:	0018      	movs	r0, r3
 80007c8:	f000 faa4 	bl	8000d14 <Delay>
}
 80007cc:	46c0      	nop			; (mov r8, r8)
 80007ce:	46bd      	mov	sp, r7
 80007d0:	b006      	add	sp, #24
 80007d2:	bd80      	pop	{r7, pc}

080007d4 <ADC_Data>:

uint16_t ADC_Data(void){
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0
	ADC1->CR |= ADC_CR_ADSTART; // ADC Start Conversion
 80007d8:	4b09      	ldr	r3, [pc, #36]	; (8000800 <ADC_Data+0x2c>)
 80007da:	689a      	ldr	r2, [r3, #8]
 80007dc:	4b08      	ldr	r3, [pc, #32]	; (8000800 <ADC_Data+0x2c>)
 80007de:	2104      	movs	r1, #4
 80007e0:	430a      	orrs	r2, r1
 80007e2:	609a      	str	r2, [r3, #8]

	/*This bit is set by hardware at the end of each conversion(EOC) of a channel
	 * when a new data result is available in the ADC_DR register.
	 * 0: Channel conversion not complete
	 * 1: Channel conversion complete*/
	if((ADC1->ISR>>2) & (ADC_ISR_EOC>>2)){
 80007e4:	4b06      	ldr	r3, [pc, #24]	; (8000800 <ADC_Data+0x2c>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	2204      	movs	r2, #4
 80007ea:	4013      	ands	r3, r2
 80007ec:	d003      	beq.n	80007f6 <ADC_Data+0x22>
		return ADC1->DR; // return ADC data value
 80007ee:	4b04      	ldr	r3, [pc, #16]	; (8000800 <ADC_Data+0x2c>)
 80007f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007f2:	b29b      	uxth	r3, r3
 80007f4:	e000      	b.n	80007f8 <ADC_Data+0x24>
	}
	return 0;
 80007f6:	2300      	movs	r3, #0
}
 80007f8:	0018      	movs	r0, r3
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	46c0      	nop			; (mov r8, r8)
 8000800:	40012400 	.word	0x40012400

08000804 <printInt>:

void printInt(uint16_t intVal){
 8000804:	b590      	push	{r4, r7, lr}
 8000806:	b085      	sub	sp, #20
 8000808:	af00      	add	r7, sp, #0
 800080a:	0002      	movs	r2, r0
 800080c:	1dbb      	adds	r3, r7, #6
 800080e:	801a      	strh	r2, [r3, #0]
	char buffer[5];
	snprintf(buffer, 5, "%d\n\r", intVal);
 8000810:	1dbb      	adds	r3, r7, #6
 8000812:	881b      	ldrh	r3, [r3, #0]
 8000814:	4a06      	ldr	r2, [pc, #24]	; (8000830 <printInt+0x2c>)
 8000816:	2408      	movs	r4, #8
 8000818:	1938      	adds	r0, r7, r4
 800081a:	2105      	movs	r1, #5
 800081c:	f000 fb1a 	bl	8000e54 <sniprintf>
	print(buffer);
 8000820:	193b      	adds	r3, r7, r4
 8000822:	0018      	movs	r0, r3
 8000824:	f000 f806 	bl	8000834 <print>
}
 8000828:	46c0      	nop			; (mov r8, r8)
 800082a:	46bd      	mov	sp, r7
 800082c:	b005      	add	sp, #20
 800082e:	bd90      	pop	{r4, r7, pc}
 8000830:	080017d0 	.word	0x080017d0

08000834 <print>:
void print(char *s){
 8000834:	b580      	push	{r7, lr}
 8000836:	b084      	sub	sp, #16
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
	int length = 0; // to count length of character
 800083c:	2300      	movs	r3, #0
 800083e:	60fb      	str	r3, [r7, #12]
	/* i is pointer of string and length is increasing until i equals NULL character*/
	for(char *i = s; *i != NULL; i++) length++;
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	60bb      	str	r3, [r7, #8]
 8000844:	e005      	b.n	8000852 <print+0x1e>
 8000846:	68fb      	ldr	r3, [r7, #12]
 8000848:	3301      	adds	r3, #1
 800084a:	60fb      	str	r3, [r7, #12]
 800084c:	68bb      	ldr	r3, [r7, #8]
 800084e:	3301      	adds	r3, #1
 8000850:	60bb      	str	r3, [r7, #8]
 8000852:	68bb      	ldr	r3, [r7, #8]
 8000854:	781b      	ldrb	r3, [r3, #0]
 8000856:	2b00      	cmp	r3, #0
 8000858:	d1f5      	bne.n	8000846 <print+0x12>
	_print(0, s, length);
 800085a:	68fa      	ldr	r2, [r7, #12]
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	0019      	movs	r1, r3
 8000860:	2000      	movs	r0, #0
 8000862:	f000 f804 	bl	800086e <_print>
}
 8000866:	46c0      	nop			; (mov r8, r8)
 8000868:	46bd      	mov	sp, r7
 800086a:	b004      	add	sp, #16
 800086c:	bd80      	pop	{r7, pc}

0800086e <_print>:

int _print(int f, char *ptr, int len){
 800086e:	b580      	push	{r7, lr}
 8000870:	b086      	sub	sp, #24
 8000872:	af00      	add	r7, sp, #0
 8000874:	60f8      	str	r0, [r7, #12]
 8000876:	60b9      	str	r1, [r7, #8]
 8000878:	607a      	str	r2, [r7, #4]
	/*in for loop, i of is increasing until equal to len
	 * and meanwhile, chars of 2nd parameter of _print function is writen
	 * into the printChar character by character increasing ptr of 2nd parameter
	 * of _print function  */
	for(volatile int i = f; i<len; i++){
 800087a:	68fb      	ldr	r3, [r7, #12]
 800087c:	617b      	str	r3, [r7, #20]
 800087e:	e00a      	b.n	8000896 <_print+0x28>
		printChar(*ptr);
 8000880:	68bb      	ldr	r3, [r7, #8]
 8000882:	781b      	ldrb	r3, [r3, #0]
 8000884:	0018      	movs	r0, r3
 8000886:	f000 f80f 	bl	80008a8 <printChar>
		ptr++;
 800088a:	68bb      	ldr	r3, [r7, #8]
 800088c:	3301      	adds	r3, #1
 800088e:	60bb      	str	r3, [r7, #8]
	for(volatile int i = f; i<len; i++){
 8000890:	697b      	ldr	r3, [r7, #20]
 8000892:	3301      	adds	r3, #1
 8000894:	617b      	str	r3, [r7, #20]
 8000896:	697b      	ldr	r3, [r7, #20]
 8000898:	687a      	ldr	r2, [r7, #4]
 800089a:	429a      	cmp	r2, r3
 800089c:	dcf0      	bgt.n	8000880 <_print+0x12>
	}
	return len; // return length
 800089e:	687b      	ldr	r3, [r7, #4]
}
 80008a0:	0018      	movs	r0, r3
 80008a2:	46bd      	mov	sp, r7
 80008a4:	b006      	add	sp, #24
 80008a6:	bd80      	pop	{r7, pc}

080008a8 <printChar>:

void printChar(uint8_t c){
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b082      	sub	sp, #8
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	0002      	movs	r2, r0
 80008b0:	1dfb      	adds	r3, r7, #7
 80008b2:	701a      	strb	r2, [r3, #0]
	while(!(USART1->ISR & USART_ISR_TXE_TXFNF)); // when messages are sent.
 80008b4:	46c0      	nop			; (mov r8, r8)
 80008b6:	4b06      	ldr	r3, [pc, #24]	; (80008d0 <printChar+0x28>)
 80008b8:	69db      	ldr	r3, [r3, #28]
 80008ba:	2280      	movs	r2, #128	; 0x80
 80008bc:	4013      	ands	r3, r2
 80008be:	d0fa      	beq.n	80008b6 <printChar+0xe>
	USART1->TDR = c; // Transmit data register is taken character to send a message.
 80008c0:	4b03      	ldr	r3, [pc, #12]	; (80008d0 <printChar+0x28>)
 80008c2:	1dfa      	adds	r2, r7, #7
 80008c4:	7812      	ldrb	r2, [r2, #0]
 80008c6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80008c8:	46c0      	nop			; (mov r8, r8)
 80008ca:	46bd      	mov	sp, r7
 80008cc:	b002      	add	sp, #8
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	40013800 	.word	0x40013800

080008d4 <GPIO_Config>:

void GPIO_Config(void){
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b082      	sub	sp, #8
 80008d8:	af00      	add	r7, sp, #0
	// input-output A and B ports clock enable
	RCC->IOPENR |= (RCC_IOPENR_GPIOAEN | RCC_IOPENR_GPIOBEN);
 80008da:	4b58      	ldr	r3, [pc, #352]	; (8000a3c <GPIO_Config+0x168>)
 80008dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80008de:	4b57      	ldr	r3, [pc, #348]	; (8000a3c <GPIO_Config+0x168>)
 80008e0:	2103      	movs	r1, #3
 80008e2:	430a      	orrs	r2, r1
 80008e4:	635a      	str	r2, [r3, #52]	; 0x34

	// PA4 is set as input for button
	GPIOA->MODER &= ~(3U << 2*4);
 80008e6:	23a0      	movs	r3, #160	; 0xa0
 80008e8:	05db      	lsls	r3, r3, #23
 80008ea:	681a      	ldr	r2, [r3, #0]
 80008ec:	23a0      	movs	r3, #160	; 0xa0
 80008ee:	05db      	lsls	r3, r3, #23
 80008f0:	4953      	ldr	r1, [pc, #332]	; (8000a40 <GPIO_Config+0x16c>)
 80008f2:	400a      	ands	r2, r1
 80008f4:	601a      	str	r2, [r3, #0]

	//PA1 is ADC for microphone
	GPIOA->MODER |= (3 << 2*1);
 80008f6:	23a0      	movs	r3, #160	; 0xa0
 80008f8:	05db      	lsls	r3, r3, #23
 80008fa:	681a      	ldr	r2, [r3, #0]
 80008fc:	23a0      	movs	r3, #160	; 0xa0
 80008fe:	05db      	lsls	r3, r3, #23
 8000900:	210c      	movs	r1, #12
 8000902:	430a      	orrs	r2, r1
 8000904:	601a      	str	r2, [r3, #0]

	/* modes of GPIOA PA9 and PA10 pins are selected as alternate function.
	 * like that 0b1111_1010_1111;*/
	GPIOA->MODER &= ~((3U << 2*9) | (3U << 2*10));
 8000906:	23a0      	movs	r3, #160	; 0xa0
 8000908:	05db      	lsls	r3, r3, #23
 800090a:	681a      	ldr	r2, [r3, #0]
 800090c:	23a0      	movs	r3, #160	; 0xa0
 800090e:	05db      	lsls	r3, r3, #23
 8000910:	494c      	ldr	r1, [pc, #304]	; (8000a44 <GPIO_Config+0x170>)
 8000912:	400a      	ands	r2, r1
 8000914:	601a      	str	r2, [r3, #0]
	GPIOA->MODER |= (2U << 2*9) | (2U << 2*10);
 8000916:	23a0      	movs	r3, #160	; 0xa0
 8000918:	05db      	lsls	r3, r3, #23
 800091a:	681a      	ldr	r2, [r3, #0]
 800091c:	23a0      	movs	r3, #160	; 0xa0
 800091e:	05db      	lsls	r3, r3, #23
 8000920:	21a0      	movs	r1, #160	; 0xa0
 8000922:	0389      	lsls	r1, r1, #14
 8000924:	430a      	orrs	r2, r1
 8000926:	601a      	str	r2, [r3, #0]

	/* PA9 and PA10 pins used for USART1_TX and USART1_RX are selected
	 * with GPIOx_AFRH = AFRH_AFSELy(Alternate Function register -
	 * Alternate function selection for port x pin y)
	 * AF1 -->> USART1_RX, USART1_TX*/
	GPIOA->AFR[1] |= GPIO_AFRH_AFSEL9_0;
 8000928:	23a0      	movs	r3, #160	; 0xa0
 800092a:	05db      	lsls	r3, r3, #23
 800092c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800092e:	23a0      	movs	r3, #160	; 0xa0
 8000930:	05db      	lsls	r3, r3, #23
 8000932:	2110      	movs	r1, #16
 8000934:	430a      	orrs	r2, r1
 8000936:	625a      	str	r2, [r3, #36]	; 0x24
	GPIOA->AFR[1] |= GPIO_AFRH_AFSEL10_0;
 8000938:	23a0      	movs	r3, #160	; 0xa0
 800093a:	05db      	lsls	r3, r3, #23
 800093c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800093e:	23a0      	movs	r3, #160	; 0xa0
 8000940:	05db      	lsls	r3, r3, #23
 8000942:	2180      	movs	r1, #128	; 0x80
 8000944:	0049      	lsls	r1, r1, #1
 8000946:	430a      	orrs	r2, r1
 8000948:	625a      	str	r2, [r3, #36]	; 0x24

	/* enable required GPIOA registers and RCC register */
	/*PA7 -> D1 digit, PA6 -> D2 digit, PA0 -> D3 digit, PA5 -> D4 digit,*/
	RCC->IOPENR |= (1U << 0);
 800094a:	4b3c      	ldr	r3, [pc, #240]	; (8000a3c <GPIO_Config+0x168>)
 800094c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800094e:	4b3b      	ldr	r3, [pc, #236]	; (8000a3c <GPIO_Config+0x168>)
 8000950:	2101      	movs	r1, #1
 8000952:	430a      	orrs	r2, r1
 8000954:	635a      	str	r2, [r3, #52]	; 0x34
	for(int k=0; k<9; k++){
 8000956:	2300      	movs	r3, #0
 8000958:	607b      	str	r3, [r7, #4]
 800095a:	e02c      	b.n	80009b6 <GPIO_Config+0xe2>
		if (k==0 || k==1 || k==5 || k==6 || k==7 || k==8){
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	2b00      	cmp	r3, #0
 8000960:	d00e      	beq.n	8000980 <GPIO_Config+0xac>
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	2b01      	cmp	r3, #1
 8000966:	d00b      	beq.n	8000980 <GPIO_Config+0xac>
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	2b05      	cmp	r3, #5
 800096c:	d008      	beq.n	8000980 <GPIO_Config+0xac>
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	2b06      	cmp	r3, #6
 8000972:	d005      	beq.n	8000980 <GPIO_Config+0xac>
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	2b07      	cmp	r3, #7
 8000978:	d002      	beq.n	8000980 <GPIO_Config+0xac>
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	2b08      	cmp	r3, #8
 800097e:	d117      	bne.n	80009b0 <GPIO_Config+0xdc>
			GPIOA->MODER &= ~(3U << 2*k);
 8000980:	23a0      	movs	r3, #160	; 0xa0
 8000982:	05db      	lsls	r3, r3, #23
 8000984:	681a      	ldr	r2, [r3, #0]
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	005b      	lsls	r3, r3, #1
 800098a:	2103      	movs	r1, #3
 800098c:	4099      	lsls	r1, r3
 800098e:	000b      	movs	r3, r1
 8000990:	43d9      	mvns	r1, r3
 8000992:	23a0      	movs	r3, #160	; 0xa0
 8000994:	05db      	lsls	r3, r3, #23
 8000996:	400a      	ands	r2, r1
 8000998:	601a      	str	r2, [r3, #0]
			GPIOA->MODER |= (1U << 2*k);
 800099a:	23a0      	movs	r3, #160	; 0xa0
 800099c:	05db      	lsls	r3, r3, #23
 800099e:	6819      	ldr	r1, [r3, #0]
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	005b      	lsls	r3, r3, #1
 80009a4:	2201      	movs	r2, #1
 80009a6:	409a      	lsls	r2, r3
 80009a8:	23a0      	movs	r3, #160	; 0xa0
 80009aa:	05db      	lsls	r3, r3, #23
 80009ac:	430a      	orrs	r2, r1
 80009ae:	601a      	str	r2, [r3, #0]
	for(int k=0; k<9; k++){
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	3301      	adds	r3, #1
 80009b4:	607b      	str	r3, [r7, #4]
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	2b08      	cmp	r3, #8
 80009ba:	ddcf      	ble.n	800095c <GPIO_Config+0x88>
		}
	}

	/* enable required GPIOB registers and RCC register */
	/*PB0-PB6 output pins are assigned from A to G respectively*/
	RCC->IOPENR |= (1U << 1);
 80009bc:	4b1f      	ldr	r3, [pc, #124]	; (8000a3c <GPIO_Config+0x168>)
 80009be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80009c0:	4b1e      	ldr	r3, [pc, #120]	; (8000a3c <GPIO_Config+0x168>)
 80009c2:	2102      	movs	r1, #2
 80009c4:	430a      	orrs	r2, r1
 80009c6:	635a      	str	r2, [r3, #52]	; 0x34
	for(int k=0; k<9; k++){
 80009c8:	2300      	movs	r3, #0
 80009ca:	603b      	str	r3, [r7, #0]
 80009cc:	e02e      	b.n	8000a2c <GPIO_Config+0x158>
		if (k==0 || k==1 || k==2 || k==3 || k==4 || k==5 || k==6 || k==8){
 80009ce:	683b      	ldr	r3, [r7, #0]
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d014      	beq.n	80009fe <GPIO_Config+0x12a>
 80009d4:	683b      	ldr	r3, [r7, #0]
 80009d6:	2b01      	cmp	r3, #1
 80009d8:	d011      	beq.n	80009fe <GPIO_Config+0x12a>
 80009da:	683b      	ldr	r3, [r7, #0]
 80009dc:	2b02      	cmp	r3, #2
 80009de:	d00e      	beq.n	80009fe <GPIO_Config+0x12a>
 80009e0:	683b      	ldr	r3, [r7, #0]
 80009e2:	2b03      	cmp	r3, #3
 80009e4:	d00b      	beq.n	80009fe <GPIO_Config+0x12a>
 80009e6:	683b      	ldr	r3, [r7, #0]
 80009e8:	2b04      	cmp	r3, #4
 80009ea:	d008      	beq.n	80009fe <GPIO_Config+0x12a>
 80009ec:	683b      	ldr	r3, [r7, #0]
 80009ee:	2b05      	cmp	r3, #5
 80009f0:	d005      	beq.n	80009fe <GPIO_Config+0x12a>
 80009f2:	683b      	ldr	r3, [r7, #0]
 80009f4:	2b06      	cmp	r3, #6
 80009f6:	d002      	beq.n	80009fe <GPIO_Config+0x12a>
 80009f8:	683b      	ldr	r3, [r7, #0]
 80009fa:	2b08      	cmp	r3, #8
 80009fc:	d113      	bne.n	8000a26 <GPIO_Config+0x152>
			GPIOB->MODER &= ~(3U << 2*k);
 80009fe:	4b12      	ldr	r3, [pc, #72]	; (8000a48 <GPIO_Config+0x174>)
 8000a00:	681a      	ldr	r2, [r3, #0]
 8000a02:	683b      	ldr	r3, [r7, #0]
 8000a04:	005b      	lsls	r3, r3, #1
 8000a06:	2103      	movs	r1, #3
 8000a08:	4099      	lsls	r1, r3
 8000a0a:	000b      	movs	r3, r1
 8000a0c:	43d9      	mvns	r1, r3
 8000a0e:	4b0e      	ldr	r3, [pc, #56]	; (8000a48 <GPIO_Config+0x174>)
 8000a10:	400a      	ands	r2, r1
 8000a12:	601a      	str	r2, [r3, #0]
			GPIOB->MODER |= (1U << 2*k);
 8000a14:	4b0c      	ldr	r3, [pc, #48]	; (8000a48 <GPIO_Config+0x174>)
 8000a16:	6819      	ldr	r1, [r3, #0]
 8000a18:	683b      	ldr	r3, [r7, #0]
 8000a1a:	005b      	lsls	r3, r3, #1
 8000a1c:	2201      	movs	r2, #1
 8000a1e:	409a      	lsls	r2, r3
 8000a20:	4b09      	ldr	r3, [pc, #36]	; (8000a48 <GPIO_Config+0x174>)
 8000a22:	430a      	orrs	r2, r1
 8000a24:	601a      	str	r2, [r3, #0]
	for(int k=0; k<9; k++){
 8000a26:	683b      	ldr	r3, [r7, #0]
 8000a28:	3301      	adds	r3, #1
 8000a2a:	603b      	str	r3, [r7, #0]
 8000a2c:	683b      	ldr	r3, [r7, #0]
 8000a2e:	2b08      	cmp	r3, #8
 8000a30:	ddcd      	ble.n	80009ce <GPIO_Config+0xfa>
		}
	}
}
 8000a32:	46c0      	nop			; (mov r8, r8)
 8000a34:	46c0      	nop			; (mov r8, r8)
 8000a36:	46bd      	mov	sp, r7
 8000a38:	b002      	add	sp, #8
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	40021000 	.word	0x40021000
 8000a40:	fffffcff 	.word	0xfffffcff
 8000a44:	ffc3ffff 	.word	0xffc3ffff
 8000a48:	50000400 	.word	0x50000400

08000a4c <ADC_Config>:

void ADC_Config(void){
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	af00      	add	r7, sp, #0
	RCC->APBENR2 |= RCC_APBENR2_ADCEN; // ADC clock enable
 8000a50:	4b20      	ldr	r3, [pc, #128]	; (8000ad4 <ADC_Config+0x88>)
 8000a52:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a54:	4b1f      	ldr	r3, [pc, #124]	; (8000ad4 <ADC_Config+0x88>)
 8000a56:	2180      	movs	r1, #128	; 0x80
 8000a58:	0349      	lsls	r1, r1, #13
 8000a5a:	430a      	orrs	r2, r1
 8000a5c:	641a      	str	r2, [r3, #64]	; 0x40

	ADC1->CR |=ADC_CR_ADVREGEN; //voltage regulator enable
 8000a5e:	4b1e      	ldr	r3, [pc, #120]	; (8000ad8 <ADC_Config+0x8c>)
 8000a60:	689a      	ldr	r2, [r3, #8]
 8000a62:	4b1d      	ldr	r3, [pc, #116]	; (8000ad8 <ADC_Config+0x8c>)
 8000a64:	2180      	movs	r1, #128	; 0x80
 8000a66:	0549      	lsls	r1, r1, #21
 8000a68:	430a      	orrs	r2, r1
 8000a6a:	609a      	str	r2, [r3, #8]
	Delay(500);
 8000a6c:	23fa      	movs	r3, #250	; 0xfa
 8000a6e:	005b      	lsls	r3, r3, #1
 8000a70:	0018      	movs	r0, r3
 8000a72:	f000 f94f 	bl	8000d14 <Delay>

	ADC1->CR |=ADC_CR_ADCAL; //calibration
 8000a76:	4b18      	ldr	r3, [pc, #96]	; (8000ad8 <ADC_Config+0x8c>)
 8000a78:	689a      	ldr	r2, [r3, #8]
 8000a7a:	4b17      	ldr	r3, [pc, #92]	; (8000ad8 <ADC_Config+0x8c>)
 8000a7c:	2180      	movs	r1, #128	; 0x80
 8000a7e:	0609      	lsls	r1, r1, #24
 8000a80:	430a      	orrs	r2, r1
 8000a82:	609a      	str	r2, [r3, #8]
	while(((ADC1->CR>>31)==ADC_CR_ADCAL>>31)); // until calibration
 8000a84:	46c0      	nop			; (mov r8, r8)
 8000a86:	4b14      	ldr	r3, [pc, #80]	; (8000ad8 <ADC_Config+0x8c>)
 8000a88:	689b      	ldr	r3, [r3, #8]
 8000a8a:	0fdb      	lsrs	r3, r3, #31
 8000a8c:	2b01      	cmp	r3, #1
 8000a8e:	d0fa      	beq.n	8000a86 <ADC_Config+0x3a>
	/* 0: Calibration complete
	 * 1: Write 1 to calibrate the ADC. Read at 1 means that a calibration is in progress.*/

	ADC1->CR |= ADC_CR_ADEN; // ADC is enabled.
 8000a90:	4b11      	ldr	r3, [pc, #68]	; (8000ad8 <ADC_Config+0x8c>)
 8000a92:	689a      	ldr	r2, [r3, #8]
 8000a94:	4b10      	ldr	r3, [pc, #64]	; (8000ad8 <ADC_Config+0x8c>)
 8000a96:	2101      	movs	r1, #1
 8000a98:	430a      	orrs	r2, r1
 8000a9a:	609a      	str	r2, [r3, #8]
	while (ADC1->ISR & ADC_ISR_ADRDY); // 1: ADC is ready to start conversion
 8000a9c:	46c0      	nop			; (mov r8, r8)
 8000a9e:	4b0e      	ldr	r3, [pc, #56]	; (8000ad8 <ADC_Config+0x8c>)
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	2201      	movs	r2, #1
 8000aa4:	4013      	ands	r3, r2
 8000aa6:	d1fa      	bne.n	8000a9e <ADC_Config+0x52>

	ADC1->CHSELR |= ADC_CHSELR_CHSEL1; //chanel selection for PA1
 8000aa8:	4b0b      	ldr	r3, [pc, #44]	; (8000ad8 <ADC_Config+0x8c>)
 8000aaa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000aac:	4b0a      	ldr	r3, [pc, #40]	; (8000ad8 <ADC_Config+0x8c>)
 8000aae:	2102      	movs	r1, #2
 8000ab0:	430a      	orrs	r2, r1
 8000ab2:	629a      	str	r2, [r3, #40]	; 0x28
	ADC1->CFGR1 |= ADC_CFGR1_CONT; // contionous conversion
 8000ab4:	4b08      	ldr	r3, [pc, #32]	; (8000ad8 <ADC_Config+0x8c>)
 8000ab6:	68da      	ldr	r2, [r3, #12]
 8000ab8:	4b07      	ldr	r3, [pc, #28]	; (8000ad8 <ADC_Config+0x8c>)
 8000aba:	2180      	movs	r1, #128	; 0x80
 8000abc:	0189      	lsls	r1, r1, #6
 8000abe:	430a      	orrs	r2, r1
 8000ac0:	60da      	str	r2, [r3, #12]

	ADC1->SMPR |= (6UL<<0); // 79.5 ADC clock cycles for sampling time selection 1
 8000ac2:	4b05      	ldr	r3, [pc, #20]	; (8000ad8 <ADC_Config+0x8c>)
 8000ac4:	695a      	ldr	r2, [r3, #20]
 8000ac6:	4b04      	ldr	r3, [pc, #16]	; (8000ad8 <ADC_Config+0x8c>)
 8000ac8:	2106      	movs	r1, #6
 8000aca:	430a      	orrs	r2, r1
 8000acc:	615a      	str	r2, [r3, #20]
}
 8000ace:	46c0      	nop			; (mov r8, r8)
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	40021000 	.word	0x40021000
 8000ad8:	40012400 	.word	0x40012400

08000adc <TIM3_Config>:

void TIM3_Config(void){
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0
	RCC->APBENR1 |=	RCC_APBENR1_TIM3EN; // Timer 3 clock enable
 8000ae0:	4b17      	ldr	r3, [pc, #92]	; (8000b40 <TIM3_Config+0x64>)
 8000ae2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000ae4:	4b16      	ldr	r3, [pc, #88]	; (8000b40 <TIM3_Config+0x64>)
 8000ae6:	2102      	movs	r1, #2
 8000ae8:	430a      	orrs	r2, r1
 8000aea:	63da      	str	r2, [r3, #60]	; 0x3c

	TIM3->CR1=0; // zero out the control register just in case
 8000aec:	4b15      	ldr	r3, [pc, #84]	; (8000b44 <TIM3_Config+0x68>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	601a      	str	r2, [r3, #0]
	TIM3->CR1 |= TIM_CR1_ARPE; // Auto-reload preload enable
 8000af2:	4b14      	ldr	r3, [pc, #80]	; (8000b44 <TIM3_Config+0x68>)
 8000af4:	681a      	ldr	r2, [r3, #0]
 8000af6:	4b13      	ldr	r3, [pc, #76]	; (8000b44 <TIM3_Config+0x68>)
 8000af8:	2180      	movs	r1, #128	; 0x80
 8000afa:	430a      	orrs	r2, r1
 8000afc:	601a      	str	r2, [r3, #0]

	TIM3->CNT =0; // zero out counter
 8000afe:	4b11      	ldr	r3, [pc, #68]	; (8000b44 <TIM3_Config+0x68>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	625a      	str	r2, [r3, #36]	; 0x24

	// tim uptade frequency = TIM_CLK/((TIM_PSC+1)*TIM_ARR) for 1s interrupt
	TIM3->PSC= 0;
 8000b04:	4b0f      	ldr	r3, [pc, #60]	; (8000b44 <TIM3_Config+0x68>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	629a      	str	r2, [r3, #40]	; 0x28
	TIM3->ARR= 16000;
 8000b0a:	4b0e      	ldr	r3, [pc, #56]	; (8000b44 <TIM3_Config+0x68>)
 8000b0c:	22fa      	movs	r2, #250	; 0xfa
 8000b0e:	0192      	lsls	r2, r2, #6
 8000b10:	62da      	str	r2, [r3, #44]	; 0x2c

	TIM3->DIER |= TIM_DIER_UIE; // Update interrupt enable
 8000b12:	4b0c      	ldr	r3, [pc, #48]	; (8000b44 <TIM3_Config+0x68>)
 8000b14:	68da      	ldr	r2, [r3, #12]
 8000b16:	4b0b      	ldr	r3, [pc, #44]	; (8000b44 <TIM3_Config+0x68>)
 8000b18:	2101      	movs	r1, #1
 8000b1a:	430a      	orrs	r2, r1
 8000b1c:	60da      	str	r2, [r3, #12]

	TIM3->CR1 |= TIM_CR1_CEN; // TIM3 Counter enable
 8000b1e:	4b09      	ldr	r3, [pc, #36]	; (8000b44 <TIM3_Config+0x68>)
 8000b20:	681a      	ldr	r2, [r3, #0]
 8000b22:	4b08      	ldr	r3, [pc, #32]	; (8000b44 <TIM3_Config+0x68>)
 8000b24:	2101      	movs	r1, #1
 8000b26:	430a      	orrs	r2, r1
 8000b28:	601a      	str	r2, [r3, #0]

	NVIC_SetPriority(TIM3_IRQn, 1);
 8000b2a:	2101      	movs	r1, #1
 8000b2c:	2010      	movs	r0, #16
 8000b2e:	f7ff fc83 	bl	8000438 <__NVIC_SetPriority>
	NVIC_EnableIRQ(TIM3_IRQn);
 8000b32:	2010      	movs	r0, #16
 8000b34:	f7ff fc66 	bl	8000404 <__NVIC_EnableIRQ>
}
 8000b38:	46c0      	nop			; (mov r8, r8)
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	46c0      	nop			; (mov r8, r8)
 8000b40:	40021000 	.word	0x40021000
 8000b44:	40000400 	.word	0x40000400

08000b48 <USART1_Config>:

void USART1_Config(void){
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
	RCC->APBENR2 |= RCC_APBENR2_USART1EN; // RCC APB peripherals clock enable for USART2
 8000b4c:	4b12      	ldr	r3, [pc, #72]	; (8000b98 <USART1_Config+0x50>)
 8000b4e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b50:	4b11      	ldr	r3, [pc, #68]	; (8000b98 <USART1_Config+0x50>)
 8000b52:	2180      	movs	r1, #128	; 0x80
 8000b54:	01c9      	lsls	r1, r1, #7
 8000b56:	430a      	orrs	r2, r1
 8000b58:	641a      	str	r2, [r3, #64]	; 0x40
	USART1->CR1 = 0x00; // clear all
 8000b5a:	4b10      	ldr	r3, [pc, #64]	; (8000b9c <USART1_Config+0x54>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	601a      	str	r2, [r3, #0]
	USART1->CR1 |= USART_CR1_UE; // UE: USART enable
 8000b60:	4b0e      	ldr	r3, [pc, #56]	; (8000b9c <USART1_Config+0x54>)
 8000b62:	681a      	ldr	r2, [r3, #0]
 8000b64:	4b0d      	ldr	r3, [pc, #52]	; (8000b9c <USART1_Config+0x54>)
 8000b66:	2101      	movs	r1, #1
 8000b68:	430a      	orrs	r2, r1
 8000b6a:	601a      	str	r2, [r3, #0]

	/* Baud rate of 9600, PCLK1 at 16 MHz
	 * TX/RX baud rate = f_clk/(16*USARTDIV)
	 * 9600 = 16MHz/(16*USARTDIV) --->>> USARTDIV = 104.1666667
	 * IEEE754 floating-point --->>> mantissa = 104, fraction = 0.167*16 = 2.672 ≈ 3*/
	USART1->BRR |= (3 << 0) | (104 << 4);
 8000b6c:	4b0b      	ldr	r3, [pc, #44]	; (8000b9c <USART1_Config+0x54>)
 8000b6e:	68da      	ldr	r2, [r3, #12]
 8000b70:	4b0a      	ldr	r3, [pc, #40]	; (8000b9c <USART1_Config+0x54>)
 8000b72:	490b      	ldr	r1, [pc, #44]	; (8000ba0 <USART1_Config+0x58>)
 8000b74:	430a      	orrs	r2, r1
 8000b76:	60da      	str	r2, [r3, #12]

	USART1->CR1 |= USART_CR1_RE; // RE: Receiver enable
 8000b78:	4b08      	ldr	r3, [pc, #32]	; (8000b9c <USART1_Config+0x54>)
 8000b7a:	681a      	ldr	r2, [r3, #0]
 8000b7c:	4b07      	ldr	r3, [pc, #28]	; (8000b9c <USART1_Config+0x54>)
 8000b7e:	2104      	movs	r1, #4
 8000b80:	430a      	orrs	r2, r1
 8000b82:	601a      	str	r2, [r3, #0]
	USART1->CR1 |= USART_CR1_TE; // TE: Transmitter enable
 8000b84:	4b05      	ldr	r3, [pc, #20]	; (8000b9c <USART1_Config+0x54>)
 8000b86:	681a      	ldr	r2, [r3, #0]
 8000b88:	4b04      	ldr	r3, [pc, #16]	; (8000b9c <USART1_Config+0x54>)
 8000b8a:	2108      	movs	r1, #8
 8000b8c:	430a      	orrs	r2, r1
 8000b8e:	601a      	str	r2, [r3, #0]
}
 8000b90:	46c0      	nop			; (mov r8, r8)
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	46c0      	nop			; (mov r8, r8)
 8000b98:	40021000 	.word	0x40021000
 8000b9c:	40013800 	.word	0x40013800
 8000ba0:	00000683 	.word	0x00000683

08000ba4 <clearSSD>:

void clearSSD(void){ // Clear display
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0
	GPIOB -> ODR |= (1U << 0); //PB0 -> A
 8000ba8:	4b16      	ldr	r3, [pc, #88]	; (8000c04 <clearSSD+0x60>)
 8000baa:	695a      	ldr	r2, [r3, #20]
 8000bac:	4b15      	ldr	r3, [pc, #84]	; (8000c04 <clearSSD+0x60>)
 8000bae:	2101      	movs	r1, #1
 8000bb0:	430a      	orrs	r2, r1
 8000bb2:	615a      	str	r2, [r3, #20]
	GPIOB -> ODR |= (1U << 1); //PB1 -> B
 8000bb4:	4b13      	ldr	r3, [pc, #76]	; (8000c04 <clearSSD+0x60>)
 8000bb6:	695a      	ldr	r2, [r3, #20]
 8000bb8:	4b12      	ldr	r3, [pc, #72]	; (8000c04 <clearSSD+0x60>)
 8000bba:	2102      	movs	r1, #2
 8000bbc:	430a      	orrs	r2, r1
 8000bbe:	615a      	str	r2, [r3, #20]
	GPIOB -> ODR |= (1U << 2); //PB2 -> C
 8000bc0:	4b10      	ldr	r3, [pc, #64]	; (8000c04 <clearSSD+0x60>)
 8000bc2:	695a      	ldr	r2, [r3, #20]
 8000bc4:	4b0f      	ldr	r3, [pc, #60]	; (8000c04 <clearSSD+0x60>)
 8000bc6:	2104      	movs	r1, #4
 8000bc8:	430a      	orrs	r2, r1
 8000bca:	615a      	str	r2, [r3, #20]
	GPIOB -> ODR |= (1U << 3); //PB3 -> D
 8000bcc:	4b0d      	ldr	r3, [pc, #52]	; (8000c04 <clearSSD+0x60>)
 8000bce:	695a      	ldr	r2, [r3, #20]
 8000bd0:	4b0c      	ldr	r3, [pc, #48]	; (8000c04 <clearSSD+0x60>)
 8000bd2:	2108      	movs	r1, #8
 8000bd4:	430a      	orrs	r2, r1
 8000bd6:	615a      	str	r2, [r3, #20]
	GPIOB -> ODR |= (1U << 4); //PB4 -> E
 8000bd8:	4b0a      	ldr	r3, [pc, #40]	; (8000c04 <clearSSD+0x60>)
 8000bda:	695a      	ldr	r2, [r3, #20]
 8000bdc:	4b09      	ldr	r3, [pc, #36]	; (8000c04 <clearSSD+0x60>)
 8000bde:	2110      	movs	r1, #16
 8000be0:	430a      	orrs	r2, r1
 8000be2:	615a      	str	r2, [r3, #20]
	GPIOB -> ODR |= (1U << 5); //PB5 -> F
 8000be4:	4b07      	ldr	r3, [pc, #28]	; (8000c04 <clearSSD+0x60>)
 8000be6:	695a      	ldr	r2, [r3, #20]
 8000be8:	4b06      	ldr	r3, [pc, #24]	; (8000c04 <clearSSD+0x60>)
 8000bea:	2120      	movs	r1, #32
 8000bec:	430a      	orrs	r2, r1
 8000bee:	615a      	str	r2, [r3, #20]
	GPIOB -> ODR |= (1U << 6); //PB6 -> G
 8000bf0:	4b04      	ldr	r3, [pc, #16]	; (8000c04 <clearSSD+0x60>)
 8000bf2:	695a      	ldr	r2, [r3, #20]
 8000bf4:	4b03      	ldr	r3, [pc, #12]	; (8000c04 <clearSSD+0x60>)
 8000bf6:	2140      	movs	r1, #64	; 0x40
 8000bf8:	430a      	orrs	r2, r1
 8000bfa:	615a      	str	r2, [r3, #20]
}
 8000bfc:	46c0      	nop			; (mov r8, r8)
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	46c0      	nop			; (mov r8, r8)
 8000c04:	50000400 	.word	0x50000400

08000c08 <setSSD>:

void setSSD(int x){ // choose number we want and its leds are turned on.
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b082      	sub	sp, #8
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
	clearSSD();
 8000c10:	f7ff ffc8 	bl	8000ba4 <clearSSD>
	switch(x){
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	2b09      	cmp	r3, #9
 8000c18:	d84b      	bhi.n	8000cb2 <setSSD+0xaa>
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	009a      	lsls	r2, r3, #2
 8000c1e:	4b27      	ldr	r3, [pc, #156]	; (8000cbc <setSSD+0xb4>)
 8000c20:	18d3      	adds	r3, r2, r3
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	469f      	mov	pc, r3
		case 0:
			GPIOB->ODR &= ~(0x3F); // A,B,C,D,E,F is on
 8000c26:	4b26      	ldr	r3, [pc, #152]	; (8000cc0 <setSSD+0xb8>)
 8000c28:	695a      	ldr	r2, [r3, #20]
 8000c2a:	4b25      	ldr	r3, [pc, #148]	; (8000cc0 <setSSD+0xb8>)
 8000c2c:	213f      	movs	r1, #63	; 0x3f
 8000c2e:	438a      	bics	r2, r1
 8000c30:	615a      	str	r2, [r3, #20]
			break;
 8000c32:	e03e      	b.n	8000cb2 <setSSD+0xaa>
		case 1:
			GPIOB->ODR &= ~(0x6); // B,C is on
 8000c34:	4b22      	ldr	r3, [pc, #136]	; (8000cc0 <setSSD+0xb8>)
 8000c36:	695a      	ldr	r2, [r3, #20]
 8000c38:	4b21      	ldr	r3, [pc, #132]	; (8000cc0 <setSSD+0xb8>)
 8000c3a:	2106      	movs	r1, #6
 8000c3c:	438a      	bics	r2, r1
 8000c3e:	615a      	str	r2, [r3, #20]
			break;
 8000c40:	e037      	b.n	8000cb2 <setSSD+0xaa>
		case 2:
			GPIOB->ODR &= ~(0x5B); // A,B,D,E,G is on
 8000c42:	4b1f      	ldr	r3, [pc, #124]	; (8000cc0 <setSSD+0xb8>)
 8000c44:	695a      	ldr	r2, [r3, #20]
 8000c46:	4b1e      	ldr	r3, [pc, #120]	; (8000cc0 <setSSD+0xb8>)
 8000c48:	215b      	movs	r1, #91	; 0x5b
 8000c4a:	438a      	bics	r2, r1
 8000c4c:	615a      	str	r2, [r3, #20]
			break;
 8000c4e:	e030      	b.n	8000cb2 <setSSD+0xaa>
		case 3:
			GPIOB->ODR &= ~(0x4F); // A,B,C,D,G is on
 8000c50:	4b1b      	ldr	r3, [pc, #108]	; (8000cc0 <setSSD+0xb8>)
 8000c52:	695a      	ldr	r2, [r3, #20]
 8000c54:	4b1a      	ldr	r3, [pc, #104]	; (8000cc0 <setSSD+0xb8>)
 8000c56:	214f      	movs	r1, #79	; 0x4f
 8000c58:	438a      	bics	r2, r1
 8000c5a:	615a      	str	r2, [r3, #20]
			break;
 8000c5c:	e029      	b.n	8000cb2 <setSSD+0xaa>
		case 4:
			GPIOB->ODR &= ~(0x66); // B,C,F,G is on
 8000c5e:	4b18      	ldr	r3, [pc, #96]	; (8000cc0 <setSSD+0xb8>)
 8000c60:	695a      	ldr	r2, [r3, #20]
 8000c62:	4b17      	ldr	r3, [pc, #92]	; (8000cc0 <setSSD+0xb8>)
 8000c64:	2166      	movs	r1, #102	; 0x66
 8000c66:	438a      	bics	r2, r1
 8000c68:	615a      	str	r2, [r3, #20]
			break;
 8000c6a:	e022      	b.n	8000cb2 <setSSD+0xaa>
		case 5:
			GPIOB->ODR &= ~(0x6D); // A,C,D,F,G is on
 8000c6c:	4b14      	ldr	r3, [pc, #80]	; (8000cc0 <setSSD+0xb8>)
 8000c6e:	695a      	ldr	r2, [r3, #20]
 8000c70:	4b13      	ldr	r3, [pc, #76]	; (8000cc0 <setSSD+0xb8>)
 8000c72:	216d      	movs	r1, #109	; 0x6d
 8000c74:	438a      	bics	r2, r1
 8000c76:	615a      	str	r2, [r3, #20]
			break;
 8000c78:	e01b      	b.n	8000cb2 <setSSD+0xaa>
		case 6:
			GPIOB->ODR &= ~(0x7D); // A,C,D,E,F,G is on
 8000c7a:	4b11      	ldr	r3, [pc, #68]	; (8000cc0 <setSSD+0xb8>)
 8000c7c:	695a      	ldr	r2, [r3, #20]
 8000c7e:	4b10      	ldr	r3, [pc, #64]	; (8000cc0 <setSSD+0xb8>)
 8000c80:	217d      	movs	r1, #125	; 0x7d
 8000c82:	438a      	bics	r2, r1
 8000c84:	615a      	str	r2, [r3, #20]
			break;
 8000c86:	e014      	b.n	8000cb2 <setSSD+0xaa>
		case 7:
			GPIOB->ODR &= ~(0x7); // A,B,C is on
 8000c88:	4b0d      	ldr	r3, [pc, #52]	; (8000cc0 <setSSD+0xb8>)
 8000c8a:	695a      	ldr	r2, [r3, #20]
 8000c8c:	4b0c      	ldr	r3, [pc, #48]	; (8000cc0 <setSSD+0xb8>)
 8000c8e:	2107      	movs	r1, #7
 8000c90:	438a      	bics	r2, r1
 8000c92:	615a      	str	r2, [r3, #20]
			break;
 8000c94:	e00d      	b.n	8000cb2 <setSSD+0xaa>
		case 8:
			GPIOB->ODR &= ~(0x7F); // A,B,C,D,E,F,G is on
 8000c96:	4b0a      	ldr	r3, [pc, #40]	; (8000cc0 <setSSD+0xb8>)
 8000c98:	695a      	ldr	r2, [r3, #20]
 8000c9a:	4b09      	ldr	r3, [pc, #36]	; (8000cc0 <setSSD+0xb8>)
 8000c9c:	217f      	movs	r1, #127	; 0x7f
 8000c9e:	438a      	bics	r2, r1
 8000ca0:	615a      	str	r2, [r3, #20]
			break;
 8000ca2:	e006      	b.n	8000cb2 <setSSD+0xaa>
		case 9:
			GPIOB->ODR &= ~(0x6F); //A,B,C,D,F,G is on; E is off
 8000ca4:	4b06      	ldr	r3, [pc, #24]	; (8000cc0 <setSSD+0xb8>)
 8000ca6:	695a      	ldr	r2, [r3, #20]
 8000ca8:	4b05      	ldr	r3, [pc, #20]	; (8000cc0 <setSSD+0xb8>)
 8000caa:	216f      	movs	r1, #111	; 0x6f
 8000cac:	438a      	bics	r2, r1
 8000cae:	615a      	str	r2, [r3, #20]
			break;
 8000cb0:	46c0      	nop			; (mov r8, r8)
	}
}
 8000cb2:	46c0      	nop			; (mov r8, r8)
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	b002      	add	sp, #8
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	46c0      	nop			; (mov r8, r8)
 8000cbc:	080017d8 	.word	0x080017d8
 8000cc0:	50000400 	.word	0x50000400

08000cc4 <SetZero>:

void SetZero(void){
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	af00      	add	r7, sp, #0
	GPIOA ->ODR |= (1U << 7); // D1 digit -> PA7
 8000cc8:	23a0      	movs	r3, #160	; 0xa0
 8000cca:	05db      	lsls	r3, r3, #23
 8000ccc:	695a      	ldr	r2, [r3, #20]
 8000cce:	23a0      	movs	r3, #160	; 0xa0
 8000cd0:	05db      	lsls	r3, r3, #23
 8000cd2:	2180      	movs	r1, #128	; 0x80
 8000cd4:	430a      	orrs	r2, r1
 8000cd6:	615a      	str	r2, [r3, #20]
	GPIOA ->ODR |= (1U << 6); // D2 digit -> PA6
 8000cd8:	23a0      	movs	r3, #160	; 0xa0
 8000cda:	05db      	lsls	r3, r3, #23
 8000cdc:	695a      	ldr	r2, [r3, #20]
 8000cde:	23a0      	movs	r3, #160	; 0xa0
 8000ce0:	05db      	lsls	r3, r3, #23
 8000ce2:	2140      	movs	r1, #64	; 0x40
 8000ce4:	430a      	orrs	r2, r1
 8000ce6:	615a      	str	r2, [r3, #20]
	GPIOA ->ODR |= (1U << 0); // D3 digit -> PA0
 8000ce8:	23a0      	movs	r3, #160	; 0xa0
 8000cea:	05db      	lsls	r3, r3, #23
 8000cec:	695a      	ldr	r2, [r3, #20]
 8000cee:	23a0      	movs	r3, #160	; 0xa0
 8000cf0:	05db      	lsls	r3, r3, #23
 8000cf2:	2101      	movs	r1, #1
 8000cf4:	430a      	orrs	r2, r1
 8000cf6:	615a      	str	r2, [r3, #20]
	GPIOA ->ODR |= (1U << 5); // D4 digit -> PA5
 8000cf8:	23a0      	movs	r3, #160	; 0xa0
 8000cfa:	05db      	lsls	r3, r3, #23
 8000cfc:	695a      	ldr	r2, [r3, #20]
 8000cfe:	23a0      	movs	r3, #160	; 0xa0
 8000d00:	05db      	lsls	r3, r3, #23
 8000d02:	2120      	movs	r1, #32
 8000d04:	430a      	orrs	r2, r1
 8000d06:	615a      	str	r2, [r3, #20]
	setSSD(0);
 8000d08:	2000      	movs	r0, #0
 8000d0a:	f7ff ff7d 	bl	8000c08 <setSSD>
}
 8000d0e:	46c0      	nop			; (mov r8, r8)
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}

08000d14 <Delay>:
void Delay(volatile uint32_t time){
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b082      	sub	sp, #8
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
    for(; time>0; time--);
 8000d1c:	e002      	b.n	8000d24 <Delay+0x10>
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	3b01      	subs	r3, #1
 8000d22:	607b      	str	r3, [r7, #4]
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d1f9      	bne.n	8000d1e <Delay+0xa>
}
 8000d2a:	46c0      	nop			; (mov r8, r8)
 8000d2c:	46c0      	nop			; (mov r8, r8)
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	b002      	add	sp, #8
 8000d32:	bd80      	pop	{r7, pc}

08000d34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d38:	e7fe      	b.n	8000d38 <NMI_Handler+0x4>

08000d3a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d3a:	b580      	push	{r7, lr}
 8000d3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d3e:	e7fe      	b.n	8000d3e <HardFault_Handler+0x4>

08000d40 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000d44:	46c0      	nop			; (mov r8, r8)
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}

08000d4a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d4a:	b580      	push	{r7, lr}
 8000d4c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d4e:	46c0      	nop			; (mov r8, r8)
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}

08000d54 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d58:	f000 f86a 	bl	8000e30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d5c:	46c0      	nop			; (mov r8, r8)
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}
	...

08000d64 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b086      	sub	sp, #24
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d6c:	4a14      	ldr	r2, [pc, #80]	; (8000dc0 <_sbrk+0x5c>)
 8000d6e:	4b15      	ldr	r3, [pc, #84]	; (8000dc4 <_sbrk+0x60>)
 8000d70:	1ad3      	subs	r3, r2, r3
 8000d72:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d74:	697b      	ldr	r3, [r7, #20]
 8000d76:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d78:	4b13      	ldr	r3, [pc, #76]	; (8000dc8 <_sbrk+0x64>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d102      	bne.n	8000d86 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d80:	4b11      	ldr	r3, [pc, #68]	; (8000dc8 <_sbrk+0x64>)
 8000d82:	4a12      	ldr	r2, [pc, #72]	; (8000dcc <_sbrk+0x68>)
 8000d84:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d86:	4b10      	ldr	r3, [pc, #64]	; (8000dc8 <_sbrk+0x64>)
 8000d88:	681a      	ldr	r2, [r3, #0]
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	18d3      	adds	r3, r2, r3
 8000d8e:	693a      	ldr	r2, [r7, #16]
 8000d90:	429a      	cmp	r2, r3
 8000d92:	d207      	bcs.n	8000da4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d94:	f000 f892 	bl	8000ebc <__errno>
 8000d98:	0003      	movs	r3, r0
 8000d9a:	220c      	movs	r2, #12
 8000d9c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d9e:	2301      	movs	r3, #1
 8000da0:	425b      	negs	r3, r3
 8000da2:	e009      	b.n	8000db8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000da4:	4b08      	ldr	r3, [pc, #32]	; (8000dc8 <_sbrk+0x64>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000daa:	4b07      	ldr	r3, [pc, #28]	; (8000dc8 <_sbrk+0x64>)
 8000dac:	681a      	ldr	r2, [r3, #0]
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	18d2      	adds	r2, r2, r3
 8000db2:	4b05      	ldr	r3, [pc, #20]	; (8000dc8 <_sbrk+0x64>)
 8000db4:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000db6:	68fb      	ldr	r3, [r7, #12]
}
 8000db8:	0018      	movs	r0, r3
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	b006      	add	sp, #24
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	20002000 	.word	0x20002000
 8000dc4:	00000400 	.word	0x00000400
 8000dc8:	20000074 	.word	0x20000074
 8000dcc:	200001c8 	.word	0x200001c8

08000dd0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000dd4:	46c0      	nop			; (mov r8, r8)
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
	...

08000ddc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000ddc:	480d      	ldr	r0, [pc, #52]	; (8000e14 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000dde:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000de0:	f7ff fff6 	bl	8000dd0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000de4:	480c      	ldr	r0, [pc, #48]	; (8000e18 <LoopForever+0x6>)
  ldr r1, =_edata
 8000de6:	490d      	ldr	r1, [pc, #52]	; (8000e1c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000de8:	4a0d      	ldr	r2, [pc, #52]	; (8000e20 <LoopForever+0xe>)
  movs r3, #0
 8000dea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dec:	e002      	b.n	8000df4 <LoopCopyDataInit>

08000dee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000df0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000df2:	3304      	adds	r3, #4

08000df4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000df4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000df6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000df8:	d3f9      	bcc.n	8000dee <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dfa:	4a0a      	ldr	r2, [pc, #40]	; (8000e24 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000dfc:	4c0a      	ldr	r4, [pc, #40]	; (8000e28 <LoopForever+0x16>)
  movs r3, #0
 8000dfe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e00:	e001      	b.n	8000e06 <LoopFillZerobss>

08000e02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e04:	3204      	adds	r2, #4

08000e06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e08:	d3fb      	bcc.n	8000e02 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000e0a:	f000 f85d 	bl	8000ec8 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000e0e:	f7ff fbc7 	bl	80005a0 <main>

08000e12 <LoopForever>:

LoopForever:
  b LoopForever
 8000e12:	e7fe      	b.n	8000e12 <LoopForever>
  ldr   r0, =_estack
 8000e14:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000e18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e1c:	20000054 	.word	0x20000054
  ldr r2, =_sidata
 8000e20:	0800183c 	.word	0x0800183c
  ldr r2, =_sbss
 8000e24:	20000054 	.word	0x20000054
  ldr r4, =_ebss
 8000e28:	200001c4 	.word	0x200001c4

08000e2c <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e2c:	e7fe      	b.n	8000e2c <ADC1_IRQHandler>
	...

08000e30 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e34:	4b05      	ldr	r3, [pc, #20]	; (8000e4c <HAL_IncTick+0x1c>)
 8000e36:	781b      	ldrb	r3, [r3, #0]
 8000e38:	001a      	movs	r2, r3
 8000e3a:	4b05      	ldr	r3, [pc, #20]	; (8000e50 <HAL_IncTick+0x20>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	18d2      	adds	r2, r2, r3
 8000e40:	4b03      	ldr	r3, [pc, #12]	; (8000e50 <HAL_IncTick+0x20>)
 8000e42:	601a      	str	r2, [r3, #0]
}
 8000e44:	46c0      	nop			; (mov r8, r8)
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	46c0      	nop			; (mov r8, r8)
 8000e4c:	20000000 	.word	0x20000000
 8000e50:	20000078 	.word	0x20000078

08000e54 <sniprintf>:
 8000e54:	b40c      	push	{r2, r3}
 8000e56:	b530      	push	{r4, r5, lr}
 8000e58:	4b17      	ldr	r3, [pc, #92]	; (8000eb8 <sniprintf+0x64>)
 8000e5a:	000c      	movs	r4, r1
 8000e5c:	681d      	ldr	r5, [r3, #0]
 8000e5e:	b09d      	sub	sp, #116	; 0x74
 8000e60:	2900      	cmp	r1, #0
 8000e62:	da08      	bge.n	8000e76 <sniprintf+0x22>
 8000e64:	238b      	movs	r3, #139	; 0x8b
 8000e66:	2001      	movs	r0, #1
 8000e68:	602b      	str	r3, [r5, #0]
 8000e6a:	4240      	negs	r0, r0
 8000e6c:	b01d      	add	sp, #116	; 0x74
 8000e6e:	bc30      	pop	{r4, r5}
 8000e70:	bc08      	pop	{r3}
 8000e72:	b002      	add	sp, #8
 8000e74:	4718      	bx	r3
 8000e76:	2382      	movs	r3, #130	; 0x82
 8000e78:	466a      	mov	r2, sp
 8000e7a:	009b      	lsls	r3, r3, #2
 8000e7c:	8293      	strh	r3, [r2, #20]
 8000e7e:	2300      	movs	r3, #0
 8000e80:	9002      	str	r0, [sp, #8]
 8000e82:	9006      	str	r0, [sp, #24]
 8000e84:	4299      	cmp	r1, r3
 8000e86:	d000      	beq.n	8000e8a <sniprintf+0x36>
 8000e88:	1e4b      	subs	r3, r1, #1
 8000e8a:	9304      	str	r3, [sp, #16]
 8000e8c:	9307      	str	r3, [sp, #28]
 8000e8e:	2301      	movs	r3, #1
 8000e90:	466a      	mov	r2, sp
 8000e92:	425b      	negs	r3, r3
 8000e94:	82d3      	strh	r3, [r2, #22]
 8000e96:	0028      	movs	r0, r5
 8000e98:	ab21      	add	r3, sp, #132	; 0x84
 8000e9a:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8000e9c:	a902      	add	r1, sp, #8
 8000e9e:	9301      	str	r3, [sp, #4]
 8000ea0:	f000 f998 	bl	80011d4 <_svfiprintf_r>
 8000ea4:	1c43      	adds	r3, r0, #1
 8000ea6:	da01      	bge.n	8000eac <sniprintf+0x58>
 8000ea8:	238b      	movs	r3, #139	; 0x8b
 8000eaa:	602b      	str	r3, [r5, #0]
 8000eac:	2c00      	cmp	r4, #0
 8000eae:	d0dd      	beq.n	8000e6c <sniprintf+0x18>
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	9b02      	ldr	r3, [sp, #8]
 8000eb4:	701a      	strb	r2, [r3, #0]
 8000eb6:	e7d9      	b.n	8000e6c <sniprintf+0x18>
 8000eb8:	20000050 	.word	0x20000050

08000ebc <__errno>:
 8000ebc:	4b01      	ldr	r3, [pc, #4]	; (8000ec4 <__errno+0x8>)
 8000ebe:	6818      	ldr	r0, [r3, #0]
 8000ec0:	4770      	bx	lr
 8000ec2:	46c0      	nop			; (mov r8, r8)
 8000ec4:	20000050 	.word	0x20000050

08000ec8 <__libc_init_array>:
 8000ec8:	b570      	push	{r4, r5, r6, lr}
 8000eca:	2600      	movs	r6, #0
 8000ecc:	4c0c      	ldr	r4, [pc, #48]	; (8000f00 <__libc_init_array+0x38>)
 8000ece:	4d0d      	ldr	r5, [pc, #52]	; (8000f04 <__libc_init_array+0x3c>)
 8000ed0:	1b64      	subs	r4, r4, r5
 8000ed2:	10a4      	asrs	r4, r4, #2
 8000ed4:	42a6      	cmp	r6, r4
 8000ed6:	d109      	bne.n	8000eec <__libc_init_array+0x24>
 8000ed8:	2600      	movs	r6, #0
 8000eda:	f000 fc6d 	bl	80017b8 <_init>
 8000ede:	4c0a      	ldr	r4, [pc, #40]	; (8000f08 <__libc_init_array+0x40>)
 8000ee0:	4d0a      	ldr	r5, [pc, #40]	; (8000f0c <__libc_init_array+0x44>)
 8000ee2:	1b64      	subs	r4, r4, r5
 8000ee4:	10a4      	asrs	r4, r4, #2
 8000ee6:	42a6      	cmp	r6, r4
 8000ee8:	d105      	bne.n	8000ef6 <__libc_init_array+0x2e>
 8000eea:	bd70      	pop	{r4, r5, r6, pc}
 8000eec:	00b3      	lsls	r3, r6, #2
 8000eee:	58eb      	ldr	r3, [r5, r3]
 8000ef0:	4798      	blx	r3
 8000ef2:	3601      	adds	r6, #1
 8000ef4:	e7ee      	b.n	8000ed4 <__libc_init_array+0xc>
 8000ef6:	00b3      	lsls	r3, r6, #2
 8000ef8:	58eb      	ldr	r3, [r5, r3]
 8000efa:	4798      	blx	r3
 8000efc:	3601      	adds	r6, #1
 8000efe:	e7f2      	b.n	8000ee6 <__libc_init_array+0x1e>
 8000f00:	08001834 	.word	0x08001834
 8000f04:	08001834 	.word	0x08001834
 8000f08:	08001838 	.word	0x08001838
 8000f0c:	08001834 	.word	0x08001834

08000f10 <__retarget_lock_acquire_recursive>:
 8000f10:	4770      	bx	lr

08000f12 <__retarget_lock_release_recursive>:
 8000f12:	4770      	bx	lr

08000f14 <_free_r>:
 8000f14:	b570      	push	{r4, r5, r6, lr}
 8000f16:	0005      	movs	r5, r0
 8000f18:	2900      	cmp	r1, #0
 8000f1a:	d010      	beq.n	8000f3e <_free_r+0x2a>
 8000f1c:	1f0c      	subs	r4, r1, #4
 8000f1e:	6823      	ldr	r3, [r4, #0]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	da00      	bge.n	8000f26 <_free_r+0x12>
 8000f24:	18e4      	adds	r4, r4, r3
 8000f26:	0028      	movs	r0, r5
 8000f28:	f000 f8e2 	bl	80010f0 <__malloc_lock>
 8000f2c:	4a1d      	ldr	r2, [pc, #116]	; (8000fa4 <_free_r+0x90>)
 8000f2e:	6813      	ldr	r3, [r2, #0]
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d105      	bne.n	8000f40 <_free_r+0x2c>
 8000f34:	6063      	str	r3, [r4, #4]
 8000f36:	6014      	str	r4, [r2, #0]
 8000f38:	0028      	movs	r0, r5
 8000f3a:	f000 f8e1 	bl	8001100 <__malloc_unlock>
 8000f3e:	bd70      	pop	{r4, r5, r6, pc}
 8000f40:	42a3      	cmp	r3, r4
 8000f42:	d908      	bls.n	8000f56 <_free_r+0x42>
 8000f44:	6820      	ldr	r0, [r4, #0]
 8000f46:	1821      	adds	r1, r4, r0
 8000f48:	428b      	cmp	r3, r1
 8000f4a:	d1f3      	bne.n	8000f34 <_free_r+0x20>
 8000f4c:	6819      	ldr	r1, [r3, #0]
 8000f4e:	685b      	ldr	r3, [r3, #4]
 8000f50:	1809      	adds	r1, r1, r0
 8000f52:	6021      	str	r1, [r4, #0]
 8000f54:	e7ee      	b.n	8000f34 <_free_r+0x20>
 8000f56:	001a      	movs	r2, r3
 8000f58:	685b      	ldr	r3, [r3, #4]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d001      	beq.n	8000f62 <_free_r+0x4e>
 8000f5e:	42a3      	cmp	r3, r4
 8000f60:	d9f9      	bls.n	8000f56 <_free_r+0x42>
 8000f62:	6811      	ldr	r1, [r2, #0]
 8000f64:	1850      	adds	r0, r2, r1
 8000f66:	42a0      	cmp	r0, r4
 8000f68:	d10b      	bne.n	8000f82 <_free_r+0x6e>
 8000f6a:	6820      	ldr	r0, [r4, #0]
 8000f6c:	1809      	adds	r1, r1, r0
 8000f6e:	1850      	adds	r0, r2, r1
 8000f70:	6011      	str	r1, [r2, #0]
 8000f72:	4283      	cmp	r3, r0
 8000f74:	d1e0      	bne.n	8000f38 <_free_r+0x24>
 8000f76:	6818      	ldr	r0, [r3, #0]
 8000f78:	685b      	ldr	r3, [r3, #4]
 8000f7a:	1841      	adds	r1, r0, r1
 8000f7c:	6011      	str	r1, [r2, #0]
 8000f7e:	6053      	str	r3, [r2, #4]
 8000f80:	e7da      	b.n	8000f38 <_free_r+0x24>
 8000f82:	42a0      	cmp	r0, r4
 8000f84:	d902      	bls.n	8000f8c <_free_r+0x78>
 8000f86:	230c      	movs	r3, #12
 8000f88:	602b      	str	r3, [r5, #0]
 8000f8a:	e7d5      	b.n	8000f38 <_free_r+0x24>
 8000f8c:	6820      	ldr	r0, [r4, #0]
 8000f8e:	1821      	adds	r1, r4, r0
 8000f90:	428b      	cmp	r3, r1
 8000f92:	d103      	bne.n	8000f9c <_free_r+0x88>
 8000f94:	6819      	ldr	r1, [r3, #0]
 8000f96:	685b      	ldr	r3, [r3, #4]
 8000f98:	1809      	adds	r1, r1, r0
 8000f9a:	6021      	str	r1, [r4, #0]
 8000f9c:	6063      	str	r3, [r4, #4]
 8000f9e:	6054      	str	r4, [r2, #4]
 8000fa0:	e7ca      	b.n	8000f38 <_free_r+0x24>
 8000fa2:	46c0      	nop			; (mov r8, r8)
 8000fa4:	200001bc 	.word	0x200001bc

08000fa8 <sbrk_aligned>:
 8000fa8:	b570      	push	{r4, r5, r6, lr}
 8000faa:	4e0f      	ldr	r6, [pc, #60]	; (8000fe8 <sbrk_aligned+0x40>)
 8000fac:	000d      	movs	r5, r1
 8000fae:	6831      	ldr	r1, [r6, #0]
 8000fb0:	0004      	movs	r4, r0
 8000fb2:	2900      	cmp	r1, #0
 8000fb4:	d102      	bne.n	8000fbc <sbrk_aligned+0x14>
 8000fb6:	f000 fba1 	bl	80016fc <_sbrk_r>
 8000fba:	6030      	str	r0, [r6, #0]
 8000fbc:	0029      	movs	r1, r5
 8000fbe:	0020      	movs	r0, r4
 8000fc0:	f000 fb9c 	bl	80016fc <_sbrk_r>
 8000fc4:	1c43      	adds	r3, r0, #1
 8000fc6:	d00a      	beq.n	8000fde <sbrk_aligned+0x36>
 8000fc8:	2303      	movs	r3, #3
 8000fca:	1cc5      	adds	r5, r0, #3
 8000fcc:	439d      	bics	r5, r3
 8000fce:	42a8      	cmp	r0, r5
 8000fd0:	d007      	beq.n	8000fe2 <sbrk_aligned+0x3a>
 8000fd2:	1a29      	subs	r1, r5, r0
 8000fd4:	0020      	movs	r0, r4
 8000fd6:	f000 fb91 	bl	80016fc <_sbrk_r>
 8000fda:	3001      	adds	r0, #1
 8000fdc:	d101      	bne.n	8000fe2 <sbrk_aligned+0x3a>
 8000fde:	2501      	movs	r5, #1
 8000fe0:	426d      	negs	r5, r5
 8000fe2:	0028      	movs	r0, r5
 8000fe4:	bd70      	pop	{r4, r5, r6, pc}
 8000fe6:	46c0      	nop			; (mov r8, r8)
 8000fe8:	200001c0 	.word	0x200001c0

08000fec <_malloc_r>:
 8000fec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000fee:	2203      	movs	r2, #3
 8000ff0:	1ccb      	adds	r3, r1, #3
 8000ff2:	4393      	bics	r3, r2
 8000ff4:	3308      	adds	r3, #8
 8000ff6:	0006      	movs	r6, r0
 8000ff8:	001f      	movs	r7, r3
 8000ffa:	2b0c      	cmp	r3, #12
 8000ffc:	d238      	bcs.n	8001070 <_malloc_r+0x84>
 8000ffe:	270c      	movs	r7, #12
 8001000:	42b9      	cmp	r1, r7
 8001002:	d837      	bhi.n	8001074 <_malloc_r+0x88>
 8001004:	0030      	movs	r0, r6
 8001006:	f000 f873 	bl	80010f0 <__malloc_lock>
 800100a:	4b38      	ldr	r3, [pc, #224]	; (80010ec <_malloc_r+0x100>)
 800100c:	9300      	str	r3, [sp, #0]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	001c      	movs	r4, r3
 8001012:	2c00      	cmp	r4, #0
 8001014:	d133      	bne.n	800107e <_malloc_r+0x92>
 8001016:	0039      	movs	r1, r7
 8001018:	0030      	movs	r0, r6
 800101a:	f7ff ffc5 	bl	8000fa8 <sbrk_aligned>
 800101e:	0004      	movs	r4, r0
 8001020:	1c43      	adds	r3, r0, #1
 8001022:	d15e      	bne.n	80010e2 <_malloc_r+0xf6>
 8001024:	9b00      	ldr	r3, [sp, #0]
 8001026:	681c      	ldr	r4, [r3, #0]
 8001028:	0025      	movs	r5, r4
 800102a:	2d00      	cmp	r5, #0
 800102c:	d14e      	bne.n	80010cc <_malloc_r+0xe0>
 800102e:	2c00      	cmp	r4, #0
 8001030:	d051      	beq.n	80010d6 <_malloc_r+0xea>
 8001032:	6823      	ldr	r3, [r4, #0]
 8001034:	0029      	movs	r1, r5
 8001036:	18e3      	adds	r3, r4, r3
 8001038:	0030      	movs	r0, r6
 800103a:	9301      	str	r3, [sp, #4]
 800103c:	f000 fb5e 	bl	80016fc <_sbrk_r>
 8001040:	9b01      	ldr	r3, [sp, #4]
 8001042:	4283      	cmp	r3, r0
 8001044:	d147      	bne.n	80010d6 <_malloc_r+0xea>
 8001046:	6823      	ldr	r3, [r4, #0]
 8001048:	0030      	movs	r0, r6
 800104a:	1aff      	subs	r7, r7, r3
 800104c:	0039      	movs	r1, r7
 800104e:	f7ff ffab 	bl	8000fa8 <sbrk_aligned>
 8001052:	3001      	adds	r0, #1
 8001054:	d03f      	beq.n	80010d6 <_malloc_r+0xea>
 8001056:	6823      	ldr	r3, [r4, #0]
 8001058:	19db      	adds	r3, r3, r7
 800105a:	6023      	str	r3, [r4, #0]
 800105c:	9b00      	ldr	r3, [sp, #0]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	2b00      	cmp	r3, #0
 8001062:	d040      	beq.n	80010e6 <_malloc_r+0xfa>
 8001064:	685a      	ldr	r2, [r3, #4]
 8001066:	42a2      	cmp	r2, r4
 8001068:	d133      	bne.n	80010d2 <_malloc_r+0xe6>
 800106a:	2200      	movs	r2, #0
 800106c:	605a      	str	r2, [r3, #4]
 800106e:	e014      	b.n	800109a <_malloc_r+0xae>
 8001070:	2b00      	cmp	r3, #0
 8001072:	dac5      	bge.n	8001000 <_malloc_r+0x14>
 8001074:	230c      	movs	r3, #12
 8001076:	2500      	movs	r5, #0
 8001078:	6033      	str	r3, [r6, #0]
 800107a:	0028      	movs	r0, r5
 800107c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800107e:	6821      	ldr	r1, [r4, #0]
 8001080:	1bc9      	subs	r1, r1, r7
 8001082:	d420      	bmi.n	80010c6 <_malloc_r+0xda>
 8001084:	290b      	cmp	r1, #11
 8001086:	d918      	bls.n	80010ba <_malloc_r+0xce>
 8001088:	19e2      	adds	r2, r4, r7
 800108a:	6027      	str	r7, [r4, #0]
 800108c:	42a3      	cmp	r3, r4
 800108e:	d112      	bne.n	80010b6 <_malloc_r+0xca>
 8001090:	9b00      	ldr	r3, [sp, #0]
 8001092:	601a      	str	r2, [r3, #0]
 8001094:	6863      	ldr	r3, [r4, #4]
 8001096:	6011      	str	r1, [r2, #0]
 8001098:	6053      	str	r3, [r2, #4]
 800109a:	0030      	movs	r0, r6
 800109c:	0025      	movs	r5, r4
 800109e:	f000 f82f 	bl	8001100 <__malloc_unlock>
 80010a2:	2207      	movs	r2, #7
 80010a4:	350b      	adds	r5, #11
 80010a6:	1d23      	adds	r3, r4, #4
 80010a8:	4395      	bics	r5, r2
 80010aa:	1aea      	subs	r2, r5, r3
 80010ac:	429d      	cmp	r5, r3
 80010ae:	d0e4      	beq.n	800107a <_malloc_r+0x8e>
 80010b0:	1b5b      	subs	r3, r3, r5
 80010b2:	50a3      	str	r3, [r4, r2]
 80010b4:	e7e1      	b.n	800107a <_malloc_r+0x8e>
 80010b6:	605a      	str	r2, [r3, #4]
 80010b8:	e7ec      	b.n	8001094 <_malloc_r+0xa8>
 80010ba:	6862      	ldr	r2, [r4, #4]
 80010bc:	42a3      	cmp	r3, r4
 80010be:	d1d5      	bne.n	800106c <_malloc_r+0x80>
 80010c0:	9b00      	ldr	r3, [sp, #0]
 80010c2:	601a      	str	r2, [r3, #0]
 80010c4:	e7e9      	b.n	800109a <_malloc_r+0xae>
 80010c6:	0023      	movs	r3, r4
 80010c8:	6864      	ldr	r4, [r4, #4]
 80010ca:	e7a2      	b.n	8001012 <_malloc_r+0x26>
 80010cc:	002c      	movs	r4, r5
 80010ce:	686d      	ldr	r5, [r5, #4]
 80010d0:	e7ab      	b.n	800102a <_malloc_r+0x3e>
 80010d2:	0013      	movs	r3, r2
 80010d4:	e7c4      	b.n	8001060 <_malloc_r+0x74>
 80010d6:	230c      	movs	r3, #12
 80010d8:	0030      	movs	r0, r6
 80010da:	6033      	str	r3, [r6, #0]
 80010dc:	f000 f810 	bl	8001100 <__malloc_unlock>
 80010e0:	e7cb      	b.n	800107a <_malloc_r+0x8e>
 80010e2:	6027      	str	r7, [r4, #0]
 80010e4:	e7d9      	b.n	800109a <_malloc_r+0xae>
 80010e6:	605b      	str	r3, [r3, #4]
 80010e8:	deff      	udf	#255	; 0xff
 80010ea:	46c0      	nop			; (mov r8, r8)
 80010ec:	200001bc 	.word	0x200001bc

080010f0 <__malloc_lock>:
 80010f0:	b510      	push	{r4, lr}
 80010f2:	4802      	ldr	r0, [pc, #8]	; (80010fc <__malloc_lock+0xc>)
 80010f4:	f7ff ff0c 	bl	8000f10 <__retarget_lock_acquire_recursive>
 80010f8:	bd10      	pop	{r4, pc}
 80010fa:	46c0      	nop			; (mov r8, r8)
 80010fc:	200001b8 	.word	0x200001b8

08001100 <__malloc_unlock>:
 8001100:	b510      	push	{r4, lr}
 8001102:	4802      	ldr	r0, [pc, #8]	; (800110c <__malloc_unlock+0xc>)
 8001104:	f7ff ff05 	bl	8000f12 <__retarget_lock_release_recursive>
 8001108:	bd10      	pop	{r4, pc}
 800110a:	46c0      	nop			; (mov r8, r8)
 800110c:	200001b8 	.word	0x200001b8

08001110 <__ssputs_r>:
 8001110:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001112:	b085      	sub	sp, #20
 8001114:	9301      	str	r3, [sp, #4]
 8001116:	9203      	str	r2, [sp, #12]
 8001118:	688e      	ldr	r6, [r1, #8]
 800111a:	9a01      	ldr	r2, [sp, #4]
 800111c:	0007      	movs	r7, r0
 800111e:	000c      	movs	r4, r1
 8001120:	680b      	ldr	r3, [r1, #0]
 8001122:	4296      	cmp	r6, r2
 8001124:	d831      	bhi.n	800118a <__ssputs_r+0x7a>
 8001126:	898a      	ldrh	r2, [r1, #12]
 8001128:	2190      	movs	r1, #144	; 0x90
 800112a:	00c9      	lsls	r1, r1, #3
 800112c:	420a      	tst	r2, r1
 800112e:	d029      	beq.n	8001184 <__ssputs_r+0x74>
 8001130:	2003      	movs	r0, #3
 8001132:	6921      	ldr	r1, [r4, #16]
 8001134:	1a5b      	subs	r3, r3, r1
 8001136:	9302      	str	r3, [sp, #8]
 8001138:	6963      	ldr	r3, [r4, #20]
 800113a:	4343      	muls	r3, r0
 800113c:	0fdd      	lsrs	r5, r3, #31
 800113e:	18ed      	adds	r5, r5, r3
 8001140:	9b01      	ldr	r3, [sp, #4]
 8001142:	9802      	ldr	r0, [sp, #8]
 8001144:	3301      	adds	r3, #1
 8001146:	181b      	adds	r3, r3, r0
 8001148:	106d      	asrs	r5, r5, #1
 800114a:	42ab      	cmp	r3, r5
 800114c:	d900      	bls.n	8001150 <__ssputs_r+0x40>
 800114e:	001d      	movs	r5, r3
 8001150:	0552      	lsls	r2, r2, #21
 8001152:	d529      	bpl.n	80011a8 <__ssputs_r+0x98>
 8001154:	0029      	movs	r1, r5
 8001156:	0038      	movs	r0, r7
 8001158:	f7ff ff48 	bl	8000fec <_malloc_r>
 800115c:	1e06      	subs	r6, r0, #0
 800115e:	d02d      	beq.n	80011bc <__ssputs_r+0xac>
 8001160:	9a02      	ldr	r2, [sp, #8]
 8001162:	6921      	ldr	r1, [r4, #16]
 8001164:	f000 fae7 	bl	8001736 <memcpy>
 8001168:	89a2      	ldrh	r2, [r4, #12]
 800116a:	4b19      	ldr	r3, [pc, #100]	; (80011d0 <__ssputs_r+0xc0>)
 800116c:	401a      	ands	r2, r3
 800116e:	2380      	movs	r3, #128	; 0x80
 8001170:	4313      	orrs	r3, r2
 8001172:	81a3      	strh	r3, [r4, #12]
 8001174:	9b02      	ldr	r3, [sp, #8]
 8001176:	6126      	str	r6, [r4, #16]
 8001178:	18f6      	adds	r6, r6, r3
 800117a:	6026      	str	r6, [r4, #0]
 800117c:	6165      	str	r5, [r4, #20]
 800117e:	9e01      	ldr	r6, [sp, #4]
 8001180:	1aed      	subs	r5, r5, r3
 8001182:	60a5      	str	r5, [r4, #8]
 8001184:	9b01      	ldr	r3, [sp, #4]
 8001186:	429e      	cmp	r6, r3
 8001188:	d900      	bls.n	800118c <__ssputs_r+0x7c>
 800118a:	9e01      	ldr	r6, [sp, #4]
 800118c:	0032      	movs	r2, r6
 800118e:	9903      	ldr	r1, [sp, #12]
 8001190:	6820      	ldr	r0, [r4, #0]
 8001192:	f000 fa9f 	bl	80016d4 <memmove>
 8001196:	2000      	movs	r0, #0
 8001198:	68a3      	ldr	r3, [r4, #8]
 800119a:	1b9b      	subs	r3, r3, r6
 800119c:	60a3      	str	r3, [r4, #8]
 800119e:	6823      	ldr	r3, [r4, #0]
 80011a0:	199b      	adds	r3, r3, r6
 80011a2:	6023      	str	r3, [r4, #0]
 80011a4:	b005      	add	sp, #20
 80011a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011a8:	002a      	movs	r2, r5
 80011aa:	0038      	movs	r0, r7
 80011ac:	f000 facc 	bl	8001748 <_realloc_r>
 80011b0:	1e06      	subs	r6, r0, #0
 80011b2:	d1df      	bne.n	8001174 <__ssputs_r+0x64>
 80011b4:	0038      	movs	r0, r7
 80011b6:	6921      	ldr	r1, [r4, #16]
 80011b8:	f7ff feac 	bl	8000f14 <_free_r>
 80011bc:	230c      	movs	r3, #12
 80011be:	2001      	movs	r0, #1
 80011c0:	603b      	str	r3, [r7, #0]
 80011c2:	89a2      	ldrh	r2, [r4, #12]
 80011c4:	3334      	adds	r3, #52	; 0x34
 80011c6:	4313      	orrs	r3, r2
 80011c8:	81a3      	strh	r3, [r4, #12]
 80011ca:	4240      	negs	r0, r0
 80011cc:	e7ea      	b.n	80011a4 <__ssputs_r+0x94>
 80011ce:	46c0      	nop			; (mov r8, r8)
 80011d0:	fffffb7f 	.word	0xfffffb7f

080011d4 <_svfiprintf_r>:
 80011d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011d6:	b0a1      	sub	sp, #132	; 0x84
 80011d8:	9003      	str	r0, [sp, #12]
 80011da:	001d      	movs	r5, r3
 80011dc:	898b      	ldrh	r3, [r1, #12]
 80011de:	000f      	movs	r7, r1
 80011e0:	0016      	movs	r6, r2
 80011e2:	061b      	lsls	r3, r3, #24
 80011e4:	d511      	bpl.n	800120a <_svfiprintf_r+0x36>
 80011e6:	690b      	ldr	r3, [r1, #16]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d10e      	bne.n	800120a <_svfiprintf_r+0x36>
 80011ec:	2140      	movs	r1, #64	; 0x40
 80011ee:	f7ff fefd 	bl	8000fec <_malloc_r>
 80011f2:	6038      	str	r0, [r7, #0]
 80011f4:	6138      	str	r0, [r7, #16]
 80011f6:	2800      	cmp	r0, #0
 80011f8:	d105      	bne.n	8001206 <_svfiprintf_r+0x32>
 80011fa:	230c      	movs	r3, #12
 80011fc:	9a03      	ldr	r2, [sp, #12]
 80011fe:	3801      	subs	r0, #1
 8001200:	6013      	str	r3, [r2, #0]
 8001202:	b021      	add	sp, #132	; 0x84
 8001204:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001206:	2340      	movs	r3, #64	; 0x40
 8001208:	617b      	str	r3, [r7, #20]
 800120a:	2300      	movs	r3, #0
 800120c:	ac08      	add	r4, sp, #32
 800120e:	6163      	str	r3, [r4, #20]
 8001210:	3320      	adds	r3, #32
 8001212:	7663      	strb	r3, [r4, #25]
 8001214:	3310      	adds	r3, #16
 8001216:	76a3      	strb	r3, [r4, #26]
 8001218:	9507      	str	r5, [sp, #28]
 800121a:	0035      	movs	r5, r6
 800121c:	782b      	ldrb	r3, [r5, #0]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d001      	beq.n	8001226 <_svfiprintf_r+0x52>
 8001222:	2b25      	cmp	r3, #37	; 0x25
 8001224:	d148      	bne.n	80012b8 <_svfiprintf_r+0xe4>
 8001226:	1bab      	subs	r3, r5, r6
 8001228:	9305      	str	r3, [sp, #20]
 800122a:	42b5      	cmp	r5, r6
 800122c:	d00b      	beq.n	8001246 <_svfiprintf_r+0x72>
 800122e:	0032      	movs	r2, r6
 8001230:	0039      	movs	r1, r7
 8001232:	9803      	ldr	r0, [sp, #12]
 8001234:	f7ff ff6c 	bl	8001110 <__ssputs_r>
 8001238:	3001      	adds	r0, #1
 800123a:	d100      	bne.n	800123e <_svfiprintf_r+0x6a>
 800123c:	e0af      	b.n	800139e <_svfiprintf_r+0x1ca>
 800123e:	6963      	ldr	r3, [r4, #20]
 8001240:	9a05      	ldr	r2, [sp, #20]
 8001242:	189b      	adds	r3, r3, r2
 8001244:	6163      	str	r3, [r4, #20]
 8001246:	782b      	ldrb	r3, [r5, #0]
 8001248:	2b00      	cmp	r3, #0
 800124a:	d100      	bne.n	800124e <_svfiprintf_r+0x7a>
 800124c:	e0a7      	b.n	800139e <_svfiprintf_r+0x1ca>
 800124e:	2201      	movs	r2, #1
 8001250:	2300      	movs	r3, #0
 8001252:	4252      	negs	r2, r2
 8001254:	6062      	str	r2, [r4, #4]
 8001256:	a904      	add	r1, sp, #16
 8001258:	3254      	adds	r2, #84	; 0x54
 800125a:	1852      	adds	r2, r2, r1
 800125c:	1c6e      	adds	r6, r5, #1
 800125e:	6023      	str	r3, [r4, #0]
 8001260:	60e3      	str	r3, [r4, #12]
 8001262:	60a3      	str	r3, [r4, #8]
 8001264:	7013      	strb	r3, [r2, #0]
 8001266:	65a3      	str	r3, [r4, #88]	; 0x58
 8001268:	4b55      	ldr	r3, [pc, #340]	; (80013c0 <_svfiprintf_r+0x1ec>)
 800126a:	2205      	movs	r2, #5
 800126c:	0018      	movs	r0, r3
 800126e:	7831      	ldrb	r1, [r6, #0]
 8001270:	9305      	str	r3, [sp, #20]
 8001272:	f000 fa55 	bl	8001720 <memchr>
 8001276:	1c75      	adds	r5, r6, #1
 8001278:	2800      	cmp	r0, #0
 800127a:	d11f      	bne.n	80012bc <_svfiprintf_r+0xe8>
 800127c:	6822      	ldr	r2, [r4, #0]
 800127e:	06d3      	lsls	r3, r2, #27
 8001280:	d504      	bpl.n	800128c <_svfiprintf_r+0xb8>
 8001282:	2353      	movs	r3, #83	; 0x53
 8001284:	a904      	add	r1, sp, #16
 8001286:	185b      	adds	r3, r3, r1
 8001288:	2120      	movs	r1, #32
 800128a:	7019      	strb	r1, [r3, #0]
 800128c:	0713      	lsls	r3, r2, #28
 800128e:	d504      	bpl.n	800129a <_svfiprintf_r+0xc6>
 8001290:	2353      	movs	r3, #83	; 0x53
 8001292:	a904      	add	r1, sp, #16
 8001294:	185b      	adds	r3, r3, r1
 8001296:	212b      	movs	r1, #43	; 0x2b
 8001298:	7019      	strb	r1, [r3, #0]
 800129a:	7833      	ldrb	r3, [r6, #0]
 800129c:	2b2a      	cmp	r3, #42	; 0x2a
 800129e:	d016      	beq.n	80012ce <_svfiprintf_r+0xfa>
 80012a0:	0035      	movs	r5, r6
 80012a2:	2100      	movs	r1, #0
 80012a4:	200a      	movs	r0, #10
 80012a6:	68e3      	ldr	r3, [r4, #12]
 80012a8:	782a      	ldrb	r2, [r5, #0]
 80012aa:	1c6e      	adds	r6, r5, #1
 80012ac:	3a30      	subs	r2, #48	; 0x30
 80012ae:	2a09      	cmp	r2, #9
 80012b0:	d94e      	bls.n	8001350 <_svfiprintf_r+0x17c>
 80012b2:	2900      	cmp	r1, #0
 80012b4:	d111      	bne.n	80012da <_svfiprintf_r+0x106>
 80012b6:	e017      	b.n	80012e8 <_svfiprintf_r+0x114>
 80012b8:	3501      	adds	r5, #1
 80012ba:	e7af      	b.n	800121c <_svfiprintf_r+0x48>
 80012bc:	9b05      	ldr	r3, [sp, #20]
 80012be:	6822      	ldr	r2, [r4, #0]
 80012c0:	1ac0      	subs	r0, r0, r3
 80012c2:	2301      	movs	r3, #1
 80012c4:	4083      	lsls	r3, r0
 80012c6:	4313      	orrs	r3, r2
 80012c8:	002e      	movs	r6, r5
 80012ca:	6023      	str	r3, [r4, #0]
 80012cc:	e7cc      	b.n	8001268 <_svfiprintf_r+0x94>
 80012ce:	9b07      	ldr	r3, [sp, #28]
 80012d0:	1d19      	adds	r1, r3, #4
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	9107      	str	r1, [sp, #28]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	db01      	blt.n	80012de <_svfiprintf_r+0x10a>
 80012da:	930b      	str	r3, [sp, #44]	; 0x2c
 80012dc:	e004      	b.n	80012e8 <_svfiprintf_r+0x114>
 80012de:	425b      	negs	r3, r3
 80012e0:	60e3      	str	r3, [r4, #12]
 80012e2:	2302      	movs	r3, #2
 80012e4:	4313      	orrs	r3, r2
 80012e6:	6023      	str	r3, [r4, #0]
 80012e8:	782b      	ldrb	r3, [r5, #0]
 80012ea:	2b2e      	cmp	r3, #46	; 0x2e
 80012ec:	d10a      	bne.n	8001304 <_svfiprintf_r+0x130>
 80012ee:	786b      	ldrb	r3, [r5, #1]
 80012f0:	2b2a      	cmp	r3, #42	; 0x2a
 80012f2:	d135      	bne.n	8001360 <_svfiprintf_r+0x18c>
 80012f4:	9b07      	ldr	r3, [sp, #28]
 80012f6:	3502      	adds	r5, #2
 80012f8:	1d1a      	adds	r2, r3, #4
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	9207      	str	r2, [sp, #28]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	db2b      	blt.n	800135a <_svfiprintf_r+0x186>
 8001302:	9309      	str	r3, [sp, #36]	; 0x24
 8001304:	4e2f      	ldr	r6, [pc, #188]	; (80013c4 <_svfiprintf_r+0x1f0>)
 8001306:	2203      	movs	r2, #3
 8001308:	0030      	movs	r0, r6
 800130a:	7829      	ldrb	r1, [r5, #0]
 800130c:	f000 fa08 	bl	8001720 <memchr>
 8001310:	2800      	cmp	r0, #0
 8001312:	d006      	beq.n	8001322 <_svfiprintf_r+0x14e>
 8001314:	2340      	movs	r3, #64	; 0x40
 8001316:	1b80      	subs	r0, r0, r6
 8001318:	4083      	lsls	r3, r0
 800131a:	6822      	ldr	r2, [r4, #0]
 800131c:	3501      	adds	r5, #1
 800131e:	4313      	orrs	r3, r2
 8001320:	6023      	str	r3, [r4, #0]
 8001322:	7829      	ldrb	r1, [r5, #0]
 8001324:	2206      	movs	r2, #6
 8001326:	4828      	ldr	r0, [pc, #160]	; (80013c8 <_svfiprintf_r+0x1f4>)
 8001328:	1c6e      	adds	r6, r5, #1
 800132a:	7621      	strb	r1, [r4, #24]
 800132c:	f000 f9f8 	bl	8001720 <memchr>
 8001330:	2800      	cmp	r0, #0
 8001332:	d03c      	beq.n	80013ae <_svfiprintf_r+0x1da>
 8001334:	4b25      	ldr	r3, [pc, #148]	; (80013cc <_svfiprintf_r+0x1f8>)
 8001336:	2b00      	cmp	r3, #0
 8001338:	d125      	bne.n	8001386 <_svfiprintf_r+0x1b2>
 800133a:	2207      	movs	r2, #7
 800133c:	9b07      	ldr	r3, [sp, #28]
 800133e:	3307      	adds	r3, #7
 8001340:	4393      	bics	r3, r2
 8001342:	3308      	adds	r3, #8
 8001344:	9307      	str	r3, [sp, #28]
 8001346:	6963      	ldr	r3, [r4, #20]
 8001348:	9a04      	ldr	r2, [sp, #16]
 800134a:	189b      	adds	r3, r3, r2
 800134c:	6163      	str	r3, [r4, #20]
 800134e:	e764      	b.n	800121a <_svfiprintf_r+0x46>
 8001350:	4343      	muls	r3, r0
 8001352:	0035      	movs	r5, r6
 8001354:	2101      	movs	r1, #1
 8001356:	189b      	adds	r3, r3, r2
 8001358:	e7a6      	b.n	80012a8 <_svfiprintf_r+0xd4>
 800135a:	2301      	movs	r3, #1
 800135c:	425b      	negs	r3, r3
 800135e:	e7d0      	b.n	8001302 <_svfiprintf_r+0x12e>
 8001360:	2300      	movs	r3, #0
 8001362:	200a      	movs	r0, #10
 8001364:	001a      	movs	r2, r3
 8001366:	3501      	adds	r5, #1
 8001368:	6063      	str	r3, [r4, #4]
 800136a:	7829      	ldrb	r1, [r5, #0]
 800136c:	1c6e      	adds	r6, r5, #1
 800136e:	3930      	subs	r1, #48	; 0x30
 8001370:	2909      	cmp	r1, #9
 8001372:	d903      	bls.n	800137c <_svfiprintf_r+0x1a8>
 8001374:	2b00      	cmp	r3, #0
 8001376:	d0c5      	beq.n	8001304 <_svfiprintf_r+0x130>
 8001378:	9209      	str	r2, [sp, #36]	; 0x24
 800137a:	e7c3      	b.n	8001304 <_svfiprintf_r+0x130>
 800137c:	4342      	muls	r2, r0
 800137e:	0035      	movs	r5, r6
 8001380:	2301      	movs	r3, #1
 8001382:	1852      	adds	r2, r2, r1
 8001384:	e7f1      	b.n	800136a <_svfiprintf_r+0x196>
 8001386:	aa07      	add	r2, sp, #28
 8001388:	9200      	str	r2, [sp, #0]
 800138a:	0021      	movs	r1, r4
 800138c:	003a      	movs	r2, r7
 800138e:	4b10      	ldr	r3, [pc, #64]	; (80013d0 <_svfiprintf_r+0x1fc>)
 8001390:	9803      	ldr	r0, [sp, #12]
 8001392:	e000      	b.n	8001396 <_svfiprintf_r+0x1c2>
 8001394:	bf00      	nop
 8001396:	9004      	str	r0, [sp, #16]
 8001398:	9b04      	ldr	r3, [sp, #16]
 800139a:	3301      	adds	r3, #1
 800139c:	d1d3      	bne.n	8001346 <_svfiprintf_r+0x172>
 800139e:	89bb      	ldrh	r3, [r7, #12]
 80013a0:	980d      	ldr	r0, [sp, #52]	; 0x34
 80013a2:	065b      	lsls	r3, r3, #25
 80013a4:	d400      	bmi.n	80013a8 <_svfiprintf_r+0x1d4>
 80013a6:	e72c      	b.n	8001202 <_svfiprintf_r+0x2e>
 80013a8:	2001      	movs	r0, #1
 80013aa:	4240      	negs	r0, r0
 80013ac:	e729      	b.n	8001202 <_svfiprintf_r+0x2e>
 80013ae:	aa07      	add	r2, sp, #28
 80013b0:	9200      	str	r2, [sp, #0]
 80013b2:	0021      	movs	r1, r4
 80013b4:	003a      	movs	r2, r7
 80013b6:	4b06      	ldr	r3, [pc, #24]	; (80013d0 <_svfiprintf_r+0x1fc>)
 80013b8:	9803      	ldr	r0, [sp, #12]
 80013ba:	f000 f87b 	bl	80014b4 <_printf_i>
 80013be:	e7ea      	b.n	8001396 <_svfiprintf_r+0x1c2>
 80013c0:	08001800 	.word	0x08001800
 80013c4:	08001806 	.word	0x08001806
 80013c8:	0800180a 	.word	0x0800180a
 80013cc:	00000000 	.word	0x00000000
 80013d0:	08001111 	.word	0x08001111

080013d4 <_printf_common>:
 80013d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80013d6:	0016      	movs	r6, r2
 80013d8:	9301      	str	r3, [sp, #4]
 80013da:	688a      	ldr	r2, [r1, #8]
 80013dc:	690b      	ldr	r3, [r1, #16]
 80013de:	000c      	movs	r4, r1
 80013e0:	9000      	str	r0, [sp, #0]
 80013e2:	4293      	cmp	r3, r2
 80013e4:	da00      	bge.n	80013e8 <_printf_common+0x14>
 80013e6:	0013      	movs	r3, r2
 80013e8:	0022      	movs	r2, r4
 80013ea:	6033      	str	r3, [r6, #0]
 80013ec:	3243      	adds	r2, #67	; 0x43
 80013ee:	7812      	ldrb	r2, [r2, #0]
 80013f0:	2a00      	cmp	r2, #0
 80013f2:	d001      	beq.n	80013f8 <_printf_common+0x24>
 80013f4:	3301      	adds	r3, #1
 80013f6:	6033      	str	r3, [r6, #0]
 80013f8:	6823      	ldr	r3, [r4, #0]
 80013fa:	069b      	lsls	r3, r3, #26
 80013fc:	d502      	bpl.n	8001404 <_printf_common+0x30>
 80013fe:	6833      	ldr	r3, [r6, #0]
 8001400:	3302      	adds	r3, #2
 8001402:	6033      	str	r3, [r6, #0]
 8001404:	6822      	ldr	r2, [r4, #0]
 8001406:	2306      	movs	r3, #6
 8001408:	0015      	movs	r5, r2
 800140a:	401d      	ands	r5, r3
 800140c:	421a      	tst	r2, r3
 800140e:	d027      	beq.n	8001460 <_printf_common+0x8c>
 8001410:	0023      	movs	r3, r4
 8001412:	3343      	adds	r3, #67	; 0x43
 8001414:	781b      	ldrb	r3, [r3, #0]
 8001416:	1e5a      	subs	r2, r3, #1
 8001418:	4193      	sbcs	r3, r2
 800141a:	6822      	ldr	r2, [r4, #0]
 800141c:	0692      	lsls	r2, r2, #26
 800141e:	d430      	bmi.n	8001482 <_printf_common+0xae>
 8001420:	0022      	movs	r2, r4
 8001422:	9901      	ldr	r1, [sp, #4]
 8001424:	9800      	ldr	r0, [sp, #0]
 8001426:	9d08      	ldr	r5, [sp, #32]
 8001428:	3243      	adds	r2, #67	; 0x43
 800142a:	47a8      	blx	r5
 800142c:	3001      	adds	r0, #1
 800142e:	d025      	beq.n	800147c <_printf_common+0xa8>
 8001430:	2206      	movs	r2, #6
 8001432:	6823      	ldr	r3, [r4, #0]
 8001434:	2500      	movs	r5, #0
 8001436:	4013      	ands	r3, r2
 8001438:	2b04      	cmp	r3, #4
 800143a:	d105      	bne.n	8001448 <_printf_common+0x74>
 800143c:	6833      	ldr	r3, [r6, #0]
 800143e:	68e5      	ldr	r5, [r4, #12]
 8001440:	1aed      	subs	r5, r5, r3
 8001442:	43eb      	mvns	r3, r5
 8001444:	17db      	asrs	r3, r3, #31
 8001446:	401d      	ands	r5, r3
 8001448:	68a3      	ldr	r3, [r4, #8]
 800144a:	6922      	ldr	r2, [r4, #16]
 800144c:	4293      	cmp	r3, r2
 800144e:	dd01      	ble.n	8001454 <_printf_common+0x80>
 8001450:	1a9b      	subs	r3, r3, r2
 8001452:	18ed      	adds	r5, r5, r3
 8001454:	2600      	movs	r6, #0
 8001456:	42b5      	cmp	r5, r6
 8001458:	d120      	bne.n	800149c <_printf_common+0xc8>
 800145a:	2000      	movs	r0, #0
 800145c:	e010      	b.n	8001480 <_printf_common+0xac>
 800145e:	3501      	adds	r5, #1
 8001460:	68e3      	ldr	r3, [r4, #12]
 8001462:	6832      	ldr	r2, [r6, #0]
 8001464:	1a9b      	subs	r3, r3, r2
 8001466:	42ab      	cmp	r3, r5
 8001468:	ddd2      	ble.n	8001410 <_printf_common+0x3c>
 800146a:	0022      	movs	r2, r4
 800146c:	2301      	movs	r3, #1
 800146e:	9901      	ldr	r1, [sp, #4]
 8001470:	9800      	ldr	r0, [sp, #0]
 8001472:	9f08      	ldr	r7, [sp, #32]
 8001474:	3219      	adds	r2, #25
 8001476:	47b8      	blx	r7
 8001478:	3001      	adds	r0, #1
 800147a:	d1f0      	bne.n	800145e <_printf_common+0x8a>
 800147c:	2001      	movs	r0, #1
 800147e:	4240      	negs	r0, r0
 8001480:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8001482:	2030      	movs	r0, #48	; 0x30
 8001484:	18e1      	adds	r1, r4, r3
 8001486:	3143      	adds	r1, #67	; 0x43
 8001488:	7008      	strb	r0, [r1, #0]
 800148a:	0021      	movs	r1, r4
 800148c:	1c5a      	adds	r2, r3, #1
 800148e:	3145      	adds	r1, #69	; 0x45
 8001490:	7809      	ldrb	r1, [r1, #0]
 8001492:	18a2      	adds	r2, r4, r2
 8001494:	3243      	adds	r2, #67	; 0x43
 8001496:	3302      	adds	r3, #2
 8001498:	7011      	strb	r1, [r2, #0]
 800149a:	e7c1      	b.n	8001420 <_printf_common+0x4c>
 800149c:	0022      	movs	r2, r4
 800149e:	2301      	movs	r3, #1
 80014a0:	9901      	ldr	r1, [sp, #4]
 80014a2:	9800      	ldr	r0, [sp, #0]
 80014a4:	9f08      	ldr	r7, [sp, #32]
 80014a6:	321a      	adds	r2, #26
 80014a8:	47b8      	blx	r7
 80014aa:	3001      	adds	r0, #1
 80014ac:	d0e6      	beq.n	800147c <_printf_common+0xa8>
 80014ae:	3601      	adds	r6, #1
 80014b0:	e7d1      	b.n	8001456 <_printf_common+0x82>
	...

080014b4 <_printf_i>:
 80014b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014b6:	b08b      	sub	sp, #44	; 0x2c
 80014b8:	9206      	str	r2, [sp, #24]
 80014ba:	000a      	movs	r2, r1
 80014bc:	3243      	adds	r2, #67	; 0x43
 80014be:	9307      	str	r3, [sp, #28]
 80014c0:	9005      	str	r0, [sp, #20]
 80014c2:	9204      	str	r2, [sp, #16]
 80014c4:	7e0a      	ldrb	r2, [r1, #24]
 80014c6:	000c      	movs	r4, r1
 80014c8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80014ca:	2a78      	cmp	r2, #120	; 0x78
 80014cc:	d809      	bhi.n	80014e2 <_printf_i+0x2e>
 80014ce:	2a62      	cmp	r2, #98	; 0x62
 80014d0:	d80b      	bhi.n	80014ea <_printf_i+0x36>
 80014d2:	2a00      	cmp	r2, #0
 80014d4:	d100      	bne.n	80014d8 <_printf_i+0x24>
 80014d6:	e0be      	b.n	8001656 <_printf_i+0x1a2>
 80014d8:	497c      	ldr	r1, [pc, #496]	; (80016cc <_printf_i+0x218>)
 80014da:	9103      	str	r1, [sp, #12]
 80014dc:	2a58      	cmp	r2, #88	; 0x58
 80014de:	d100      	bne.n	80014e2 <_printf_i+0x2e>
 80014e0:	e093      	b.n	800160a <_printf_i+0x156>
 80014e2:	0026      	movs	r6, r4
 80014e4:	3642      	adds	r6, #66	; 0x42
 80014e6:	7032      	strb	r2, [r6, #0]
 80014e8:	e022      	b.n	8001530 <_printf_i+0x7c>
 80014ea:	0010      	movs	r0, r2
 80014ec:	3863      	subs	r0, #99	; 0x63
 80014ee:	2815      	cmp	r0, #21
 80014f0:	d8f7      	bhi.n	80014e2 <_printf_i+0x2e>
 80014f2:	f7fe fe07 	bl	8000104 <__gnu_thumb1_case_shi>
 80014f6:	0016      	.short	0x0016
 80014f8:	fff6001f 	.word	0xfff6001f
 80014fc:	fff6fff6 	.word	0xfff6fff6
 8001500:	001ffff6 	.word	0x001ffff6
 8001504:	fff6fff6 	.word	0xfff6fff6
 8001508:	fff6fff6 	.word	0xfff6fff6
 800150c:	003600a3 	.word	0x003600a3
 8001510:	fff60083 	.word	0xfff60083
 8001514:	00b4fff6 	.word	0x00b4fff6
 8001518:	0036fff6 	.word	0x0036fff6
 800151c:	fff6fff6 	.word	0xfff6fff6
 8001520:	0087      	.short	0x0087
 8001522:	0026      	movs	r6, r4
 8001524:	681a      	ldr	r2, [r3, #0]
 8001526:	3642      	adds	r6, #66	; 0x42
 8001528:	1d11      	adds	r1, r2, #4
 800152a:	6019      	str	r1, [r3, #0]
 800152c:	6813      	ldr	r3, [r2, #0]
 800152e:	7033      	strb	r3, [r6, #0]
 8001530:	2301      	movs	r3, #1
 8001532:	e0a2      	b.n	800167a <_printf_i+0x1c6>
 8001534:	6818      	ldr	r0, [r3, #0]
 8001536:	6809      	ldr	r1, [r1, #0]
 8001538:	1d02      	adds	r2, r0, #4
 800153a:	060d      	lsls	r5, r1, #24
 800153c:	d50b      	bpl.n	8001556 <_printf_i+0xa2>
 800153e:	6805      	ldr	r5, [r0, #0]
 8001540:	601a      	str	r2, [r3, #0]
 8001542:	2d00      	cmp	r5, #0
 8001544:	da03      	bge.n	800154e <_printf_i+0x9a>
 8001546:	232d      	movs	r3, #45	; 0x2d
 8001548:	9a04      	ldr	r2, [sp, #16]
 800154a:	426d      	negs	r5, r5
 800154c:	7013      	strb	r3, [r2, #0]
 800154e:	4b5f      	ldr	r3, [pc, #380]	; (80016cc <_printf_i+0x218>)
 8001550:	270a      	movs	r7, #10
 8001552:	9303      	str	r3, [sp, #12]
 8001554:	e01b      	b.n	800158e <_printf_i+0xda>
 8001556:	6805      	ldr	r5, [r0, #0]
 8001558:	601a      	str	r2, [r3, #0]
 800155a:	0649      	lsls	r1, r1, #25
 800155c:	d5f1      	bpl.n	8001542 <_printf_i+0x8e>
 800155e:	b22d      	sxth	r5, r5
 8001560:	e7ef      	b.n	8001542 <_printf_i+0x8e>
 8001562:	680d      	ldr	r5, [r1, #0]
 8001564:	6819      	ldr	r1, [r3, #0]
 8001566:	1d08      	adds	r0, r1, #4
 8001568:	6018      	str	r0, [r3, #0]
 800156a:	062e      	lsls	r6, r5, #24
 800156c:	d501      	bpl.n	8001572 <_printf_i+0xbe>
 800156e:	680d      	ldr	r5, [r1, #0]
 8001570:	e003      	b.n	800157a <_printf_i+0xc6>
 8001572:	066d      	lsls	r5, r5, #25
 8001574:	d5fb      	bpl.n	800156e <_printf_i+0xba>
 8001576:	680d      	ldr	r5, [r1, #0]
 8001578:	b2ad      	uxth	r5, r5
 800157a:	4b54      	ldr	r3, [pc, #336]	; (80016cc <_printf_i+0x218>)
 800157c:	2708      	movs	r7, #8
 800157e:	9303      	str	r3, [sp, #12]
 8001580:	2a6f      	cmp	r2, #111	; 0x6f
 8001582:	d000      	beq.n	8001586 <_printf_i+0xd2>
 8001584:	3702      	adds	r7, #2
 8001586:	0023      	movs	r3, r4
 8001588:	2200      	movs	r2, #0
 800158a:	3343      	adds	r3, #67	; 0x43
 800158c:	701a      	strb	r2, [r3, #0]
 800158e:	6863      	ldr	r3, [r4, #4]
 8001590:	60a3      	str	r3, [r4, #8]
 8001592:	2b00      	cmp	r3, #0
 8001594:	db03      	blt.n	800159e <_printf_i+0xea>
 8001596:	2104      	movs	r1, #4
 8001598:	6822      	ldr	r2, [r4, #0]
 800159a:	438a      	bics	r2, r1
 800159c:	6022      	str	r2, [r4, #0]
 800159e:	2d00      	cmp	r5, #0
 80015a0:	d102      	bne.n	80015a8 <_printf_i+0xf4>
 80015a2:	9e04      	ldr	r6, [sp, #16]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d00c      	beq.n	80015c2 <_printf_i+0x10e>
 80015a8:	9e04      	ldr	r6, [sp, #16]
 80015aa:	0028      	movs	r0, r5
 80015ac:	0039      	movs	r1, r7
 80015ae:	f7fe fe39 	bl	8000224 <__aeabi_uidivmod>
 80015b2:	9b03      	ldr	r3, [sp, #12]
 80015b4:	3e01      	subs	r6, #1
 80015b6:	5c5b      	ldrb	r3, [r3, r1]
 80015b8:	7033      	strb	r3, [r6, #0]
 80015ba:	002b      	movs	r3, r5
 80015bc:	0005      	movs	r5, r0
 80015be:	429f      	cmp	r7, r3
 80015c0:	d9f3      	bls.n	80015aa <_printf_i+0xf6>
 80015c2:	2f08      	cmp	r7, #8
 80015c4:	d109      	bne.n	80015da <_printf_i+0x126>
 80015c6:	6823      	ldr	r3, [r4, #0]
 80015c8:	07db      	lsls	r3, r3, #31
 80015ca:	d506      	bpl.n	80015da <_printf_i+0x126>
 80015cc:	6862      	ldr	r2, [r4, #4]
 80015ce:	6923      	ldr	r3, [r4, #16]
 80015d0:	429a      	cmp	r2, r3
 80015d2:	dc02      	bgt.n	80015da <_printf_i+0x126>
 80015d4:	2330      	movs	r3, #48	; 0x30
 80015d6:	3e01      	subs	r6, #1
 80015d8:	7033      	strb	r3, [r6, #0]
 80015da:	9b04      	ldr	r3, [sp, #16]
 80015dc:	1b9b      	subs	r3, r3, r6
 80015de:	6123      	str	r3, [r4, #16]
 80015e0:	9b07      	ldr	r3, [sp, #28]
 80015e2:	0021      	movs	r1, r4
 80015e4:	9300      	str	r3, [sp, #0]
 80015e6:	9805      	ldr	r0, [sp, #20]
 80015e8:	9b06      	ldr	r3, [sp, #24]
 80015ea:	aa09      	add	r2, sp, #36	; 0x24
 80015ec:	f7ff fef2 	bl	80013d4 <_printf_common>
 80015f0:	3001      	adds	r0, #1
 80015f2:	d147      	bne.n	8001684 <_printf_i+0x1d0>
 80015f4:	2001      	movs	r0, #1
 80015f6:	4240      	negs	r0, r0
 80015f8:	b00b      	add	sp, #44	; 0x2c
 80015fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80015fc:	2220      	movs	r2, #32
 80015fe:	6809      	ldr	r1, [r1, #0]
 8001600:	430a      	orrs	r2, r1
 8001602:	6022      	str	r2, [r4, #0]
 8001604:	2278      	movs	r2, #120	; 0x78
 8001606:	4932      	ldr	r1, [pc, #200]	; (80016d0 <_printf_i+0x21c>)
 8001608:	9103      	str	r1, [sp, #12]
 800160a:	0021      	movs	r1, r4
 800160c:	3145      	adds	r1, #69	; 0x45
 800160e:	700a      	strb	r2, [r1, #0]
 8001610:	6819      	ldr	r1, [r3, #0]
 8001612:	6822      	ldr	r2, [r4, #0]
 8001614:	c920      	ldmia	r1!, {r5}
 8001616:	0610      	lsls	r0, r2, #24
 8001618:	d402      	bmi.n	8001620 <_printf_i+0x16c>
 800161a:	0650      	lsls	r0, r2, #25
 800161c:	d500      	bpl.n	8001620 <_printf_i+0x16c>
 800161e:	b2ad      	uxth	r5, r5
 8001620:	6019      	str	r1, [r3, #0]
 8001622:	07d3      	lsls	r3, r2, #31
 8001624:	d502      	bpl.n	800162c <_printf_i+0x178>
 8001626:	2320      	movs	r3, #32
 8001628:	4313      	orrs	r3, r2
 800162a:	6023      	str	r3, [r4, #0]
 800162c:	2710      	movs	r7, #16
 800162e:	2d00      	cmp	r5, #0
 8001630:	d1a9      	bne.n	8001586 <_printf_i+0xd2>
 8001632:	2220      	movs	r2, #32
 8001634:	6823      	ldr	r3, [r4, #0]
 8001636:	4393      	bics	r3, r2
 8001638:	6023      	str	r3, [r4, #0]
 800163a:	e7a4      	b.n	8001586 <_printf_i+0xd2>
 800163c:	681a      	ldr	r2, [r3, #0]
 800163e:	680d      	ldr	r5, [r1, #0]
 8001640:	1d10      	adds	r0, r2, #4
 8001642:	6949      	ldr	r1, [r1, #20]
 8001644:	6018      	str	r0, [r3, #0]
 8001646:	6813      	ldr	r3, [r2, #0]
 8001648:	062e      	lsls	r6, r5, #24
 800164a:	d501      	bpl.n	8001650 <_printf_i+0x19c>
 800164c:	6019      	str	r1, [r3, #0]
 800164e:	e002      	b.n	8001656 <_printf_i+0x1a2>
 8001650:	066d      	lsls	r5, r5, #25
 8001652:	d5fb      	bpl.n	800164c <_printf_i+0x198>
 8001654:	8019      	strh	r1, [r3, #0]
 8001656:	2300      	movs	r3, #0
 8001658:	9e04      	ldr	r6, [sp, #16]
 800165a:	6123      	str	r3, [r4, #16]
 800165c:	e7c0      	b.n	80015e0 <_printf_i+0x12c>
 800165e:	681a      	ldr	r2, [r3, #0]
 8001660:	1d11      	adds	r1, r2, #4
 8001662:	6019      	str	r1, [r3, #0]
 8001664:	6816      	ldr	r6, [r2, #0]
 8001666:	2100      	movs	r1, #0
 8001668:	0030      	movs	r0, r6
 800166a:	6862      	ldr	r2, [r4, #4]
 800166c:	f000 f858 	bl	8001720 <memchr>
 8001670:	2800      	cmp	r0, #0
 8001672:	d001      	beq.n	8001678 <_printf_i+0x1c4>
 8001674:	1b80      	subs	r0, r0, r6
 8001676:	6060      	str	r0, [r4, #4]
 8001678:	6863      	ldr	r3, [r4, #4]
 800167a:	6123      	str	r3, [r4, #16]
 800167c:	2300      	movs	r3, #0
 800167e:	9a04      	ldr	r2, [sp, #16]
 8001680:	7013      	strb	r3, [r2, #0]
 8001682:	e7ad      	b.n	80015e0 <_printf_i+0x12c>
 8001684:	0032      	movs	r2, r6
 8001686:	6923      	ldr	r3, [r4, #16]
 8001688:	9906      	ldr	r1, [sp, #24]
 800168a:	9805      	ldr	r0, [sp, #20]
 800168c:	9d07      	ldr	r5, [sp, #28]
 800168e:	47a8      	blx	r5
 8001690:	3001      	adds	r0, #1
 8001692:	d0af      	beq.n	80015f4 <_printf_i+0x140>
 8001694:	6823      	ldr	r3, [r4, #0]
 8001696:	079b      	lsls	r3, r3, #30
 8001698:	d415      	bmi.n	80016c6 <_printf_i+0x212>
 800169a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800169c:	68e0      	ldr	r0, [r4, #12]
 800169e:	4298      	cmp	r0, r3
 80016a0:	daaa      	bge.n	80015f8 <_printf_i+0x144>
 80016a2:	0018      	movs	r0, r3
 80016a4:	e7a8      	b.n	80015f8 <_printf_i+0x144>
 80016a6:	0022      	movs	r2, r4
 80016a8:	2301      	movs	r3, #1
 80016aa:	9906      	ldr	r1, [sp, #24]
 80016ac:	9805      	ldr	r0, [sp, #20]
 80016ae:	9e07      	ldr	r6, [sp, #28]
 80016b0:	3219      	adds	r2, #25
 80016b2:	47b0      	blx	r6
 80016b4:	3001      	adds	r0, #1
 80016b6:	d09d      	beq.n	80015f4 <_printf_i+0x140>
 80016b8:	3501      	adds	r5, #1
 80016ba:	68e3      	ldr	r3, [r4, #12]
 80016bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80016be:	1a9b      	subs	r3, r3, r2
 80016c0:	42ab      	cmp	r3, r5
 80016c2:	dcf0      	bgt.n	80016a6 <_printf_i+0x1f2>
 80016c4:	e7e9      	b.n	800169a <_printf_i+0x1e6>
 80016c6:	2500      	movs	r5, #0
 80016c8:	e7f7      	b.n	80016ba <_printf_i+0x206>
 80016ca:	46c0      	nop			; (mov r8, r8)
 80016cc:	08001811 	.word	0x08001811
 80016d0:	08001822 	.word	0x08001822

080016d4 <memmove>:
 80016d4:	b510      	push	{r4, lr}
 80016d6:	4288      	cmp	r0, r1
 80016d8:	d902      	bls.n	80016e0 <memmove+0xc>
 80016da:	188b      	adds	r3, r1, r2
 80016dc:	4298      	cmp	r0, r3
 80016de:	d303      	bcc.n	80016e8 <memmove+0x14>
 80016e0:	2300      	movs	r3, #0
 80016e2:	e007      	b.n	80016f4 <memmove+0x20>
 80016e4:	5c8b      	ldrb	r3, [r1, r2]
 80016e6:	5483      	strb	r3, [r0, r2]
 80016e8:	3a01      	subs	r2, #1
 80016ea:	d2fb      	bcs.n	80016e4 <memmove+0x10>
 80016ec:	bd10      	pop	{r4, pc}
 80016ee:	5ccc      	ldrb	r4, [r1, r3]
 80016f0:	54c4      	strb	r4, [r0, r3]
 80016f2:	3301      	adds	r3, #1
 80016f4:	429a      	cmp	r2, r3
 80016f6:	d1fa      	bne.n	80016ee <memmove+0x1a>
 80016f8:	e7f8      	b.n	80016ec <memmove+0x18>
	...

080016fc <_sbrk_r>:
 80016fc:	2300      	movs	r3, #0
 80016fe:	b570      	push	{r4, r5, r6, lr}
 8001700:	4d06      	ldr	r5, [pc, #24]	; (800171c <_sbrk_r+0x20>)
 8001702:	0004      	movs	r4, r0
 8001704:	0008      	movs	r0, r1
 8001706:	602b      	str	r3, [r5, #0]
 8001708:	f7ff fb2c 	bl	8000d64 <_sbrk>
 800170c:	1c43      	adds	r3, r0, #1
 800170e:	d103      	bne.n	8001718 <_sbrk_r+0x1c>
 8001710:	682b      	ldr	r3, [r5, #0]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d000      	beq.n	8001718 <_sbrk_r+0x1c>
 8001716:	6023      	str	r3, [r4, #0]
 8001718:	bd70      	pop	{r4, r5, r6, pc}
 800171a:	46c0      	nop			; (mov r8, r8)
 800171c:	200001b4 	.word	0x200001b4

08001720 <memchr>:
 8001720:	b2c9      	uxtb	r1, r1
 8001722:	1882      	adds	r2, r0, r2
 8001724:	4290      	cmp	r0, r2
 8001726:	d101      	bne.n	800172c <memchr+0xc>
 8001728:	2000      	movs	r0, #0
 800172a:	4770      	bx	lr
 800172c:	7803      	ldrb	r3, [r0, #0]
 800172e:	428b      	cmp	r3, r1
 8001730:	d0fb      	beq.n	800172a <memchr+0xa>
 8001732:	3001      	adds	r0, #1
 8001734:	e7f6      	b.n	8001724 <memchr+0x4>

08001736 <memcpy>:
 8001736:	2300      	movs	r3, #0
 8001738:	b510      	push	{r4, lr}
 800173a:	429a      	cmp	r2, r3
 800173c:	d100      	bne.n	8001740 <memcpy+0xa>
 800173e:	bd10      	pop	{r4, pc}
 8001740:	5ccc      	ldrb	r4, [r1, r3]
 8001742:	54c4      	strb	r4, [r0, r3]
 8001744:	3301      	adds	r3, #1
 8001746:	e7f8      	b.n	800173a <memcpy+0x4>

08001748 <_realloc_r>:
 8001748:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800174a:	0007      	movs	r7, r0
 800174c:	000e      	movs	r6, r1
 800174e:	0014      	movs	r4, r2
 8001750:	2900      	cmp	r1, #0
 8001752:	d105      	bne.n	8001760 <_realloc_r+0x18>
 8001754:	0011      	movs	r1, r2
 8001756:	f7ff fc49 	bl	8000fec <_malloc_r>
 800175a:	0005      	movs	r5, r0
 800175c:	0028      	movs	r0, r5
 800175e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8001760:	2a00      	cmp	r2, #0
 8001762:	d103      	bne.n	800176c <_realloc_r+0x24>
 8001764:	f7ff fbd6 	bl	8000f14 <_free_r>
 8001768:	0025      	movs	r5, r4
 800176a:	e7f7      	b.n	800175c <_realloc_r+0x14>
 800176c:	f000 f81b 	bl	80017a6 <_malloc_usable_size_r>
 8001770:	9001      	str	r0, [sp, #4]
 8001772:	4284      	cmp	r4, r0
 8001774:	d803      	bhi.n	800177e <_realloc_r+0x36>
 8001776:	0035      	movs	r5, r6
 8001778:	0843      	lsrs	r3, r0, #1
 800177a:	42a3      	cmp	r3, r4
 800177c:	d3ee      	bcc.n	800175c <_realloc_r+0x14>
 800177e:	0021      	movs	r1, r4
 8001780:	0038      	movs	r0, r7
 8001782:	f7ff fc33 	bl	8000fec <_malloc_r>
 8001786:	1e05      	subs	r5, r0, #0
 8001788:	d0e8      	beq.n	800175c <_realloc_r+0x14>
 800178a:	9b01      	ldr	r3, [sp, #4]
 800178c:	0022      	movs	r2, r4
 800178e:	429c      	cmp	r4, r3
 8001790:	d900      	bls.n	8001794 <_realloc_r+0x4c>
 8001792:	001a      	movs	r2, r3
 8001794:	0031      	movs	r1, r6
 8001796:	0028      	movs	r0, r5
 8001798:	f7ff ffcd 	bl	8001736 <memcpy>
 800179c:	0031      	movs	r1, r6
 800179e:	0038      	movs	r0, r7
 80017a0:	f7ff fbb8 	bl	8000f14 <_free_r>
 80017a4:	e7da      	b.n	800175c <_realloc_r+0x14>

080017a6 <_malloc_usable_size_r>:
 80017a6:	1f0b      	subs	r3, r1, #4
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	1f18      	subs	r0, r3, #4
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	da01      	bge.n	80017b4 <_malloc_usable_size_r+0xe>
 80017b0:	580b      	ldr	r3, [r1, r0]
 80017b2:	18c0      	adds	r0, r0, r3
 80017b4:	4770      	bx	lr
	...

080017b8 <_init>:
 80017b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017ba:	46c0      	nop			; (mov r8, r8)
 80017bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80017be:	bc08      	pop	{r3}
 80017c0:	469e      	mov	lr, r3
 80017c2:	4770      	bx	lr

080017c4 <_fini>:
 80017c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017c6:	46c0      	nop			; (mov r8, r8)
 80017c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80017ca:	bc08      	pop	{r3}
 80017cc:	469e      	mov	lr, r3
 80017ce:	4770      	bx	lr
