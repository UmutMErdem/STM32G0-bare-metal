
problem2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000009d0  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  08000a8c  08000a8c  00010a8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000adc  08000adc  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08000adc  08000adc  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000adc  08000adc  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000adc  08000adc  00010adc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000ae0  08000ae0  00010ae0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08000ae4  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000024  20000004  08000ae8  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000028  08000ae8  00020028  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001ac1  00000000  00000000  0002006f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000798  00000000  00000000  00021b30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000268  00000000  00000000  000222c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000001bd  00000000  00000000  00022530  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00013e3a  00000000  00000000  000226ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000027d0  00000000  00000000  00036527  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00080c88  00000000  00000000  00038cf7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000084c  00000000  00000000  000b9980  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004f  00000000  00000000  000ba1cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000004 	.word	0x20000004
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08000a74 	.word	0x08000a74

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000008 	.word	0x20000008
 8000100:	08000a74 	.word	0x08000a74

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f0 	bl	80003ec <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__divsi3>:
 8000218:	4603      	mov	r3, r0
 800021a:	430b      	orrs	r3, r1
 800021c:	d47f      	bmi.n	800031e <__divsi3+0x106>
 800021e:	2200      	movs	r2, #0
 8000220:	0843      	lsrs	r3, r0, #1
 8000222:	428b      	cmp	r3, r1
 8000224:	d374      	bcc.n	8000310 <__divsi3+0xf8>
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d35f      	bcc.n	80002ec <__divsi3+0xd4>
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d344      	bcc.n	80002bc <__divsi3+0xa4>
 8000232:	0b03      	lsrs	r3, r0, #12
 8000234:	428b      	cmp	r3, r1
 8000236:	d328      	bcc.n	800028a <__divsi3+0x72>
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d30d      	bcc.n	800025a <__divsi3+0x42>
 800023e:	22ff      	movs	r2, #255	; 0xff
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	ba12      	rev	r2, r2
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__divsi3+0x38>
 800024a:	1212      	asrs	r2, r2, #8
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	d065      	beq.n	800031c <__divsi3+0x104>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d319      	bcc.n	800028a <__divsi3+0x72>
 8000256:	e000      	b.n	800025a <__divsi3+0x42>
 8000258:	0a09      	lsrs	r1, r1, #8
 800025a:	0bc3      	lsrs	r3, r0, #15
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x4c>
 8000260:	03cb      	lsls	r3, r1, #15
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b83      	lsrs	r3, r0, #14
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x58>
 800026c:	038b      	lsls	r3, r1, #14
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b43      	lsrs	r3, r0, #13
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x64>
 8000278:	034b      	lsls	r3, r1, #13
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x70>
 8000284:	030b      	lsls	r3, r1, #12
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0ac3      	lsrs	r3, r0, #11
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x7c>
 8000290:	02cb      	lsls	r3, r1, #11
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a83      	lsrs	r3, r0, #10
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x88>
 800029c:	028b      	lsls	r3, r1, #10
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a43      	lsrs	r3, r0, #9
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x94>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a03      	lsrs	r3, r0, #8
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0xa0>
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	d2cd      	bcs.n	8000258 <__divsi3+0x40>
 80002bc:	09c3      	lsrs	r3, r0, #7
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xae>
 80002c2:	01cb      	lsls	r3, r1, #7
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0983      	lsrs	r3, r0, #6
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xba>
 80002ce:	018b      	lsls	r3, r1, #6
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0943      	lsrs	r3, r0, #5
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xc6>
 80002da:	014b      	lsls	r3, r1, #5
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0903      	lsrs	r3, r0, #4
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xd2>
 80002e6:	010b      	lsls	r3, r1, #4
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	08c3      	lsrs	r3, r0, #3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xde>
 80002f2:	00cb      	lsls	r3, r1, #3
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xea>
 80002fe:	008b      	lsls	r3, r1, #2
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0843      	lsrs	r3, r0, #1
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xf6>
 800030a:	004b      	lsls	r3, r1, #1
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	1a41      	subs	r1, r0, r1
 8000312:	d200      	bcs.n	8000316 <__divsi3+0xfe>
 8000314:	4601      	mov	r1, r0
 8000316:	4152      	adcs	r2, r2
 8000318:	4610      	mov	r0, r2
 800031a:	4770      	bx	lr
 800031c:	e05d      	b.n	80003da <__divsi3+0x1c2>
 800031e:	0fca      	lsrs	r2, r1, #31
 8000320:	d000      	beq.n	8000324 <__divsi3+0x10c>
 8000322:	4249      	negs	r1, r1
 8000324:	1003      	asrs	r3, r0, #32
 8000326:	d300      	bcc.n	800032a <__divsi3+0x112>
 8000328:	4240      	negs	r0, r0
 800032a:	4053      	eors	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	469c      	mov	ip, r3
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d32d      	bcc.n	8000392 <__divsi3+0x17a>
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d312      	bcc.n	8000362 <__divsi3+0x14a>
 800033c:	22fc      	movs	r2, #252	; 0xfc
 800033e:	0189      	lsls	r1, r1, #6
 8000340:	ba12      	rev	r2, r2
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d30c      	bcc.n	8000362 <__divsi3+0x14a>
 8000348:	0189      	lsls	r1, r1, #6
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	428b      	cmp	r3, r1
 800034e:	d308      	bcc.n	8000362 <__divsi3+0x14a>
 8000350:	0189      	lsls	r1, r1, #6
 8000352:	1192      	asrs	r2, r2, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d304      	bcc.n	8000362 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	d03a      	beq.n	80003d2 <__divsi3+0x1ba>
 800035c:	1192      	asrs	r2, r2, #6
 800035e:	e000      	b.n	8000362 <__divsi3+0x14a>
 8000360:	0989      	lsrs	r1, r1, #6
 8000362:	09c3      	lsrs	r3, r0, #7
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x154>
 8000368:	01cb      	lsls	r3, r1, #7
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0983      	lsrs	r3, r0, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x160>
 8000374:	018b      	lsls	r3, r1, #6
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0943      	lsrs	r3, r0, #5
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x16c>
 8000380:	014b      	lsls	r3, r1, #5
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0903      	lsrs	r3, r0, #4
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x178>
 800038c:	010b      	lsls	r3, r1, #4
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	08c3      	lsrs	r3, r0, #3
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x184>
 8000398:	00cb      	lsls	r3, r1, #3
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0883      	lsrs	r3, r0, #2
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x190>
 80003a4:	008b      	lsls	r3, r1, #2
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	d2d9      	bcs.n	8000360 <__divsi3+0x148>
 80003ac:	0843      	lsrs	r3, r0, #1
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0x19e>
 80003b2:	004b      	lsls	r3, r1, #1
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	1a41      	subs	r1, r0, r1
 80003ba:	d200      	bcs.n	80003be <__divsi3+0x1a6>
 80003bc:	4601      	mov	r1, r0
 80003be:	4663      	mov	r3, ip
 80003c0:	4152      	adcs	r2, r2
 80003c2:	105b      	asrs	r3, r3, #1
 80003c4:	4610      	mov	r0, r2
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x1b4>
 80003c8:	4240      	negs	r0, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d500      	bpl.n	80003d0 <__divsi3+0x1b8>
 80003ce:	4249      	negs	r1, r1
 80003d0:	4770      	bx	lr
 80003d2:	4663      	mov	r3, ip
 80003d4:	105b      	asrs	r3, r3, #1
 80003d6:	d300      	bcc.n	80003da <__divsi3+0x1c2>
 80003d8:	4240      	negs	r0, r0
 80003da:	b501      	push	{r0, lr}
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f805 	bl	80003ec <__aeabi_idiv0>
 80003e2:	bd02      	pop	{r1, pc}

080003e4 <__aeabi_idivmod>:
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d0f8      	beq.n	80003da <__divsi3+0x1c2>
 80003e8:	e716      	b.n	8000218 <__divsi3>
 80003ea:	4770      	bx	lr

080003ec <__aeabi_idiv0>:
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			; (mov r8, r8)

080003f0 <TIM3_IRQHandler>:
void print(char *);
int _print(int, char *, int);
void printChar(uint8_t);
void Delay(volatile uint32_t);

void TIM3_IRQHandler(void){
 80003f0:	b580      	push	{r7, lr}
 80003f2:	af00      	add	r7, sp, #0
	mic_val = ADC_Data();
 80003f4:	f000 f94a 	bl	800068c <ADC_Data>
 80003f8:	0003      	movs	r3, r0
 80003fa:	001a      	movs	r2, r3
 80003fc:	4b1a      	ldr	r3, [pc, #104]	; (8000468 <TIM3_IRQHandler+0x78>)
 80003fe:	801a      	strh	r2, [r3, #0]

	if((GPIOA->IDR >>4) & 1){ // if button is pressed
 8000400:	23a0      	movs	r3, #160	; 0xa0
 8000402:	05db      	lsls	r3, r3, #23
 8000404:	691b      	ldr	r3, [r3, #16]
 8000406:	2210      	movs	r2, #16
 8000408:	4013      	ands	r3, r2
 800040a:	d006      	beq.n	800041a <TIM3_IRQHandler+0x2a>
		counter = 0;
 800040c:	4b17      	ldr	r3, [pc, #92]	; (800046c <TIM3_IRQHandler+0x7c>)
 800040e:	2200      	movs	r2, #0
 8000410:	801a      	strh	r2, [r3, #0]
		Delay(320000);
 8000412:	4b17      	ldr	r3, [pc, #92]	; (8000470 <TIM3_IRQHandler+0x80>)
 8000414:	0018      	movs	r0, r3
 8000416:	f000 fa47 	bl	80008a8 <Delay>
	}
	if(mic_val > 128){
 800041a:	4b13      	ldr	r3, [pc, #76]	; (8000468 <TIM3_IRQHandler+0x78>)
 800041c:	881b      	ldrh	r3, [r3, #0]
 800041e:	2b80      	cmp	r3, #128	; 0x80
 8000420:	d909      	bls.n	8000436 <TIM3_IRQHandler+0x46>
		counter++;
 8000422:	4b12      	ldr	r3, [pc, #72]	; (800046c <TIM3_IRQHandler+0x7c>)
 8000424:	881b      	ldrh	r3, [r3, #0]
 8000426:	3301      	adds	r3, #1
 8000428:	b29a      	uxth	r2, r3
 800042a:	4b10      	ldr	r3, [pc, #64]	; (800046c <TIM3_IRQHandler+0x7c>)
 800042c:	801a      	strh	r2, [r3, #0]
		Delay(320000);
 800042e:	4b10      	ldr	r3, [pc, #64]	; (8000470 <TIM3_IRQHandler+0x80>)
 8000430:	0018      	movs	r0, r3
 8000432:	f000 fa39 	bl	80008a8 <Delay>
	}
	counterDisplay(counter);
 8000436:	4b0d      	ldr	r3, [pc, #52]	; (800046c <TIM3_IRQHandler+0x7c>)
 8000438:	881b      	ldrh	r3, [r3, #0]
 800043a:	0018      	movs	r0, r3
 800043c:	f000 f821 	bl	8000482 <counterDisplay>
	printInt(mic_val);
 8000440:	4b09      	ldr	r3, [pc, #36]	; (8000468 <TIM3_IRQHandler+0x78>)
 8000442:	881b      	ldrh	r3, [r3, #0]
 8000444:	0018      	movs	r0, r3
 8000446:	f000 f939 	bl	80006bc <printInt>

	TIM3->SR &=  ~(TIM_SR_CC1IF); // Clear capture compare interrupt 1 flag
 800044a:	4b0a      	ldr	r3, [pc, #40]	; (8000474 <TIM3_IRQHandler+0x84>)
 800044c:	691a      	ldr	r2, [r3, #16]
 800044e:	4b09      	ldr	r3, [pc, #36]	; (8000474 <TIM3_IRQHandler+0x84>)
 8000450:	2102      	movs	r1, #2
 8000452:	438a      	bics	r2, r1
 8000454:	611a      	str	r2, [r3, #16]
	TIM3->SR &= ~(TIM_SR_UIF); // Clear update status register
 8000456:	4b07      	ldr	r3, [pc, #28]	; (8000474 <TIM3_IRQHandler+0x84>)
 8000458:	691a      	ldr	r2, [r3, #16]
 800045a:	4b06      	ldr	r3, [pc, #24]	; (8000474 <TIM3_IRQHandler+0x84>)
 800045c:	2101      	movs	r1, #1
 800045e:	438a      	bics	r2, r1
 8000460:	611a      	str	r2, [r3, #16]
}
 8000462:	46c0      	nop			; (mov r8, r8)
 8000464:	46bd      	mov	sp, r7
 8000466:	bd80      	pop	{r7, pc}
 8000468:	20000020 	.word	0x20000020
 800046c:	20000022 	.word	0x20000022
 8000470:	0004e200 	.word	0x0004e200
 8000474:	40000400 	.word	0x40000400

08000478 <main>:

int main(void){
 8000478:	b580      	push	{r7, lr}
 800047a:	af00      	add	r7, sp, #0
	SystemInit();
 800047c:	f000 fa3b 	bl	80008f6 <SystemInit>
	while(1){
 8000480:	e7fe      	b.n	8000480 <main+0x8>

08000482 <counterDisplay>:
	TIM3_Config();
	USART2_Config();
	ADC_Config();
}

void counterDisplay(uint16_t counterVal){
 8000482:	b580      	push	{r7, lr}
 8000484:	b086      	sub	sp, #24
 8000486:	af00      	add	r7, sp, #0
 8000488:	0002      	movs	r2, r0
 800048a:	1dbb      	adds	r3, r7, #6
 800048c:	801a      	strh	r2, [r3, #0]
	int thousand, hundred, decimal, unit;
	thousand=(counterVal/1000); // thousand digit of counter
 800048e:	1dbb      	adds	r3, r7, #6
 8000490:	881b      	ldrh	r3, [r3, #0]
 8000492:	22fa      	movs	r2, #250	; 0xfa
 8000494:	0091      	lsls	r1, r2, #2
 8000496:	0018      	movs	r0, r3
 8000498:	f7ff fe34 	bl	8000104 <__udivsi3>
 800049c:	0003      	movs	r3, r0
 800049e:	b29b      	uxth	r3, r3
 80004a0:	617b      	str	r3, [r7, #20]
	hundred=((counterVal-thousand*1000)/100); // hundred digit of counter
 80004a2:	1dbb      	adds	r3, r7, #6
 80004a4:	8819      	ldrh	r1, [r3, #0]
 80004a6:	697a      	ldr	r2, [r7, #20]
 80004a8:	0013      	movs	r3, r2
 80004aa:	059b      	lsls	r3, r3, #22
 80004ac:	1a9b      	subs	r3, r3, r2
 80004ae:	019b      	lsls	r3, r3, #6
 80004b0:	189b      	adds	r3, r3, r2
 80004b2:	005b      	lsls	r3, r3, #1
 80004b4:	189b      	adds	r3, r3, r2
 80004b6:	00db      	lsls	r3, r3, #3
 80004b8:	18cb      	adds	r3, r1, r3
 80004ba:	2164      	movs	r1, #100	; 0x64
 80004bc:	0018      	movs	r0, r3
 80004be:	f7ff feab 	bl	8000218 <__divsi3>
 80004c2:	0003      	movs	r3, r0
 80004c4:	613b      	str	r3, [r7, #16]
	decimal=((counterVal- thousand*1000 - hundred*100)/10); // decimal digit of counter
 80004c6:	1dbb      	adds	r3, r7, #6
 80004c8:	8819      	ldrh	r1, [r3, #0]
 80004ca:	697a      	ldr	r2, [r7, #20]
 80004cc:	0013      	movs	r3, r2
 80004ce:	059b      	lsls	r3, r3, #22
 80004d0:	1a9b      	subs	r3, r3, r2
 80004d2:	019b      	lsls	r3, r3, #6
 80004d4:	189b      	adds	r3, r3, r2
 80004d6:	005b      	lsls	r3, r3, #1
 80004d8:	189b      	adds	r3, r3, r2
 80004da:	00db      	lsls	r3, r3, #3
 80004dc:	18c9      	adds	r1, r1, r3
 80004de:	693a      	ldr	r2, [r7, #16]
 80004e0:	0013      	movs	r3, r2
 80004e2:	065b      	lsls	r3, r3, #25
 80004e4:	1a9b      	subs	r3, r3, r2
 80004e6:	009b      	lsls	r3, r3, #2
 80004e8:	189b      	adds	r3, r3, r2
 80004ea:	00db      	lsls	r3, r3, #3
 80004ec:	1a9b      	subs	r3, r3, r2
 80004ee:	009b      	lsls	r3, r3, #2
 80004f0:	18cb      	adds	r3, r1, r3
 80004f2:	210a      	movs	r1, #10
 80004f4:	0018      	movs	r0, r3
 80004f6:	f7ff fe8f 	bl	8000218 <__divsi3>
 80004fa:	0003      	movs	r3, r0
 80004fc:	60fb      	str	r3, [r7, #12]
	unit=(counterVal- thousand*1000 - hundred*100 - decimal*10); // unit digit of counter
 80004fe:	1dbb      	adds	r3, r7, #6
 8000500:	8819      	ldrh	r1, [r3, #0]
 8000502:	697a      	ldr	r2, [r7, #20]
 8000504:	0013      	movs	r3, r2
 8000506:	059b      	lsls	r3, r3, #22
 8000508:	1a9b      	subs	r3, r3, r2
 800050a:	019b      	lsls	r3, r3, #6
 800050c:	189b      	adds	r3, r3, r2
 800050e:	005b      	lsls	r3, r3, #1
 8000510:	189b      	adds	r3, r3, r2
 8000512:	00db      	lsls	r3, r3, #3
 8000514:	18c9      	adds	r1, r1, r3
 8000516:	693a      	ldr	r2, [r7, #16]
 8000518:	0013      	movs	r3, r2
 800051a:	065b      	lsls	r3, r3, #25
 800051c:	1a9b      	subs	r3, r3, r2
 800051e:	009b      	lsls	r3, r3, #2
 8000520:	189b      	adds	r3, r3, r2
 8000522:	00db      	lsls	r3, r3, #3
 8000524:	1a9b      	subs	r3, r3, r2
 8000526:	009b      	lsls	r3, r3, #2
 8000528:	18c9      	adds	r1, r1, r3
 800052a:	68fa      	ldr	r2, [r7, #12]
 800052c:	0013      	movs	r3, r2
 800052e:	075b      	lsls	r3, r3, #29
 8000530:	1a9b      	subs	r3, r3, r2
 8000532:	009b      	lsls	r3, r3, #2
 8000534:	1a9b      	subs	r3, r3, r2
 8000536:	005b      	lsls	r3, r3, #1
 8000538:	18cb      	adds	r3, r1, r3
 800053a:	60bb      	str	r3, [r7, #8]

	/* unit digit we want is set to 1 and the others are set to 0*/
	GPIOA ->ODR &= ~(1U << 7); // off D1 - PA7
 800053c:	23a0      	movs	r3, #160	; 0xa0
 800053e:	05db      	lsls	r3, r3, #23
 8000540:	695a      	ldr	r2, [r3, #20]
 8000542:	23a0      	movs	r3, #160	; 0xa0
 8000544:	05db      	lsls	r3, r3, #23
 8000546:	2180      	movs	r1, #128	; 0x80
 8000548:	438a      	bics	r2, r1
 800054a:	615a      	str	r2, [r3, #20]
	GPIOA ->ODR &= ~(1U << 6); // off D2 - PA6
 800054c:	23a0      	movs	r3, #160	; 0xa0
 800054e:	05db      	lsls	r3, r3, #23
 8000550:	695a      	ldr	r2, [r3, #20]
 8000552:	23a0      	movs	r3, #160	; 0xa0
 8000554:	05db      	lsls	r3, r3, #23
 8000556:	2140      	movs	r1, #64	; 0x40
 8000558:	438a      	bics	r2, r1
 800055a:	615a      	str	r2, [r3, #20]
	GPIOA ->ODR &= ~(1U << 0); // off D3 - PA0
 800055c:	23a0      	movs	r3, #160	; 0xa0
 800055e:	05db      	lsls	r3, r3, #23
 8000560:	695a      	ldr	r2, [r3, #20]
 8000562:	23a0      	movs	r3, #160	; 0xa0
 8000564:	05db      	lsls	r3, r3, #23
 8000566:	2101      	movs	r1, #1
 8000568:	438a      	bics	r2, r1
 800056a:	615a      	str	r2, [r3, #20]
	GPIOA ->ODR |= (1U << 5); // on D4 - PA5
 800056c:	23a0      	movs	r3, #160	; 0xa0
 800056e:	05db      	lsls	r3, r3, #23
 8000570:	695a      	ldr	r2, [r3, #20]
 8000572:	23a0      	movs	r3, #160	; 0xa0
 8000574:	05db      	lsls	r3, r3, #23
 8000576:	2120      	movs	r1, #32
 8000578:	430a      	orrs	r2, r1
 800057a:	615a      	str	r2, [r3, #20]
	setSSD(unit);
 800057c:	68bb      	ldr	r3, [r7, #8]
 800057e:	0018      	movs	r0, r3
 8000580:	f000 f934 	bl	80007ec <setSSD>
	Delay(300);
 8000584:	2396      	movs	r3, #150	; 0x96
 8000586:	005b      	lsls	r3, r3, #1
 8000588:	0018      	movs	r0, r3
 800058a:	f000 f98d 	bl	80008a8 <Delay>

	/* decimal digit we want is set to 1 and the others are set to 0*/
	GPIOA ->ODR &= ~(1U << 7); // D1 - PA7
 800058e:	23a0      	movs	r3, #160	; 0xa0
 8000590:	05db      	lsls	r3, r3, #23
 8000592:	695a      	ldr	r2, [r3, #20]
 8000594:	23a0      	movs	r3, #160	; 0xa0
 8000596:	05db      	lsls	r3, r3, #23
 8000598:	2180      	movs	r1, #128	; 0x80
 800059a:	438a      	bics	r2, r1
 800059c:	615a      	str	r2, [r3, #20]
	GPIOA ->ODR &= ~(1U << 6); // D2 - PA7
 800059e:	23a0      	movs	r3, #160	; 0xa0
 80005a0:	05db      	lsls	r3, r3, #23
 80005a2:	695a      	ldr	r2, [r3, #20]
 80005a4:	23a0      	movs	r3, #160	; 0xa0
 80005a6:	05db      	lsls	r3, r3, #23
 80005a8:	2140      	movs	r1, #64	; 0x40
 80005aa:	438a      	bics	r2, r1
 80005ac:	615a      	str	r2, [r3, #20]
	GPIOA ->ODR |= (1U << 0); // D3 - PA7
 80005ae:	23a0      	movs	r3, #160	; 0xa0
 80005b0:	05db      	lsls	r3, r3, #23
 80005b2:	695a      	ldr	r2, [r3, #20]
 80005b4:	23a0      	movs	r3, #160	; 0xa0
 80005b6:	05db      	lsls	r3, r3, #23
 80005b8:	2101      	movs	r1, #1
 80005ba:	430a      	orrs	r2, r1
 80005bc:	615a      	str	r2, [r3, #20]
	GPIOA ->ODR &= ~(1U << 5);
 80005be:	23a0      	movs	r3, #160	; 0xa0
 80005c0:	05db      	lsls	r3, r3, #23
 80005c2:	695a      	ldr	r2, [r3, #20]
 80005c4:	23a0      	movs	r3, #160	; 0xa0
 80005c6:	05db      	lsls	r3, r3, #23
 80005c8:	2120      	movs	r1, #32
 80005ca:	438a      	bics	r2, r1
 80005cc:	615a      	str	r2, [r3, #20]
	setSSD(decimal);
 80005ce:	68fb      	ldr	r3, [r7, #12]
 80005d0:	0018      	movs	r0, r3
 80005d2:	f000 f90b 	bl	80007ec <setSSD>
	Delay(300);
 80005d6:	2396      	movs	r3, #150	; 0x96
 80005d8:	005b      	lsls	r3, r3, #1
 80005da:	0018      	movs	r0, r3
 80005dc:	f000 f964 	bl	80008a8 <Delay>

	/* hundred digit we want is set to 1 and the others are set to 0*/
	GPIOA ->ODR &= ~(1U << 7); // D1 - PA7
 80005e0:	23a0      	movs	r3, #160	; 0xa0
 80005e2:	05db      	lsls	r3, r3, #23
 80005e4:	695a      	ldr	r2, [r3, #20]
 80005e6:	23a0      	movs	r3, #160	; 0xa0
 80005e8:	05db      	lsls	r3, r3, #23
 80005ea:	2180      	movs	r1, #128	; 0x80
 80005ec:	438a      	bics	r2, r1
 80005ee:	615a      	str	r2, [r3, #20]
	GPIOA ->ODR |= (1U << 6); // D2 - PA7
 80005f0:	23a0      	movs	r3, #160	; 0xa0
 80005f2:	05db      	lsls	r3, r3, #23
 80005f4:	695a      	ldr	r2, [r3, #20]
 80005f6:	23a0      	movs	r3, #160	; 0xa0
 80005f8:	05db      	lsls	r3, r3, #23
 80005fa:	2140      	movs	r1, #64	; 0x40
 80005fc:	430a      	orrs	r2, r1
 80005fe:	615a      	str	r2, [r3, #20]
	GPIOA ->ODR &= ~(1U << 0); // D3 - PA7
 8000600:	23a0      	movs	r3, #160	; 0xa0
 8000602:	05db      	lsls	r3, r3, #23
 8000604:	695a      	ldr	r2, [r3, #20]
 8000606:	23a0      	movs	r3, #160	; 0xa0
 8000608:	05db      	lsls	r3, r3, #23
 800060a:	2101      	movs	r1, #1
 800060c:	438a      	bics	r2, r1
 800060e:	615a      	str	r2, [r3, #20]
	GPIOA ->ODR &= ~(1U << 5);
 8000610:	23a0      	movs	r3, #160	; 0xa0
 8000612:	05db      	lsls	r3, r3, #23
 8000614:	695a      	ldr	r2, [r3, #20]
 8000616:	23a0      	movs	r3, #160	; 0xa0
 8000618:	05db      	lsls	r3, r3, #23
 800061a:	2120      	movs	r1, #32
 800061c:	438a      	bics	r2, r1
 800061e:	615a      	str	r2, [r3, #20]
	setSSD(hundred);
 8000620:	693b      	ldr	r3, [r7, #16]
 8000622:	0018      	movs	r0, r3
 8000624:	f000 f8e2 	bl	80007ec <setSSD>
	Delay(300);
 8000628:	2396      	movs	r3, #150	; 0x96
 800062a:	005b      	lsls	r3, r3, #1
 800062c:	0018      	movs	r0, r3
 800062e:	f000 f93b 	bl	80008a8 <Delay>

	/* thousand digit we want is set to 1 and the others are set to 0*/
	GPIOA ->ODR |= (1U << 7); // D1 - PA7
 8000632:	23a0      	movs	r3, #160	; 0xa0
 8000634:	05db      	lsls	r3, r3, #23
 8000636:	695a      	ldr	r2, [r3, #20]
 8000638:	23a0      	movs	r3, #160	; 0xa0
 800063a:	05db      	lsls	r3, r3, #23
 800063c:	2180      	movs	r1, #128	; 0x80
 800063e:	430a      	orrs	r2, r1
 8000640:	615a      	str	r2, [r3, #20]
	GPIOA ->ODR &= ~(1U << 6); // D2 - PA7
 8000642:	23a0      	movs	r3, #160	; 0xa0
 8000644:	05db      	lsls	r3, r3, #23
 8000646:	695a      	ldr	r2, [r3, #20]
 8000648:	23a0      	movs	r3, #160	; 0xa0
 800064a:	05db      	lsls	r3, r3, #23
 800064c:	2140      	movs	r1, #64	; 0x40
 800064e:	438a      	bics	r2, r1
 8000650:	615a      	str	r2, [r3, #20]
	GPIOA ->ODR &= ~(1U << 0); // D3 - PA7
 8000652:	23a0      	movs	r3, #160	; 0xa0
 8000654:	05db      	lsls	r3, r3, #23
 8000656:	695a      	ldr	r2, [r3, #20]
 8000658:	23a0      	movs	r3, #160	; 0xa0
 800065a:	05db      	lsls	r3, r3, #23
 800065c:	2101      	movs	r1, #1
 800065e:	438a      	bics	r2, r1
 8000660:	615a      	str	r2, [r3, #20]
	GPIOA ->ODR &= ~(1U << 5);
 8000662:	23a0      	movs	r3, #160	; 0xa0
 8000664:	05db      	lsls	r3, r3, #23
 8000666:	695a      	ldr	r2, [r3, #20]
 8000668:	23a0      	movs	r3, #160	; 0xa0
 800066a:	05db      	lsls	r3, r3, #23
 800066c:	2120      	movs	r1, #32
 800066e:	438a      	bics	r2, r1
 8000670:	615a      	str	r2, [r3, #20]
	setSSD(thousand);
 8000672:	697b      	ldr	r3, [r7, #20]
 8000674:	0018      	movs	r0, r3
 8000676:	f000 f8b9 	bl	80007ec <setSSD>
	Delay(300);
 800067a:	2396      	movs	r3, #150	; 0x96
 800067c:	005b      	lsls	r3, r3, #1
 800067e:	0018      	movs	r0, r3
 8000680:	f000 f912 	bl	80008a8 <Delay>
}
 8000684:	46c0      	nop			; (mov r8, r8)
 8000686:	46bd      	mov	sp, r7
 8000688:	b006      	add	sp, #24
 800068a:	bd80      	pop	{r7, pc}

0800068c <ADC_Data>:

uint16_t ADC_Data(void){
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0
	ADC1->CR |= ADC_CR_ADSTART; // ADC Start Conversion
 8000690:	4b09      	ldr	r3, [pc, #36]	; (80006b8 <ADC_Data+0x2c>)
 8000692:	689a      	ldr	r2, [r3, #8]
 8000694:	4b08      	ldr	r3, [pc, #32]	; (80006b8 <ADC_Data+0x2c>)
 8000696:	2104      	movs	r1, #4
 8000698:	430a      	orrs	r2, r1
 800069a:	609a      	str	r2, [r3, #8]

	/*This bit is set by hardware at the end of each conversion(EOC) of a channel
	 * when a new data result is available in the ADC_DR register.
	 * 0: Channel conversion not complete
	 * 1: Channel conversion complete*/
	if((ADC1->ISR>>2) & (ADC_ISR_EOC>>2)){
 800069c:	4b06      	ldr	r3, [pc, #24]	; (80006b8 <ADC_Data+0x2c>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	2204      	movs	r2, #4
 80006a2:	4013      	ands	r3, r2
 80006a4:	d003      	beq.n	80006ae <ADC_Data+0x22>
		return ADC1->DR; // return ADC data value
 80006a6:	4b04      	ldr	r3, [pc, #16]	; (80006b8 <ADC_Data+0x2c>)
 80006a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006aa:	b29b      	uxth	r3, r3
 80006ac:	e000      	b.n	80006b0 <ADC_Data+0x24>
	}
	return 0;
 80006ae:	2300      	movs	r3, #0
}
 80006b0:	0018      	movs	r0, r3
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	46c0      	nop			; (mov r8, r8)
 80006b8:	40012400 	.word	0x40012400

080006bc <printInt>:

void printInt(uint16_t intVal){
 80006bc:	b590      	push	{r4, r7, lr}
 80006be:	b085      	sub	sp, #20
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	0002      	movs	r2, r0
 80006c4:	1dbb      	adds	r3, r7, #6
 80006c6:	801a      	strh	r2, [r3, #0]
	char buffer[4];
	itoa(intVal, buffer, 10);
 80006c8:	1dbb      	adds	r3, r7, #6
 80006ca:	881b      	ldrh	r3, [r3, #0]
 80006cc:	240c      	movs	r4, #12
 80006ce:	1939      	adds	r1, r7, r4
 80006d0:	220a      	movs	r2, #10
 80006d2:	0018      	movs	r0, r3
 80006d4:	f000 f968 	bl	80009a8 <itoa>
	print(buffer);
 80006d8:	193b      	adds	r3, r7, r4
 80006da:	0018      	movs	r0, r3
 80006dc:	f000 f804 	bl	80006e8 <print>
}
 80006e0:	46c0      	nop			; (mov r8, r8)
 80006e2:	46bd      	mov	sp, r7
 80006e4:	b005      	add	sp, #20
 80006e6:	bd90      	pop	{r4, r7, pc}

080006e8 <print>:
void print(char *s){
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b084      	sub	sp, #16
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
	int length = 0; // to count length of character
 80006f0:	2300      	movs	r3, #0
 80006f2:	60fb      	str	r3, [r7, #12]
	/* i is pointer of string and length is increasing until i equals NULL character*/
	for(char *i = s; *i != NULL; i++) length++;
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	60bb      	str	r3, [r7, #8]
 80006f8:	e005      	b.n	8000706 <print+0x1e>
 80006fa:	68fb      	ldr	r3, [r7, #12]
 80006fc:	3301      	adds	r3, #1
 80006fe:	60fb      	str	r3, [r7, #12]
 8000700:	68bb      	ldr	r3, [r7, #8]
 8000702:	3301      	adds	r3, #1
 8000704:	60bb      	str	r3, [r7, #8]
 8000706:	68bb      	ldr	r3, [r7, #8]
 8000708:	781b      	ldrb	r3, [r3, #0]
 800070a:	2b00      	cmp	r3, #0
 800070c:	d1f5      	bne.n	80006fa <print+0x12>
	_print(0, s, length);
 800070e:	68fa      	ldr	r2, [r7, #12]
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	0019      	movs	r1, r3
 8000714:	2000      	movs	r0, #0
 8000716:	f000 f804 	bl	8000722 <_print>
}
 800071a:	46c0      	nop			; (mov r8, r8)
 800071c:	46bd      	mov	sp, r7
 800071e:	b004      	add	sp, #16
 8000720:	bd80      	pop	{r7, pc}

08000722 <_print>:

int _print(int f, char *ptr, int len){
 8000722:	b580      	push	{r7, lr}
 8000724:	b086      	sub	sp, #24
 8000726:	af00      	add	r7, sp, #0
 8000728:	60f8      	str	r0, [r7, #12]
 800072a:	60b9      	str	r1, [r7, #8]
 800072c:	607a      	str	r2, [r7, #4]
	/*in for loop, i of is increasing until equal to len
	 * and meanwhile, chars of 2nd parameter of _print function is writen
	 * into the printChar character by character increasing ptr of 2nd parameter
	 * of _print function  */
	for(volatile int i = f; i<len; i++){
 800072e:	68fb      	ldr	r3, [r7, #12]
 8000730:	617b      	str	r3, [r7, #20]
 8000732:	e00a      	b.n	800074a <_print+0x28>
		printChar(*ptr);
 8000734:	68bb      	ldr	r3, [r7, #8]
 8000736:	781b      	ldrb	r3, [r3, #0]
 8000738:	0018      	movs	r0, r3
 800073a:	f000 f80f 	bl	800075c <printChar>
		ptr++;
 800073e:	68bb      	ldr	r3, [r7, #8]
 8000740:	3301      	adds	r3, #1
 8000742:	60bb      	str	r3, [r7, #8]
	for(volatile int i = f; i<len; i++){
 8000744:	697b      	ldr	r3, [r7, #20]
 8000746:	3301      	adds	r3, #1
 8000748:	617b      	str	r3, [r7, #20]
 800074a:	697b      	ldr	r3, [r7, #20]
 800074c:	687a      	ldr	r2, [r7, #4]
 800074e:	429a      	cmp	r2, r3
 8000750:	dcf0      	bgt.n	8000734 <_print+0x12>
	}
	return len; // return length
 8000752:	687b      	ldr	r3, [r7, #4]
}
 8000754:	0018      	movs	r0, r3
 8000756:	46bd      	mov	sp, r7
 8000758:	b006      	add	sp, #24
 800075a:	bd80      	pop	{r7, pc}

0800075c <printChar>:

void printChar(uint8_t c){
 800075c:	b580      	push	{r7, lr}
 800075e:	b082      	sub	sp, #8
 8000760:	af00      	add	r7, sp, #0
 8000762:	0002      	movs	r2, r0
 8000764:	1dfb      	adds	r3, r7, #7
 8000766:	701a      	strb	r2, [r3, #0]
	while(!(USART2->ISR & USART_ISR_TXE_TXFNF)); // when messages are sent.
 8000768:	46c0      	nop			; (mov r8, r8)
 800076a:	4b06      	ldr	r3, [pc, #24]	; (8000784 <printChar+0x28>)
 800076c:	69db      	ldr	r3, [r3, #28]
 800076e:	2280      	movs	r2, #128	; 0x80
 8000770:	4013      	ands	r3, r2
 8000772:	d0fa      	beq.n	800076a <printChar+0xe>
	USART2->TDR = c; // Transmit data register is taken character to send a message.
 8000774:	4b03      	ldr	r3, [pc, #12]	; (8000784 <printChar+0x28>)
 8000776:	1dfa      	adds	r2, r7, #7
 8000778:	7812      	ldrb	r2, [r2, #0]
 800077a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800077c:	46c0      	nop			; (mov r8, r8)
 800077e:	46bd      	mov	sp, r7
 8000780:	b002      	add	sp, #8
 8000782:	bd80      	pop	{r7, pc}
 8000784:	40004400 	.word	0x40004400

08000788 <clearSSD>:

	USART2->CR1 |= USART_CR1_RE; // RE: Receiver enable
	USART2->CR1 |= USART_CR1_TE; // TE: Transmitter enable
}

void clearSSD(void){ // Clear display
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0
	GPIOB -> ODR |= (1U << 0); //PB0 -> A
 800078c:	4b16      	ldr	r3, [pc, #88]	; (80007e8 <clearSSD+0x60>)
 800078e:	695a      	ldr	r2, [r3, #20]
 8000790:	4b15      	ldr	r3, [pc, #84]	; (80007e8 <clearSSD+0x60>)
 8000792:	2101      	movs	r1, #1
 8000794:	430a      	orrs	r2, r1
 8000796:	615a      	str	r2, [r3, #20]
	GPIOB -> ODR |= (1U << 1); //PB1 -> B
 8000798:	4b13      	ldr	r3, [pc, #76]	; (80007e8 <clearSSD+0x60>)
 800079a:	695a      	ldr	r2, [r3, #20]
 800079c:	4b12      	ldr	r3, [pc, #72]	; (80007e8 <clearSSD+0x60>)
 800079e:	2102      	movs	r1, #2
 80007a0:	430a      	orrs	r2, r1
 80007a2:	615a      	str	r2, [r3, #20]
	GPIOB -> ODR |= (1U << 2); //PB2 -> C
 80007a4:	4b10      	ldr	r3, [pc, #64]	; (80007e8 <clearSSD+0x60>)
 80007a6:	695a      	ldr	r2, [r3, #20]
 80007a8:	4b0f      	ldr	r3, [pc, #60]	; (80007e8 <clearSSD+0x60>)
 80007aa:	2104      	movs	r1, #4
 80007ac:	430a      	orrs	r2, r1
 80007ae:	615a      	str	r2, [r3, #20]
	GPIOB -> ODR |= (1U << 3); //PB3 -> D
 80007b0:	4b0d      	ldr	r3, [pc, #52]	; (80007e8 <clearSSD+0x60>)
 80007b2:	695a      	ldr	r2, [r3, #20]
 80007b4:	4b0c      	ldr	r3, [pc, #48]	; (80007e8 <clearSSD+0x60>)
 80007b6:	2108      	movs	r1, #8
 80007b8:	430a      	orrs	r2, r1
 80007ba:	615a      	str	r2, [r3, #20]
	GPIOB -> ODR |= (1U << 4); //PB4 -> E
 80007bc:	4b0a      	ldr	r3, [pc, #40]	; (80007e8 <clearSSD+0x60>)
 80007be:	695a      	ldr	r2, [r3, #20]
 80007c0:	4b09      	ldr	r3, [pc, #36]	; (80007e8 <clearSSD+0x60>)
 80007c2:	2110      	movs	r1, #16
 80007c4:	430a      	orrs	r2, r1
 80007c6:	615a      	str	r2, [r3, #20]
	GPIOB -> ODR |= (1U << 5); //PB5 -> F
 80007c8:	4b07      	ldr	r3, [pc, #28]	; (80007e8 <clearSSD+0x60>)
 80007ca:	695a      	ldr	r2, [r3, #20]
 80007cc:	4b06      	ldr	r3, [pc, #24]	; (80007e8 <clearSSD+0x60>)
 80007ce:	2120      	movs	r1, #32
 80007d0:	430a      	orrs	r2, r1
 80007d2:	615a      	str	r2, [r3, #20]
	GPIOB -> ODR |= (1U << 6); //PB6 -> G
 80007d4:	4b04      	ldr	r3, [pc, #16]	; (80007e8 <clearSSD+0x60>)
 80007d6:	695a      	ldr	r2, [r3, #20]
 80007d8:	4b03      	ldr	r3, [pc, #12]	; (80007e8 <clearSSD+0x60>)
 80007da:	2140      	movs	r1, #64	; 0x40
 80007dc:	430a      	orrs	r2, r1
 80007de:	615a      	str	r2, [r3, #20]
}
 80007e0:	46c0      	nop			; (mov r8, r8)
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	46c0      	nop			; (mov r8, r8)
 80007e8:	50000400 	.word	0x50000400

080007ec <setSSD>:

void setSSD(int x){ // choose number we want and its leds are turned on.
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b082      	sub	sp, #8
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
	clearSSD();
 80007f4:	f7ff ffc8 	bl	8000788 <clearSSD>
	switch(x){
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	2b09      	cmp	r3, #9
 80007fc:	d84b      	bhi.n	8000896 <setSSD+0xaa>
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	009a      	lsls	r2, r3, #2
 8000802:	4b27      	ldr	r3, [pc, #156]	; (80008a0 <setSSD+0xb4>)
 8000804:	18d3      	adds	r3, r2, r3
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	469f      	mov	pc, r3
		case 0:
			GPIOB->ODR &= ~(0x3F); // A,B,C,D,E,F is on
 800080a:	4b26      	ldr	r3, [pc, #152]	; (80008a4 <setSSD+0xb8>)
 800080c:	695a      	ldr	r2, [r3, #20]
 800080e:	4b25      	ldr	r3, [pc, #148]	; (80008a4 <setSSD+0xb8>)
 8000810:	213f      	movs	r1, #63	; 0x3f
 8000812:	438a      	bics	r2, r1
 8000814:	615a      	str	r2, [r3, #20]
			break;
 8000816:	e03e      	b.n	8000896 <setSSD+0xaa>
		case 1:
			GPIOB->ODR &= ~(0x6); // B,C is on
 8000818:	4b22      	ldr	r3, [pc, #136]	; (80008a4 <setSSD+0xb8>)
 800081a:	695a      	ldr	r2, [r3, #20]
 800081c:	4b21      	ldr	r3, [pc, #132]	; (80008a4 <setSSD+0xb8>)
 800081e:	2106      	movs	r1, #6
 8000820:	438a      	bics	r2, r1
 8000822:	615a      	str	r2, [r3, #20]
			break;
 8000824:	e037      	b.n	8000896 <setSSD+0xaa>
		case 2:
			GPIOB->ODR &= ~(0x5B); // A,B,D,E,G is on
 8000826:	4b1f      	ldr	r3, [pc, #124]	; (80008a4 <setSSD+0xb8>)
 8000828:	695a      	ldr	r2, [r3, #20]
 800082a:	4b1e      	ldr	r3, [pc, #120]	; (80008a4 <setSSD+0xb8>)
 800082c:	215b      	movs	r1, #91	; 0x5b
 800082e:	438a      	bics	r2, r1
 8000830:	615a      	str	r2, [r3, #20]
			break;
 8000832:	e030      	b.n	8000896 <setSSD+0xaa>
		case 3:
			GPIOB->ODR &= ~(0x4F); // A,B,C,D,G is on
 8000834:	4b1b      	ldr	r3, [pc, #108]	; (80008a4 <setSSD+0xb8>)
 8000836:	695a      	ldr	r2, [r3, #20]
 8000838:	4b1a      	ldr	r3, [pc, #104]	; (80008a4 <setSSD+0xb8>)
 800083a:	214f      	movs	r1, #79	; 0x4f
 800083c:	438a      	bics	r2, r1
 800083e:	615a      	str	r2, [r3, #20]
			break;
 8000840:	e029      	b.n	8000896 <setSSD+0xaa>
		case 4:
			GPIOB->ODR &= ~(0x66); // B,C,F,G is on
 8000842:	4b18      	ldr	r3, [pc, #96]	; (80008a4 <setSSD+0xb8>)
 8000844:	695a      	ldr	r2, [r3, #20]
 8000846:	4b17      	ldr	r3, [pc, #92]	; (80008a4 <setSSD+0xb8>)
 8000848:	2166      	movs	r1, #102	; 0x66
 800084a:	438a      	bics	r2, r1
 800084c:	615a      	str	r2, [r3, #20]
			break;
 800084e:	e022      	b.n	8000896 <setSSD+0xaa>
		case 5:
			GPIOB->ODR &= ~(0x6D); // A,C,D,F,G is on
 8000850:	4b14      	ldr	r3, [pc, #80]	; (80008a4 <setSSD+0xb8>)
 8000852:	695a      	ldr	r2, [r3, #20]
 8000854:	4b13      	ldr	r3, [pc, #76]	; (80008a4 <setSSD+0xb8>)
 8000856:	216d      	movs	r1, #109	; 0x6d
 8000858:	438a      	bics	r2, r1
 800085a:	615a      	str	r2, [r3, #20]
			break;
 800085c:	e01b      	b.n	8000896 <setSSD+0xaa>
		case 6:
			GPIOB->ODR &= ~(0x7D); // A,C,D,E,F,G is on
 800085e:	4b11      	ldr	r3, [pc, #68]	; (80008a4 <setSSD+0xb8>)
 8000860:	695a      	ldr	r2, [r3, #20]
 8000862:	4b10      	ldr	r3, [pc, #64]	; (80008a4 <setSSD+0xb8>)
 8000864:	217d      	movs	r1, #125	; 0x7d
 8000866:	438a      	bics	r2, r1
 8000868:	615a      	str	r2, [r3, #20]
			break;
 800086a:	e014      	b.n	8000896 <setSSD+0xaa>
		case 7:
			GPIOB->ODR &= ~(0x7); // A,B,C is on
 800086c:	4b0d      	ldr	r3, [pc, #52]	; (80008a4 <setSSD+0xb8>)
 800086e:	695a      	ldr	r2, [r3, #20]
 8000870:	4b0c      	ldr	r3, [pc, #48]	; (80008a4 <setSSD+0xb8>)
 8000872:	2107      	movs	r1, #7
 8000874:	438a      	bics	r2, r1
 8000876:	615a      	str	r2, [r3, #20]
			break;
 8000878:	e00d      	b.n	8000896 <setSSD+0xaa>
		case 8:
			GPIOB->ODR &= ~(0x7F); // A,B,C,D,E,F,G is on
 800087a:	4b0a      	ldr	r3, [pc, #40]	; (80008a4 <setSSD+0xb8>)
 800087c:	695a      	ldr	r2, [r3, #20]
 800087e:	4b09      	ldr	r3, [pc, #36]	; (80008a4 <setSSD+0xb8>)
 8000880:	217f      	movs	r1, #127	; 0x7f
 8000882:	438a      	bics	r2, r1
 8000884:	615a      	str	r2, [r3, #20]
			break;
 8000886:	e006      	b.n	8000896 <setSSD+0xaa>
		case 9:
			GPIOB->ODR &= ~(0x6F); //A,B,C,D,F,G is on; E is off
 8000888:	4b06      	ldr	r3, [pc, #24]	; (80008a4 <setSSD+0xb8>)
 800088a:	695a      	ldr	r2, [r3, #20]
 800088c:	4b05      	ldr	r3, [pc, #20]	; (80008a4 <setSSD+0xb8>)
 800088e:	216f      	movs	r1, #111	; 0x6f
 8000890:	438a      	bics	r2, r1
 8000892:	615a      	str	r2, [r3, #20]
			break;
 8000894:	46c0      	nop			; (mov r8, r8)
	}
}
 8000896:	46c0      	nop			; (mov r8, r8)
 8000898:	46bd      	mov	sp, r7
 800089a:	b002      	add	sp, #8
 800089c:	bd80      	pop	{r7, pc}
 800089e:	46c0      	nop			; (mov r8, r8)
 80008a0:	08000a8c 	.word	0x08000a8c
 80008a4:	50000400 	.word	0x50000400

080008a8 <Delay>:
	GPIOA ->ODR |= (1U << 6); // D2 digit -> PA6
	GPIOA ->ODR |= (1U << 0); // D3 digit -> PA0
	GPIOA ->ODR |= (1U << 5); // D4 digit -> PA5
	setSSD(0);
}
void Delay(volatile uint32_t time){
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b082      	sub	sp, #8
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
    for(; time>0; time--);
 80008b0:	e002      	b.n	80008b8 <Delay+0x10>
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	3b01      	subs	r3, #1
 80008b6:	607b      	str	r3, [r7, #4]
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d1f9      	bne.n	80008b2 <Delay+0xa>
}
 80008be:	46c0      	nop			; (mov r8, r8)
 80008c0:	46c0      	nop			; (mov r8, r8)
 80008c2:	46bd      	mov	sp, r7
 80008c4:	b002      	add	sp, #8
 80008c6:	bd80      	pop	{r7, pc}

080008c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008cc:	e7fe      	b.n	80008cc <NMI_Handler+0x4>

080008ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008ce:	b580      	push	{r7, lr}
 80008d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008d2:	e7fe      	b.n	80008d2 <HardFault_Handler+0x4>

080008d4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80008d8:	46c0      	nop			; (mov r8, r8)
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}

080008de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008de:	b580      	push	{r7, lr}
 80008e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008e2:	46c0      	nop			; (mov r8, r8)
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}

080008e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008ec:	f000 f832 	bl	8000954 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008f0:	46c0      	nop			; (mov r8, r8)
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}

080008f6 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008f6:	b580      	push	{r7, lr}
 80008f8:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008fa:	46c0      	nop			; (mov r8, r8)
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}

08000900 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000900:	480d      	ldr	r0, [pc, #52]	; (8000938 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000902:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000904:	f7ff fff7 	bl	80008f6 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000908:	480c      	ldr	r0, [pc, #48]	; (800093c <LoopForever+0x6>)
  ldr r1, =_edata
 800090a:	490d      	ldr	r1, [pc, #52]	; (8000940 <LoopForever+0xa>)
  ldr r2, =_sidata
 800090c:	4a0d      	ldr	r2, [pc, #52]	; (8000944 <LoopForever+0xe>)
  movs r3, #0
 800090e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000910:	e002      	b.n	8000918 <LoopCopyDataInit>

08000912 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000912:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000914:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000916:	3304      	adds	r3, #4

08000918 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000918:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800091a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800091c:	d3f9      	bcc.n	8000912 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800091e:	4a0a      	ldr	r2, [pc, #40]	; (8000948 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000920:	4c0a      	ldr	r4, [pc, #40]	; (800094c <LoopForever+0x16>)
  movs r3, #0
 8000922:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000924:	e001      	b.n	800092a <LoopFillZerobss>

08000926 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000926:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000928:	3204      	adds	r2, #4

0800092a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800092a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800092c:	d3fb      	bcc.n	8000926 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800092e:	f000 f873 	bl	8000a18 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000932:	f7ff fda1 	bl	8000478 <main>

08000936 <LoopForever>:

LoopForever:
  b LoopForever
 8000936:	e7fe      	b.n	8000936 <LoopForever>
  ldr   r0, =_estack
 8000938:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 800093c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000940:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000944:	08000ae4 	.word	0x08000ae4
  ldr r2, =_sbss
 8000948:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 800094c:	20000028 	.word	0x20000028

08000950 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000950:	e7fe      	b.n	8000950 <ADC1_IRQHandler>
	...

08000954 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000958:	4b05      	ldr	r3, [pc, #20]	; (8000970 <HAL_IncTick+0x1c>)
 800095a:	781b      	ldrb	r3, [r3, #0]
 800095c:	001a      	movs	r2, r3
 800095e:	4b05      	ldr	r3, [pc, #20]	; (8000974 <HAL_IncTick+0x20>)
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	18d2      	adds	r2, r2, r3
 8000964:	4b03      	ldr	r3, [pc, #12]	; (8000974 <HAL_IncTick+0x20>)
 8000966:	601a      	str	r2, [r3, #0]
}
 8000968:	46c0      	nop			; (mov r8, r8)
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
 800096e:	46c0      	nop			; (mov r8, r8)
 8000970:	20000000 	.word	0x20000000
 8000974:	20000024 	.word	0x20000024

08000978 <__itoa>:
 8000978:	1e93      	subs	r3, r2, #2
 800097a:	b510      	push	{r4, lr}
 800097c:	000c      	movs	r4, r1
 800097e:	2b22      	cmp	r3, #34	; 0x22
 8000980:	d904      	bls.n	800098c <__itoa+0x14>
 8000982:	2300      	movs	r3, #0
 8000984:	001c      	movs	r4, r3
 8000986:	700b      	strb	r3, [r1, #0]
 8000988:	0020      	movs	r0, r4
 800098a:	bd10      	pop	{r4, pc}
 800098c:	2a0a      	cmp	r2, #10
 800098e:	d109      	bne.n	80009a4 <__itoa+0x2c>
 8000990:	2800      	cmp	r0, #0
 8000992:	da07      	bge.n	80009a4 <__itoa+0x2c>
 8000994:	232d      	movs	r3, #45	; 0x2d
 8000996:	700b      	strb	r3, [r1, #0]
 8000998:	2101      	movs	r1, #1
 800099a:	4240      	negs	r0, r0
 800099c:	1861      	adds	r1, r4, r1
 800099e:	f000 f807 	bl	80009b0 <__utoa>
 80009a2:	e7f1      	b.n	8000988 <__itoa+0x10>
 80009a4:	2100      	movs	r1, #0
 80009a6:	e7f9      	b.n	800099c <__itoa+0x24>

080009a8 <itoa>:
 80009a8:	b510      	push	{r4, lr}
 80009aa:	f7ff ffe5 	bl	8000978 <__itoa>
 80009ae:	bd10      	pop	{r4, pc}

080009b0 <__utoa>:
 80009b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009b2:	000c      	movs	r4, r1
 80009b4:	0016      	movs	r6, r2
 80009b6:	b08d      	sub	sp, #52	; 0x34
 80009b8:	2225      	movs	r2, #37	; 0x25
 80009ba:	0007      	movs	r7, r0
 80009bc:	4915      	ldr	r1, [pc, #84]	; (8000a14 <__utoa+0x64>)
 80009be:	a802      	add	r0, sp, #8
 80009c0:	f000 f84e 	bl	8000a60 <memcpy>
 80009c4:	1e62      	subs	r2, r4, #1
 80009c6:	1eb3      	subs	r3, r6, #2
 80009c8:	2500      	movs	r5, #0
 80009ca:	9201      	str	r2, [sp, #4]
 80009cc:	2b22      	cmp	r3, #34	; 0x22
 80009ce:	d904      	bls.n	80009da <__utoa+0x2a>
 80009d0:	7025      	strb	r5, [r4, #0]
 80009d2:	002c      	movs	r4, r5
 80009d4:	0020      	movs	r0, r4
 80009d6:	b00d      	add	sp, #52	; 0x34
 80009d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80009da:	0038      	movs	r0, r7
 80009dc:	0031      	movs	r1, r6
 80009de:	f7ff fc17 	bl	8000210 <__aeabi_uidivmod>
 80009e2:	000b      	movs	r3, r1
 80009e4:	aa02      	add	r2, sp, #8
 80009e6:	5cd3      	ldrb	r3, [r2, r3]
 80009e8:	9a01      	ldr	r2, [sp, #4]
 80009ea:	0029      	movs	r1, r5
 80009ec:	3501      	adds	r5, #1
 80009ee:	5553      	strb	r3, [r2, r5]
 80009f0:	003b      	movs	r3, r7
 80009f2:	0007      	movs	r7, r0
 80009f4:	429e      	cmp	r6, r3
 80009f6:	d9f0      	bls.n	80009da <__utoa+0x2a>
 80009f8:	2300      	movs	r3, #0
 80009fa:	0022      	movs	r2, r4
 80009fc:	5563      	strb	r3, [r4, r5]
 80009fe:	000b      	movs	r3, r1
 8000a00:	1ac8      	subs	r0, r1, r3
 8000a02:	4283      	cmp	r3, r0
 8000a04:	dde6      	ble.n	80009d4 <__utoa+0x24>
 8000a06:	7810      	ldrb	r0, [r2, #0]
 8000a08:	5ce5      	ldrb	r5, [r4, r3]
 8000a0a:	7015      	strb	r5, [r2, #0]
 8000a0c:	54e0      	strb	r0, [r4, r3]
 8000a0e:	3201      	adds	r2, #1
 8000a10:	3b01      	subs	r3, #1
 8000a12:	e7f5      	b.n	8000a00 <__utoa+0x50>
 8000a14:	08000ab4 	.word	0x08000ab4

08000a18 <__libc_init_array>:
 8000a18:	b570      	push	{r4, r5, r6, lr}
 8000a1a:	2600      	movs	r6, #0
 8000a1c:	4c0c      	ldr	r4, [pc, #48]	; (8000a50 <__libc_init_array+0x38>)
 8000a1e:	4d0d      	ldr	r5, [pc, #52]	; (8000a54 <__libc_init_array+0x3c>)
 8000a20:	1b64      	subs	r4, r4, r5
 8000a22:	10a4      	asrs	r4, r4, #2
 8000a24:	42a6      	cmp	r6, r4
 8000a26:	d109      	bne.n	8000a3c <__libc_init_array+0x24>
 8000a28:	2600      	movs	r6, #0
 8000a2a:	f000 f823 	bl	8000a74 <_init>
 8000a2e:	4c0a      	ldr	r4, [pc, #40]	; (8000a58 <__libc_init_array+0x40>)
 8000a30:	4d0a      	ldr	r5, [pc, #40]	; (8000a5c <__libc_init_array+0x44>)
 8000a32:	1b64      	subs	r4, r4, r5
 8000a34:	10a4      	asrs	r4, r4, #2
 8000a36:	42a6      	cmp	r6, r4
 8000a38:	d105      	bne.n	8000a46 <__libc_init_array+0x2e>
 8000a3a:	bd70      	pop	{r4, r5, r6, pc}
 8000a3c:	00b3      	lsls	r3, r6, #2
 8000a3e:	58eb      	ldr	r3, [r5, r3]
 8000a40:	4798      	blx	r3
 8000a42:	3601      	adds	r6, #1
 8000a44:	e7ee      	b.n	8000a24 <__libc_init_array+0xc>
 8000a46:	00b3      	lsls	r3, r6, #2
 8000a48:	58eb      	ldr	r3, [r5, r3]
 8000a4a:	4798      	blx	r3
 8000a4c:	3601      	adds	r6, #1
 8000a4e:	e7f2      	b.n	8000a36 <__libc_init_array+0x1e>
 8000a50:	08000adc 	.word	0x08000adc
 8000a54:	08000adc 	.word	0x08000adc
 8000a58:	08000ae0 	.word	0x08000ae0
 8000a5c:	08000adc 	.word	0x08000adc

08000a60 <memcpy>:
 8000a60:	2300      	movs	r3, #0
 8000a62:	b510      	push	{r4, lr}
 8000a64:	429a      	cmp	r2, r3
 8000a66:	d100      	bne.n	8000a6a <memcpy+0xa>
 8000a68:	bd10      	pop	{r4, pc}
 8000a6a:	5ccc      	ldrb	r4, [r1, r3]
 8000a6c:	54c4      	strb	r4, [r0, r3]
 8000a6e:	3301      	adds	r3, #1
 8000a70:	e7f8      	b.n	8000a64 <memcpy+0x4>
	...

08000a74 <_init>:
 8000a74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a76:	46c0      	nop			; (mov r8, r8)
 8000a78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a7a:	bc08      	pop	{r3}
 8000a7c:	469e      	mov	lr, r3
 8000a7e:	4770      	bx	lr

08000a80 <_fini>:
 8000a80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a82:	46c0      	nop			; (mov r8, r8)
 8000a84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a86:	bc08      	pop	{r3}
 8000a88:	469e      	mov	lr, r3
 8000a8a:	4770      	bx	lr
