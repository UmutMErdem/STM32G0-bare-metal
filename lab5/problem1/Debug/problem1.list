
problem1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000007d4  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000890  08000890  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000890  08000890  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08000890  08000890  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000890  08000890  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000890  08000890  00010890  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000894  08000894  00010894  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08000898  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000002c  20000004  0800089c  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000030  0800089c  00020030  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000017f9  00000000  00000000  0002006f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000006b6  00000000  00000000  00021868  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000228  00000000  00000000  00021f20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000018d  00000000  00000000  00022148  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001357d  00000000  00000000  000222d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000241e  00000000  00000000  00035852  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007da46  00000000  00000000  00037c70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000680  00000000  00000000  000b56b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004f  00000000  00000000  000b5d38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000004 	.word	0x20000004
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08000878 	.word	0x08000878

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000008 	.word	0x20000008
 8000100:	08000878 	.word	0x08000878

08000104 <__divsi3>:
 8000104:	4603      	mov	r3, r0
 8000106:	430b      	orrs	r3, r1
 8000108:	d47f      	bmi.n	800020a <__divsi3+0x106>
 800010a:	2200      	movs	r2, #0
 800010c:	0843      	lsrs	r3, r0, #1
 800010e:	428b      	cmp	r3, r1
 8000110:	d374      	bcc.n	80001fc <__divsi3+0xf8>
 8000112:	0903      	lsrs	r3, r0, #4
 8000114:	428b      	cmp	r3, r1
 8000116:	d35f      	bcc.n	80001d8 <__divsi3+0xd4>
 8000118:	0a03      	lsrs	r3, r0, #8
 800011a:	428b      	cmp	r3, r1
 800011c:	d344      	bcc.n	80001a8 <__divsi3+0xa4>
 800011e:	0b03      	lsrs	r3, r0, #12
 8000120:	428b      	cmp	r3, r1
 8000122:	d328      	bcc.n	8000176 <__divsi3+0x72>
 8000124:	0c03      	lsrs	r3, r0, #16
 8000126:	428b      	cmp	r3, r1
 8000128:	d30d      	bcc.n	8000146 <__divsi3+0x42>
 800012a:	22ff      	movs	r2, #255	; 0xff
 800012c:	0209      	lsls	r1, r1, #8
 800012e:	ba12      	rev	r2, r2
 8000130:	0c03      	lsrs	r3, r0, #16
 8000132:	428b      	cmp	r3, r1
 8000134:	d302      	bcc.n	800013c <__divsi3+0x38>
 8000136:	1212      	asrs	r2, r2, #8
 8000138:	0209      	lsls	r1, r1, #8
 800013a:	d065      	beq.n	8000208 <__divsi3+0x104>
 800013c:	0b03      	lsrs	r3, r0, #12
 800013e:	428b      	cmp	r3, r1
 8000140:	d319      	bcc.n	8000176 <__divsi3+0x72>
 8000142:	e000      	b.n	8000146 <__divsi3+0x42>
 8000144:	0a09      	lsrs	r1, r1, #8
 8000146:	0bc3      	lsrs	r3, r0, #15
 8000148:	428b      	cmp	r3, r1
 800014a:	d301      	bcc.n	8000150 <__divsi3+0x4c>
 800014c:	03cb      	lsls	r3, r1, #15
 800014e:	1ac0      	subs	r0, r0, r3
 8000150:	4152      	adcs	r2, r2
 8000152:	0b83      	lsrs	r3, r0, #14
 8000154:	428b      	cmp	r3, r1
 8000156:	d301      	bcc.n	800015c <__divsi3+0x58>
 8000158:	038b      	lsls	r3, r1, #14
 800015a:	1ac0      	subs	r0, r0, r3
 800015c:	4152      	adcs	r2, r2
 800015e:	0b43      	lsrs	r3, r0, #13
 8000160:	428b      	cmp	r3, r1
 8000162:	d301      	bcc.n	8000168 <__divsi3+0x64>
 8000164:	034b      	lsls	r3, r1, #13
 8000166:	1ac0      	subs	r0, r0, r3
 8000168:	4152      	adcs	r2, r2
 800016a:	0b03      	lsrs	r3, r0, #12
 800016c:	428b      	cmp	r3, r1
 800016e:	d301      	bcc.n	8000174 <__divsi3+0x70>
 8000170:	030b      	lsls	r3, r1, #12
 8000172:	1ac0      	subs	r0, r0, r3
 8000174:	4152      	adcs	r2, r2
 8000176:	0ac3      	lsrs	r3, r0, #11
 8000178:	428b      	cmp	r3, r1
 800017a:	d301      	bcc.n	8000180 <__divsi3+0x7c>
 800017c:	02cb      	lsls	r3, r1, #11
 800017e:	1ac0      	subs	r0, r0, r3
 8000180:	4152      	adcs	r2, r2
 8000182:	0a83      	lsrs	r3, r0, #10
 8000184:	428b      	cmp	r3, r1
 8000186:	d301      	bcc.n	800018c <__divsi3+0x88>
 8000188:	028b      	lsls	r3, r1, #10
 800018a:	1ac0      	subs	r0, r0, r3
 800018c:	4152      	adcs	r2, r2
 800018e:	0a43      	lsrs	r3, r0, #9
 8000190:	428b      	cmp	r3, r1
 8000192:	d301      	bcc.n	8000198 <__divsi3+0x94>
 8000194:	024b      	lsls	r3, r1, #9
 8000196:	1ac0      	subs	r0, r0, r3
 8000198:	4152      	adcs	r2, r2
 800019a:	0a03      	lsrs	r3, r0, #8
 800019c:	428b      	cmp	r3, r1
 800019e:	d301      	bcc.n	80001a4 <__divsi3+0xa0>
 80001a0:	020b      	lsls	r3, r1, #8
 80001a2:	1ac0      	subs	r0, r0, r3
 80001a4:	4152      	adcs	r2, r2
 80001a6:	d2cd      	bcs.n	8000144 <__divsi3+0x40>
 80001a8:	09c3      	lsrs	r3, r0, #7
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__divsi3+0xae>
 80001ae:	01cb      	lsls	r3, r1, #7
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0983      	lsrs	r3, r0, #6
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__divsi3+0xba>
 80001ba:	018b      	lsls	r3, r1, #6
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0943      	lsrs	r3, r0, #5
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__divsi3+0xc6>
 80001c6:	014b      	lsls	r3, r1, #5
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	0903      	lsrs	r3, r0, #4
 80001ce:	428b      	cmp	r3, r1
 80001d0:	d301      	bcc.n	80001d6 <__divsi3+0xd2>
 80001d2:	010b      	lsls	r3, r1, #4
 80001d4:	1ac0      	subs	r0, r0, r3
 80001d6:	4152      	adcs	r2, r2
 80001d8:	08c3      	lsrs	r3, r0, #3
 80001da:	428b      	cmp	r3, r1
 80001dc:	d301      	bcc.n	80001e2 <__divsi3+0xde>
 80001de:	00cb      	lsls	r3, r1, #3
 80001e0:	1ac0      	subs	r0, r0, r3
 80001e2:	4152      	adcs	r2, r2
 80001e4:	0883      	lsrs	r3, r0, #2
 80001e6:	428b      	cmp	r3, r1
 80001e8:	d301      	bcc.n	80001ee <__divsi3+0xea>
 80001ea:	008b      	lsls	r3, r1, #2
 80001ec:	1ac0      	subs	r0, r0, r3
 80001ee:	4152      	adcs	r2, r2
 80001f0:	0843      	lsrs	r3, r0, #1
 80001f2:	428b      	cmp	r3, r1
 80001f4:	d301      	bcc.n	80001fa <__divsi3+0xf6>
 80001f6:	004b      	lsls	r3, r1, #1
 80001f8:	1ac0      	subs	r0, r0, r3
 80001fa:	4152      	adcs	r2, r2
 80001fc:	1a41      	subs	r1, r0, r1
 80001fe:	d200      	bcs.n	8000202 <__divsi3+0xfe>
 8000200:	4601      	mov	r1, r0
 8000202:	4152      	adcs	r2, r2
 8000204:	4610      	mov	r0, r2
 8000206:	4770      	bx	lr
 8000208:	e05d      	b.n	80002c6 <__divsi3+0x1c2>
 800020a:	0fca      	lsrs	r2, r1, #31
 800020c:	d000      	beq.n	8000210 <__divsi3+0x10c>
 800020e:	4249      	negs	r1, r1
 8000210:	1003      	asrs	r3, r0, #32
 8000212:	d300      	bcc.n	8000216 <__divsi3+0x112>
 8000214:	4240      	negs	r0, r0
 8000216:	4053      	eors	r3, r2
 8000218:	2200      	movs	r2, #0
 800021a:	469c      	mov	ip, r3
 800021c:	0903      	lsrs	r3, r0, #4
 800021e:	428b      	cmp	r3, r1
 8000220:	d32d      	bcc.n	800027e <__divsi3+0x17a>
 8000222:	0a03      	lsrs	r3, r0, #8
 8000224:	428b      	cmp	r3, r1
 8000226:	d312      	bcc.n	800024e <__divsi3+0x14a>
 8000228:	22fc      	movs	r2, #252	; 0xfc
 800022a:	0189      	lsls	r1, r1, #6
 800022c:	ba12      	rev	r2, r2
 800022e:	0a03      	lsrs	r3, r0, #8
 8000230:	428b      	cmp	r3, r1
 8000232:	d30c      	bcc.n	800024e <__divsi3+0x14a>
 8000234:	0189      	lsls	r1, r1, #6
 8000236:	1192      	asrs	r2, r2, #6
 8000238:	428b      	cmp	r3, r1
 800023a:	d308      	bcc.n	800024e <__divsi3+0x14a>
 800023c:	0189      	lsls	r1, r1, #6
 800023e:	1192      	asrs	r2, r2, #6
 8000240:	428b      	cmp	r3, r1
 8000242:	d304      	bcc.n	800024e <__divsi3+0x14a>
 8000244:	0189      	lsls	r1, r1, #6
 8000246:	d03a      	beq.n	80002be <__divsi3+0x1ba>
 8000248:	1192      	asrs	r2, r2, #6
 800024a:	e000      	b.n	800024e <__divsi3+0x14a>
 800024c:	0989      	lsrs	r1, r1, #6
 800024e:	09c3      	lsrs	r3, r0, #7
 8000250:	428b      	cmp	r3, r1
 8000252:	d301      	bcc.n	8000258 <__divsi3+0x154>
 8000254:	01cb      	lsls	r3, r1, #7
 8000256:	1ac0      	subs	r0, r0, r3
 8000258:	4152      	adcs	r2, r2
 800025a:	0983      	lsrs	r3, r0, #6
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x160>
 8000260:	018b      	lsls	r3, r1, #6
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0943      	lsrs	r3, r0, #5
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x16c>
 800026c:	014b      	lsls	r3, r1, #5
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0903      	lsrs	r3, r0, #4
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x178>
 8000278:	010b      	lsls	r3, r1, #4
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	08c3      	lsrs	r3, r0, #3
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x184>
 8000284:	00cb      	lsls	r3, r1, #3
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0883      	lsrs	r3, r0, #2
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x190>
 8000290:	008b      	lsls	r3, r1, #2
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	d2d9      	bcs.n	800024c <__divsi3+0x148>
 8000298:	0843      	lsrs	r3, r0, #1
 800029a:	428b      	cmp	r3, r1
 800029c:	d301      	bcc.n	80002a2 <__divsi3+0x19e>
 800029e:	004b      	lsls	r3, r1, #1
 80002a0:	1ac0      	subs	r0, r0, r3
 80002a2:	4152      	adcs	r2, r2
 80002a4:	1a41      	subs	r1, r0, r1
 80002a6:	d200      	bcs.n	80002aa <__divsi3+0x1a6>
 80002a8:	4601      	mov	r1, r0
 80002aa:	4663      	mov	r3, ip
 80002ac:	4152      	adcs	r2, r2
 80002ae:	105b      	asrs	r3, r3, #1
 80002b0:	4610      	mov	r0, r2
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x1b4>
 80002b4:	4240      	negs	r0, r0
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	d500      	bpl.n	80002bc <__divsi3+0x1b8>
 80002ba:	4249      	negs	r1, r1
 80002bc:	4770      	bx	lr
 80002be:	4663      	mov	r3, ip
 80002c0:	105b      	asrs	r3, r3, #1
 80002c2:	d300      	bcc.n	80002c6 <__divsi3+0x1c2>
 80002c4:	4240      	negs	r0, r0
 80002c6:	b501      	push	{r0, lr}
 80002c8:	2000      	movs	r0, #0
 80002ca:	f000 f805 	bl	80002d8 <__aeabi_idiv0>
 80002ce:	bd02      	pop	{r1, pc}

080002d0 <__aeabi_idivmod>:
 80002d0:	2900      	cmp	r1, #0
 80002d2:	d0f8      	beq.n	80002c6 <__divsi3+0x1c2>
 80002d4:	e716      	b.n	8000104 <__divsi3>
 80002d6:	4770      	bx	lr

080002d8 <__aeabi_idiv0>:
 80002d8:	4770      	bx	lr
 80002da:	46c0      	nop			; (mov r8, r8)

080002dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	b082      	sub	sp, #8
 80002e0:	af00      	add	r7, sp, #0
 80002e2:	0002      	movs	r2, r0
 80002e4:	1dfb      	adds	r3, r7, #7
 80002e6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80002e8:	1dfb      	adds	r3, r7, #7
 80002ea:	781b      	ldrb	r3, [r3, #0]
 80002ec:	2b7f      	cmp	r3, #127	; 0x7f
 80002ee:	d809      	bhi.n	8000304 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80002f0:	1dfb      	adds	r3, r7, #7
 80002f2:	781b      	ldrb	r3, [r3, #0]
 80002f4:	001a      	movs	r2, r3
 80002f6:	231f      	movs	r3, #31
 80002f8:	401a      	ands	r2, r3
 80002fa:	4b04      	ldr	r3, [pc, #16]	; (800030c <__NVIC_EnableIRQ+0x30>)
 80002fc:	2101      	movs	r1, #1
 80002fe:	4091      	lsls	r1, r2
 8000300:	000a      	movs	r2, r1
 8000302:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000304:	46c0      	nop			; (mov r8, r8)
 8000306:	46bd      	mov	sp, r7
 8000308:	b002      	add	sp, #8
 800030a:	bd80      	pop	{r7, pc}
 800030c:	e000e100 	.word	0xe000e100

08000310 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000310:	b590      	push	{r4, r7, lr}
 8000312:	b083      	sub	sp, #12
 8000314:	af00      	add	r7, sp, #0
 8000316:	0002      	movs	r2, r0
 8000318:	6039      	str	r1, [r7, #0]
 800031a:	1dfb      	adds	r3, r7, #7
 800031c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800031e:	1dfb      	adds	r3, r7, #7
 8000320:	781b      	ldrb	r3, [r3, #0]
 8000322:	2b7f      	cmp	r3, #127	; 0x7f
 8000324:	d828      	bhi.n	8000378 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000326:	4a2f      	ldr	r2, [pc, #188]	; (80003e4 <__NVIC_SetPriority+0xd4>)
 8000328:	1dfb      	adds	r3, r7, #7
 800032a:	781b      	ldrb	r3, [r3, #0]
 800032c:	b25b      	sxtb	r3, r3
 800032e:	089b      	lsrs	r3, r3, #2
 8000330:	33c0      	adds	r3, #192	; 0xc0
 8000332:	009b      	lsls	r3, r3, #2
 8000334:	589b      	ldr	r3, [r3, r2]
 8000336:	1dfa      	adds	r2, r7, #7
 8000338:	7812      	ldrb	r2, [r2, #0]
 800033a:	0011      	movs	r1, r2
 800033c:	2203      	movs	r2, #3
 800033e:	400a      	ands	r2, r1
 8000340:	00d2      	lsls	r2, r2, #3
 8000342:	21ff      	movs	r1, #255	; 0xff
 8000344:	4091      	lsls	r1, r2
 8000346:	000a      	movs	r2, r1
 8000348:	43d2      	mvns	r2, r2
 800034a:	401a      	ands	r2, r3
 800034c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800034e:	683b      	ldr	r3, [r7, #0]
 8000350:	019b      	lsls	r3, r3, #6
 8000352:	22ff      	movs	r2, #255	; 0xff
 8000354:	401a      	ands	r2, r3
 8000356:	1dfb      	adds	r3, r7, #7
 8000358:	781b      	ldrb	r3, [r3, #0]
 800035a:	0018      	movs	r0, r3
 800035c:	2303      	movs	r3, #3
 800035e:	4003      	ands	r3, r0
 8000360:	00db      	lsls	r3, r3, #3
 8000362:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000364:	481f      	ldr	r0, [pc, #124]	; (80003e4 <__NVIC_SetPriority+0xd4>)
 8000366:	1dfb      	adds	r3, r7, #7
 8000368:	781b      	ldrb	r3, [r3, #0]
 800036a:	b25b      	sxtb	r3, r3
 800036c:	089b      	lsrs	r3, r3, #2
 800036e:	430a      	orrs	r2, r1
 8000370:	33c0      	adds	r3, #192	; 0xc0
 8000372:	009b      	lsls	r3, r3, #2
 8000374:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000376:	e031      	b.n	80003dc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000378:	4a1b      	ldr	r2, [pc, #108]	; (80003e8 <__NVIC_SetPriority+0xd8>)
 800037a:	1dfb      	adds	r3, r7, #7
 800037c:	781b      	ldrb	r3, [r3, #0]
 800037e:	0019      	movs	r1, r3
 8000380:	230f      	movs	r3, #15
 8000382:	400b      	ands	r3, r1
 8000384:	3b08      	subs	r3, #8
 8000386:	089b      	lsrs	r3, r3, #2
 8000388:	3306      	adds	r3, #6
 800038a:	009b      	lsls	r3, r3, #2
 800038c:	18d3      	adds	r3, r2, r3
 800038e:	3304      	adds	r3, #4
 8000390:	681b      	ldr	r3, [r3, #0]
 8000392:	1dfa      	adds	r2, r7, #7
 8000394:	7812      	ldrb	r2, [r2, #0]
 8000396:	0011      	movs	r1, r2
 8000398:	2203      	movs	r2, #3
 800039a:	400a      	ands	r2, r1
 800039c:	00d2      	lsls	r2, r2, #3
 800039e:	21ff      	movs	r1, #255	; 0xff
 80003a0:	4091      	lsls	r1, r2
 80003a2:	000a      	movs	r2, r1
 80003a4:	43d2      	mvns	r2, r2
 80003a6:	401a      	ands	r2, r3
 80003a8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80003aa:	683b      	ldr	r3, [r7, #0]
 80003ac:	019b      	lsls	r3, r3, #6
 80003ae:	22ff      	movs	r2, #255	; 0xff
 80003b0:	401a      	ands	r2, r3
 80003b2:	1dfb      	adds	r3, r7, #7
 80003b4:	781b      	ldrb	r3, [r3, #0]
 80003b6:	0018      	movs	r0, r3
 80003b8:	2303      	movs	r3, #3
 80003ba:	4003      	ands	r3, r0
 80003bc:	00db      	lsls	r3, r3, #3
 80003be:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80003c0:	4809      	ldr	r0, [pc, #36]	; (80003e8 <__NVIC_SetPriority+0xd8>)
 80003c2:	1dfb      	adds	r3, r7, #7
 80003c4:	781b      	ldrb	r3, [r3, #0]
 80003c6:	001c      	movs	r4, r3
 80003c8:	230f      	movs	r3, #15
 80003ca:	4023      	ands	r3, r4
 80003cc:	3b08      	subs	r3, #8
 80003ce:	089b      	lsrs	r3, r3, #2
 80003d0:	430a      	orrs	r2, r1
 80003d2:	3306      	adds	r3, #6
 80003d4:	009b      	lsls	r3, r3, #2
 80003d6:	18c3      	adds	r3, r0, r3
 80003d8:	3304      	adds	r3, #4
 80003da:	601a      	str	r2, [r3, #0]
}
 80003dc:	46c0      	nop			; (mov r8, r8)
 80003de:	46bd      	mov	sp, r7
 80003e0:	b003      	add	sp, #12
 80003e2:	bd90      	pop	{r4, r7, pc}
 80003e4:	e000e100 	.word	0xe000e100
 80003e8:	e000ed00 	.word	0xe000ed00

080003ec <TIM3_IRQHandler>:
void TIM2_Config(void);
void TIM3_Config(void);
void ADC_Config(void);
void Delay(volatile uint32_t);

void TIM3_IRQHandler(void){
 80003ec:	b580      	push	{r7, lr}
 80003ee:	af00      	add	r7, sp, #0
	TIM3->SR &=  ~(TIM_SR_CC1IF); // Clear capture compare interrupt 1 flag
 80003f0:	4b07      	ldr	r3, [pc, #28]	; (8000410 <TIM3_IRQHandler+0x24>)
 80003f2:	691a      	ldr	r2, [r3, #16]
 80003f4:	4b06      	ldr	r3, [pc, #24]	; (8000410 <TIM3_IRQHandler+0x24>)
 80003f6:	2102      	movs	r1, #2
 80003f8:	438a      	bics	r2, r1
 80003fa:	611a      	str	r2, [r3, #16]
	TIM3->SR &= ~(TIM_SR_UIF); // Clear update status register
 80003fc:	4b04      	ldr	r3, [pc, #16]	; (8000410 <TIM3_IRQHandler+0x24>)
 80003fe:	691a      	ldr	r2, [r3, #16]
 8000400:	4b03      	ldr	r3, [pc, #12]	; (8000410 <TIM3_IRQHandler+0x24>)
 8000402:	2101      	movs	r1, #1
 8000404:	438a      	bics	r2, r1
 8000406:	611a      	str	r2, [r3, #16]
}
 8000408:	46c0      	nop			; (mov r8, r8)
 800040a:	46bd      	mov	sp, r7
 800040c:	bd80      	pop	{r7, pc}
 800040e:	46c0      	nop			; (mov r8, r8)
 8000410:	40000400 	.word	0x40000400

08000414 <TIM2_IRQHandler>:

void TIM2_IRQHandler(void) {
 8000414:	b580      	push	{r7, lr}
 8000416:	af00      	add	r7, sp, #0
    // PWM Duty Cycle[%] = (CCRx/ARR)*100;
	pot_value = ADC_Data();
 8000418:	f000 f84c 	bl	80004b4 <ADC_Data>
 800041c:	0003      	movs	r3, r0
 800041e:	001a      	movs	r2, r3
 8000420:	4b19      	ldr	r3, [pc, #100]	; (8000488 <TIM2_IRQHandler+0x74>)
 8000422:	801a      	strh	r2, [r3, #0]
	led1_val = (16000*pot_value)/4095;
 8000424:	4b18      	ldr	r3, [pc, #96]	; (8000488 <TIM2_IRQHandler+0x74>)
 8000426:	881b      	ldrh	r3, [r3, #0]
 8000428:	001a      	movs	r2, r3
 800042a:	0013      	movs	r3, r2
 800042c:	015b      	lsls	r3, r3, #5
 800042e:	1a9b      	subs	r3, r3, r2
 8000430:	009b      	lsls	r3, r3, #2
 8000432:	189b      	adds	r3, r3, r2
 8000434:	01db      	lsls	r3, r3, #7
 8000436:	4915      	ldr	r1, [pc, #84]	; (800048c <TIM2_IRQHandler+0x78>)
 8000438:	0018      	movs	r0, r3
 800043a:	f7ff fe63 	bl	8000104 <__divsi3>
 800043e:	0003      	movs	r3, r0
 8000440:	001a      	movs	r2, r3
 8000442:	4b13      	ldr	r3, [pc, #76]	; (8000490 <TIM2_IRQHandler+0x7c>)
 8000444:	601a      	str	r2, [r3, #0]
	led2_val = 16000-led1_val;
 8000446:	4b12      	ldr	r3, [pc, #72]	; (8000490 <TIM2_IRQHandler+0x7c>)
 8000448:	681b      	ldr	r3, [r3, #0]
 800044a:	22fa      	movs	r2, #250	; 0xfa
 800044c:	0192      	lsls	r2, r2, #6
 800044e:	1ad2      	subs	r2, r2, r3
 8000450:	4b10      	ldr	r3, [pc, #64]	; (8000494 <TIM2_IRQHandler+0x80>)
 8000452:	601a      	str	r2, [r3, #0]

	TIM2->CCR1 =led1_val;
 8000454:	2380      	movs	r3, #128	; 0x80
 8000456:	05db      	lsls	r3, r3, #23
 8000458:	4a0d      	ldr	r2, [pc, #52]	; (8000490 <TIM2_IRQHandler+0x7c>)
 800045a:	6812      	ldr	r2, [r2, #0]
 800045c:	635a      	str	r2, [r3, #52]	; 0x34
	TIM3->CCR1 =led2_val;
 800045e:	4a0e      	ldr	r2, [pc, #56]	; (8000498 <TIM2_IRQHandler+0x84>)
 8000460:	4b0c      	ldr	r3, [pc, #48]	; (8000494 <TIM2_IRQHandler+0x80>)
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	6353      	str	r3, [r2, #52]	; 0x34

	TIM3->SR &=  ~(TIM_SR_CC1IF); // Clear capture compare interrupt 1 flag
 8000466:	4b0c      	ldr	r3, [pc, #48]	; (8000498 <TIM2_IRQHandler+0x84>)
 8000468:	691a      	ldr	r2, [r3, #16]
 800046a:	4b0b      	ldr	r3, [pc, #44]	; (8000498 <TIM2_IRQHandler+0x84>)
 800046c:	2102      	movs	r1, #2
 800046e:	438a      	bics	r2, r1
 8000470:	611a      	str	r2, [r3, #16]
    TIM2->SR &= ~(TIM_SR_UIF); // Clear update status register
 8000472:	2380      	movs	r3, #128	; 0x80
 8000474:	05db      	lsls	r3, r3, #23
 8000476:	691a      	ldr	r2, [r3, #16]
 8000478:	2380      	movs	r3, #128	; 0x80
 800047a:	05db      	lsls	r3, r3, #23
 800047c:	2101      	movs	r1, #1
 800047e:	438a      	bics	r2, r1
 8000480:	611a      	str	r2, [r3, #16]
}
 8000482:	46c0      	nop			; (mov r8, r8)
 8000484:	46bd      	mov	sp, r7
 8000486:	bd80      	pop	{r7, pc}
 8000488:	20000020 	.word	0x20000020
 800048c:	00000fff 	.word	0x00000fff
 8000490:	20000024 	.word	0x20000024
 8000494:	20000028 	.word	0x20000028
 8000498:	40000400 	.word	0x40000400

0800049c <main>:

int main(void){
 800049c:	b580      	push	{r7, lr}
 800049e:	af00      	add	r7, sp, #0

	GPIO_Config();
 80004a0:	f000 f820 	bl	80004e4 <GPIO_Config>
	TIM2_Config();
 80004a4:	f000 f8ac 	bl	8000600 <TIM2_Config>
	TIM3_Config();
 80004a8:	f000 f90c 	bl	80006c4 <TIM3_Config>
	ADC_Config();
 80004ac:	f000 f860 	bl	8000570 <ADC_Config>

	while(1){
 80004b0:	e7fe      	b.n	80004b0 <main+0x14>
	...

080004b4 <ADC_Data>:

	}
	return 0;
}

uint16_t ADC_Data(void){
 80004b4:	b580      	push	{r7, lr}
 80004b6:	af00      	add	r7, sp, #0
	ADC1->CR |= ADC_CR_ADSTART; // ADC Start Conversion
 80004b8:	4b09      	ldr	r3, [pc, #36]	; (80004e0 <ADC_Data+0x2c>)
 80004ba:	689a      	ldr	r2, [r3, #8]
 80004bc:	4b08      	ldr	r3, [pc, #32]	; (80004e0 <ADC_Data+0x2c>)
 80004be:	2104      	movs	r1, #4
 80004c0:	430a      	orrs	r2, r1
 80004c2:	609a      	str	r2, [r3, #8]

	/*This bit is set by hardware at the end of each conversion(EOC) of a channel
	 * when a new data result is available in the ADC_DR register.
	 * 0: Channel conversion not complete
	 * 1: Channel conversion complete*/
	if((ADC1->ISR>>2) & (ADC_ISR_EOC>>2)){
 80004c4:	4b06      	ldr	r3, [pc, #24]	; (80004e0 <ADC_Data+0x2c>)
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	2204      	movs	r2, #4
 80004ca:	4013      	ands	r3, r2
 80004cc:	d003      	beq.n	80004d6 <ADC_Data+0x22>
		return ADC1->DR; // return ADC data value
 80004ce:	4b04      	ldr	r3, [pc, #16]	; (80004e0 <ADC_Data+0x2c>)
 80004d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80004d2:	b29b      	uxth	r3, r3
 80004d4:	e000      	b.n	80004d8 <ADC_Data+0x24>
	}
	return 0;
 80004d6:	2300      	movs	r3, #0
}
 80004d8:	0018      	movs	r0, r3
 80004da:	46bd      	mov	sp, r7
 80004dc:	bd80      	pop	{r7, pc}
 80004de:	46c0      	nop			; (mov r8, r8)
 80004e0:	40012400 	.word	0x40012400

080004e4 <GPIO_Config>:

void GPIO_Config(void){
 80004e4:	b580      	push	{r7, lr}
 80004e6:	af00      	add	r7, sp, #0
	// input-output A and B ports clock enable
	RCC->IOPENR |= (RCC_IOPENR_GPIOAEN | RCC_IOPENR_GPIOBEN);
 80004e8:	4b1e      	ldr	r3, [pc, #120]	; (8000564 <GPIO_Config+0x80>)
 80004ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80004ec:	4b1d      	ldr	r3, [pc, #116]	; (8000564 <GPIO_Config+0x80>)
 80004ee:	2103      	movs	r1, #3
 80004f0:	430a      	orrs	r2, r1
 80004f2:	635a      	str	r2, [r3, #52]	; 0x34

	// select PA0 mode as Alternate Function
	GPIOA->MODER &= ~(3U << 2*0);
 80004f4:	23a0      	movs	r3, #160	; 0xa0
 80004f6:	05db      	lsls	r3, r3, #23
 80004f8:	681a      	ldr	r2, [r3, #0]
 80004fa:	23a0      	movs	r3, #160	; 0xa0
 80004fc:	05db      	lsls	r3, r3, #23
 80004fe:	2103      	movs	r1, #3
 8000500:	438a      	bics	r2, r1
 8000502:	601a      	str	r2, [r3, #0]
	GPIOA->MODER |= (2U << 2*0);
 8000504:	23a0      	movs	r3, #160	; 0xa0
 8000506:	05db      	lsls	r3, r3, #23
 8000508:	681a      	ldr	r2, [r3, #0]
 800050a:	23a0      	movs	r3, #160	; 0xa0
 800050c:	05db      	lsls	r3, r3, #23
 800050e:	2102      	movs	r1, #2
 8000510:	430a      	orrs	r2, r1
 8000512:	601a      	str	r2, [r3, #0]

	/* PA0 pin used for TIM2_CH1 are selected
	 * with GPIOx_AFRL = AFRL_AFSELy(Alternate Function register -
	 * Alternate function selection for port x pin y)
	 * AF2 -->> TIM2_CH1*/
	GPIOA->AFR[0] |= GPIO_AFRL_AFSEL0_1;
 8000514:	23a0      	movs	r3, #160	; 0xa0
 8000516:	05db      	lsls	r3, r3, #23
 8000518:	6a1a      	ldr	r2, [r3, #32]
 800051a:	23a0      	movs	r3, #160	; 0xa0
 800051c:	05db      	lsls	r3, r3, #23
 800051e:	2102      	movs	r1, #2
 8000520:	430a      	orrs	r2, r1
 8000522:	621a      	str	r2, [r3, #32]

	// select PB4 mode as Alternate Function
	GPIOB->MODER &= ~(3U << 2*4);
 8000524:	4b10      	ldr	r3, [pc, #64]	; (8000568 <GPIO_Config+0x84>)
 8000526:	681a      	ldr	r2, [r3, #0]
 8000528:	4b0f      	ldr	r3, [pc, #60]	; (8000568 <GPIO_Config+0x84>)
 800052a:	4910      	ldr	r1, [pc, #64]	; (800056c <GPIO_Config+0x88>)
 800052c:	400a      	ands	r2, r1
 800052e:	601a      	str	r2, [r3, #0]
	GPIOB->MODER |=  (2<< 2*4) ;
 8000530:	4b0d      	ldr	r3, [pc, #52]	; (8000568 <GPIO_Config+0x84>)
 8000532:	681a      	ldr	r2, [r3, #0]
 8000534:	4b0c      	ldr	r3, [pc, #48]	; (8000568 <GPIO_Config+0x84>)
 8000536:	2180      	movs	r1, #128	; 0x80
 8000538:	0089      	lsls	r1, r1, #2
 800053a:	430a      	orrs	r2, r1
 800053c:	601a      	str	r2, [r3, #0]

	/* PB4 pin used for TIM3_CH1 are selected
	* AF1 -->> TIM3_CH1*/
	GPIOB->AFR[0]  |= GPIO_AFRL_AFSEL4_0;
 800053e:	4b0a      	ldr	r3, [pc, #40]	; (8000568 <GPIO_Config+0x84>)
 8000540:	6a1a      	ldr	r2, [r3, #32]
 8000542:	4b09      	ldr	r3, [pc, #36]	; (8000568 <GPIO_Config+0x84>)
 8000544:	2180      	movs	r1, #128	; 0x80
 8000546:	0249      	lsls	r1, r1, #9
 8000548:	430a      	orrs	r2, r1
 800054a:	621a      	str	r2, [r3, #32]

	//PA1 is ADC
	GPIOA->MODER |= (3 << 2*1);
 800054c:	23a0      	movs	r3, #160	; 0xa0
 800054e:	05db      	lsls	r3, r3, #23
 8000550:	681a      	ldr	r2, [r3, #0]
 8000552:	23a0      	movs	r3, #160	; 0xa0
 8000554:	05db      	lsls	r3, r3, #23
 8000556:	210c      	movs	r1, #12
 8000558:	430a      	orrs	r2, r1
 800055a:	601a      	str	r2, [r3, #0]
}
 800055c:	46c0      	nop			; (mov r8, r8)
 800055e:	46bd      	mov	sp, r7
 8000560:	bd80      	pop	{r7, pc}
 8000562:	46c0      	nop			; (mov r8, r8)
 8000564:	40021000 	.word	0x40021000
 8000568:	50000400 	.word	0x50000400
 800056c:	fffffcff 	.word	0xfffffcff

08000570 <ADC_Config>:

void ADC_Config(void){
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
	RCC->APBENR2 |= RCC_APBENR2_ADCEN; // ADC clock enable
 8000574:	4b20      	ldr	r3, [pc, #128]	; (80005f8 <ADC_Config+0x88>)
 8000576:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000578:	4b1f      	ldr	r3, [pc, #124]	; (80005f8 <ADC_Config+0x88>)
 800057a:	2180      	movs	r1, #128	; 0x80
 800057c:	0349      	lsls	r1, r1, #13
 800057e:	430a      	orrs	r2, r1
 8000580:	641a      	str	r2, [r3, #64]	; 0x40

	ADC1->CR |=ADC_CR_ADVREGEN; //voltage regulator enable
 8000582:	4b1e      	ldr	r3, [pc, #120]	; (80005fc <ADC_Config+0x8c>)
 8000584:	689a      	ldr	r2, [r3, #8]
 8000586:	4b1d      	ldr	r3, [pc, #116]	; (80005fc <ADC_Config+0x8c>)
 8000588:	2180      	movs	r1, #128	; 0x80
 800058a:	0549      	lsls	r1, r1, #21
 800058c:	430a      	orrs	r2, r1
 800058e:	609a      	str	r2, [r3, #8]
	Delay(500);
 8000590:	23fa      	movs	r3, #250	; 0xfa
 8000592:	005b      	lsls	r3, r3, #1
 8000594:	0018      	movs	r0, r3
 8000596:	f000 f8e3 	bl	8000760 <Delay>

	ADC1->CR |=ADC_CR_ADCAL; //calibration
 800059a:	4b18      	ldr	r3, [pc, #96]	; (80005fc <ADC_Config+0x8c>)
 800059c:	689a      	ldr	r2, [r3, #8]
 800059e:	4b17      	ldr	r3, [pc, #92]	; (80005fc <ADC_Config+0x8c>)
 80005a0:	2180      	movs	r1, #128	; 0x80
 80005a2:	0609      	lsls	r1, r1, #24
 80005a4:	430a      	orrs	r2, r1
 80005a6:	609a      	str	r2, [r3, #8]
	while(((ADC1->CR>>31)==ADC_CR_ADCAL>>31)); // until calibration
 80005a8:	46c0      	nop			; (mov r8, r8)
 80005aa:	4b14      	ldr	r3, [pc, #80]	; (80005fc <ADC_Config+0x8c>)
 80005ac:	689b      	ldr	r3, [r3, #8]
 80005ae:	0fdb      	lsrs	r3, r3, #31
 80005b0:	2b01      	cmp	r3, #1
 80005b2:	d0fa      	beq.n	80005aa <ADC_Config+0x3a>
	/* 0: Calibration complete
	 * 1: Write 1 to calibrate the ADC. Read at 1 means that a calibration is in progress.*/

	ADC1->CR |= ADC_CR_ADEN; // ADC is enabled.
 80005b4:	4b11      	ldr	r3, [pc, #68]	; (80005fc <ADC_Config+0x8c>)
 80005b6:	689a      	ldr	r2, [r3, #8]
 80005b8:	4b10      	ldr	r3, [pc, #64]	; (80005fc <ADC_Config+0x8c>)
 80005ba:	2101      	movs	r1, #1
 80005bc:	430a      	orrs	r2, r1
 80005be:	609a      	str	r2, [r3, #8]
	while (ADC1->ISR & ADC_ISR_ADRDY); // 1: ADC is ready to start conversion
 80005c0:	46c0      	nop			; (mov r8, r8)
 80005c2:	4b0e      	ldr	r3, [pc, #56]	; (80005fc <ADC_Config+0x8c>)
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	2201      	movs	r2, #1
 80005c8:	4013      	ands	r3, r2
 80005ca:	d1fa      	bne.n	80005c2 <ADC_Config+0x52>

	ADC1->CHSELR |= ADC_CHSELR_CHSEL1; //chanel selection for PA1
 80005cc:	4b0b      	ldr	r3, [pc, #44]	; (80005fc <ADC_Config+0x8c>)
 80005ce:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80005d0:	4b0a      	ldr	r3, [pc, #40]	; (80005fc <ADC_Config+0x8c>)
 80005d2:	2102      	movs	r1, #2
 80005d4:	430a      	orrs	r2, r1
 80005d6:	629a      	str	r2, [r3, #40]	; 0x28
	ADC1->CFGR1 |= ADC_CFGR1_CONT; // contionous conversion
 80005d8:	4b08      	ldr	r3, [pc, #32]	; (80005fc <ADC_Config+0x8c>)
 80005da:	68da      	ldr	r2, [r3, #12]
 80005dc:	4b07      	ldr	r3, [pc, #28]	; (80005fc <ADC_Config+0x8c>)
 80005de:	2180      	movs	r1, #128	; 0x80
 80005e0:	0189      	lsls	r1, r1, #6
 80005e2:	430a      	orrs	r2, r1
 80005e4:	60da      	str	r2, [r3, #12]

	ADC1->SMPR |= (6UL<<0); // 79.5 ADC clock cycles for sampling time selection 1
 80005e6:	4b05      	ldr	r3, [pc, #20]	; (80005fc <ADC_Config+0x8c>)
 80005e8:	695a      	ldr	r2, [r3, #20]
 80005ea:	4b04      	ldr	r3, [pc, #16]	; (80005fc <ADC_Config+0x8c>)
 80005ec:	2106      	movs	r1, #6
 80005ee:	430a      	orrs	r2, r1
 80005f0:	615a      	str	r2, [r3, #20]
}
 80005f2:	46c0      	nop			; (mov r8, r8)
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd80      	pop	{r7, pc}
 80005f8:	40021000 	.word	0x40021000
 80005fc:	40012400 	.word	0x40012400

08000600 <TIM2_Config>:

void TIM2_Config(void){
 8000600:	b580      	push	{r7, lr}
 8000602:	af00      	add	r7, sp, #0
	RCC->APBENR1 |= RCC_APBENR1_TIM2EN; // Timer 2 clock enable
 8000604:	4b2e      	ldr	r3, [pc, #184]	; (80006c0 <TIM2_Config+0xc0>)
 8000606:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000608:	4b2d      	ldr	r3, [pc, #180]	; (80006c0 <TIM2_Config+0xc0>)
 800060a:	2101      	movs	r1, #1
 800060c:	430a      	orrs	r2, r1
 800060e:	63da      	str	r2, [r3, #60]	; 0x3c

	TIM2->CR1 = 0; // zero out the control register just in case
 8000610:	2380      	movs	r3, #128	; 0x80
 8000612:	05db      	lsls	r3, r3, #23
 8000614:	2200      	movs	r2, #0
 8000616:	601a      	str	r2, [r3, #0]
	TIM2->CR1 |= TIM_CR1_ARPE; // Auto-reload preload enable
 8000618:	2380      	movs	r3, #128	; 0x80
 800061a:	05db      	lsls	r3, r3, #23
 800061c:	681a      	ldr	r2, [r3, #0]
 800061e:	2380      	movs	r3, #128	; 0x80
 8000620:	05db      	lsls	r3, r3, #23
 8000622:	2180      	movs	r1, #128	; 0x80
 8000624:	430a      	orrs	r2, r1
 8000626:	601a      	str	r2, [r3, #0]

	TIM2->CCMR1 |= (6U << 4); // PWM mode 1 is selected.
 8000628:	2380      	movs	r3, #128	; 0x80
 800062a:	05db      	lsls	r3, r3, #23
 800062c:	699a      	ldr	r2, [r3, #24]
 800062e:	2380      	movs	r3, #128	; 0x80
 8000630:	05db      	lsls	r3, r3, #23
 8000632:	2160      	movs	r1, #96	; 0x60
 8000634:	430a      	orrs	r2, r1
 8000636:	619a      	str	r2, [r3, #24]
	TIM2->CCMR1 |= TIM_CCMR1_OC1PE; // Output Compare 1 Preload Enable
 8000638:	2380      	movs	r3, #128	; 0x80
 800063a:	05db      	lsls	r3, r3, #23
 800063c:	699a      	ldr	r2, [r3, #24]
 800063e:	2380      	movs	r3, #128	; 0x80
 8000640:	05db      	lsls	r3, r3, #23
 8000642:	2108      	movs	r1, #8
 8000644:	430a      	orrs	r2, r1
 8000646:	619a      	str	r2, [r3, #24]

	TIM2->CCER |= TIM_CCER_CC1E; // Capture compare ch1 enable
 8000648:	2380      	movs	r3, #128	; 0x80
 800064a:	05db      	lsls	r3, r3, #23
 800064c:	6a1a      	ldr	r2, [r3, #32]
 800064e:	2380      	movs	r3, #128	; 0x80
 8000650:	05db      	lsls	r3, r3, #23
 8000652:	2101      	movs	r1, #1
 8000654:	430a      	orrs	r2, r1
 8000656:	621a      	str	r2, [r3, #32]

	TIM2->CNT = 0; // zero out counter
 8000658:	2380      	movs	r3, #128	; 0x80
 800065a:	05db      	lsls	r3, r3, #23
 800065c:	2200      	movs	r2, #0
 800065e:	625a      	str	r2, [r3, #36]	; 0x24

	// tim uptade frequency = TIM_CLK/((TIM_PSC+1)*TIM_ARR) for 1 s interrupt
	TIM2->PSC = 9; // prescaler
 8000660:	2380      	movs	r3, #128	; 0x80
 8000662:	05db      	lsls	r3, r3, #23
 8000664:	2209      	movs	r2, #9
 8000666:	629a      	str	r2, [r3, #40]	; 0x28
	TIM2->ARR = 16000; // period
 8000668:	2380      	movs	r3, #128	; 0x80
 800066a:	05db      	lsls	r3, r3, #23
 800066c:	22fa      	movs	r2, #250	; 0xfa
 800066e:	0192      	lsls	r2, r2, #6
 8000670:	62da      	str	r2, [r3, #44]	; 0x2c

	TIM2->CCR1 = 0; // zero out duty for ch1 in TIM capture/compare register 1
 8000672:	2380      	movs	r3, #128	; 0x80
 8000674:	05db      	lsls	r3, r3, #23
 8000676:	2200      	movs	r2, #0
 8000678:	635a      	str	r2, [r3, #52]	; 0x34

	// Update Generation: Re-initialize the counter and generates an update of the registers.
	TIM2->EGR |= TIM_EGR_UG;
 800067a:	2380      	movs	r3, #128	; 0x80
 800067c:	05db      	lsls	r3, r3, #23
 800067e:	695a      	ldr	r2, [r3, #20]
 8000680:	2380      	movs	r3, #128	; 0x80
 8000682:	05db      	lsls	r3, r3, #23
 8000684:	2101      	movs	r1, #1
 8000686:	430a      	orrs	r2, r1
 8000688:	615a      	str	r2, [r3, #20]

	TIM2->DIER |= TIM_DIER_UIE; // Update interrupt enable
 800068a:	2380      	movs	r3, #128	; 0x80
 800068c:	05db      	lsls	r3, r3, #23
 800068e:	68da      	ldr	r2, [r3, #12]
 8000690:	2380      	movs	r3, #128	; 0x80
 8000692:	05db      	lsls	r3, r3, #23
 8000694:	2101      	movs	r1, #1
 8000696:	430a      	orrs	r2, r1
 8000698:	60da      	str	r2, [r3, #12]

	TIM2->CR1 |= TIM_CR1_CEN; // TIM2 Counter enable
 800069a:	2380      	movs	r3, #128	; 0x80
 800069c:	05db      	lsls	r3, r3, #23
 800069e:	681a      	ldr	r2, [r3, #0]
 80006a0:	2380      	movs	r3, #128	; 0x80
 80006a2:	05db      	lsls	r3, r3, #23
 80006a4:	2101      	movs	r1, #1
 80006a6:	430a      	orrs	r2, r1
 80006a8:	601a      	str	r2, [r3, #0]

	NVIC_SetPriority(TIM2_IRQn, 1); // Setting Priority for timer handler
 80006aa:	2101      	movs	r1, #1
 80006ac:	200f      	movs	r0, #15
 80006ae:	f7ff fe2f 	bl	8000310 <__NVIC_SetPriority>
	NVIC_EnableIRQ(TIM2_IRQn); // timer handler enable
 80006b2:	200f      	movs	r0, #15
 80006b4:	f7ff fe12 	bl	80002dc <__NVIC_EnableIRQ>
}
 80006b8:	46c0      	nop			; (mov r8, r8)
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	46c0      	nop			; (mov r8, r8)
 80006c0:	40021000 	.word	0x40021000

080006c4 <TIM3_Config>:

void TIM3_Config(void){
 80006c4:	b580      	push	{r7, lr}
 80006c6:	af00      	add	r7, sp, #0
	RCC->APBENR1 |=	RCC_APBENR1_TIM3EN; // Timer 3 clock enable
 80006c8:	4b23      	ldr	r3, [pc, #140]	; (8000758 <TIM3_Config+0x94>)
 80006ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80006cc:	4b22      	ldr	r3, [pc, #136]	; (8000758 <TIM3_Config+0x94>)
 80006ce:	2102      	movs	r1, #2
 80006d0:	430a      	orrs	r2, r1
 80006d2:	63da      	str	r2, [r3, #60]	; 0x3c

	TIM3->CR1=0; // zero out the control register just in case
 80006d4:	4b21      	ldr	r3, [pc, #132]	; (800075c <TIM3_Config+0x98>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	601a      	str	r2, [r3, #0]
	TIM3->CR1 |= TIM_CR1_ARPE; // Auto-reload preload enable
 80006da:	4b20      	ldr	r3, [pc, #128]	; (800075c <TIM3_Config+0x98>)
 80006dc:	681a      	ldr	r2, [r3, #0]
 80006de:	4b1f      	ldr	r3, [pc, #124]	; (800075c <TIM3_Config+0x98>)
 80006e0:	2180      	movs	r1, #128	; 0x80
 80006e2:	430a      	orrs	r2, r1
 80006e4:	601a      	str	r2, [r3, #0]

	TIM3->CCMR1 |= (6U << 4); // PWM mode 1 is selected. -->> 0110: PWM Mode
 80006e6:	4b1d      	ldr	r3, [pc, #116]	; (800075c <TIM3_Config+0x98>)
 80006e8:	699a      	ldr	r2, [r3, #24]
 80006ea:	4b1c      	ldr	r3, [pc, #112]	; (800075c <TIM3_Config+0x98>)
 80006ec:	2160      	movs	r1, #96	; 0x60
 80006ee:	430a      	orrs	r2, r1
 80006f0:	619a      	str	r2, [r3, #24]
	TIM3->CCMR1 |= TIM_CCMR1_OC1PE; // Output Compare 1 Preload Enable
 80006f2:	4b1a      	ldr	r3, [pc, #104]	; (800075c <TIM3_Config+0x98>)
 80006f4:	699a      	ldr	r2, [r3, #24]
 80006f6:	4b19      	ldr	r3, [pc, #100]	; (800075c <TIM3_Config+0x98>)
 80006f8:	2108      	movs	r1, #8
 80006fa:	430a      	orrs	r2, r1
 80006fc:	619a      	str	r2, [r3, #24]

	TIM3->CCER |= TIM_CCER_CC1E; // Capture compare ch1 enable
 80006fe:	4b17      	ldr	r3, [pc, #92]	; (800075c <TIM3_Config+0x98>)
 8000700:	6a1a      	ldr	r2, [r3, #32]
 8000702:	4b16      	ldr	r3, [pc, #88]	; (800075c <TIM3_Config+0x98>)
 8000704:	2101      	movs	r1, #1
 8000706:	430a      	orrs	r2, r1
 8000708:	621a      	str	r2, [r3, #32]

	TIM3->CNT =0; // zero out counter
 800070a:	4b14      	ldr	r3, [pc, #80]	; (800075c <TIM3_Config+0x98>)
 800070c:	2200      	movs	r2, #0
 800070e:	625a      	str	r2, [r3, #36]	; 0x24

	// tim uptade frequency = TIM_CLK/((TIM_PSC+1)*TIM_ARR) for 1s interrupt
	TIM3->PSC= 9;
 8000710:	4b12      	ldr	r3, [pc, #72]	; (800075c <TIM3_Config+0x98>)
 8000712:	2209      	movs	r2, #9
 8000714:	629a      	str	r2, [r3, #40]	; 0x28
	TIM3->ARR= 16000;
 8000716:	4b11      	ldr	r3, [pc, #68]	; (800075c <TIM3_Config+0x98>)
 8000718:	22fa      	movs	r2, #250	; 0xfa
 800071a:	0192      	lsls	r2, r2, #6
 800071c:	62da      	str	r2, [r3, #44]	; 0x2c

	// Update Generation: Re-initialize the counter and generates an update of the registers.
	TIM3->EGR |= TIM_EGR_UG;
 800071e:	4b0f      	ldr	r3, [pc, #60]	; (800075c <TIM3_Config+0x98>)
 8000720:	695a      	ldr	r2, [r3, #20]
 8000722:	4b0e      	ldr	r3, [pc, #56]	; (800075c <TIM3_Config+0x98>)
 8000724:	2101      	movs	r1, #1
 8000726:	430a      	orrs	r2, r1
 8000728:	615a      	str	r2, [r3, #20]

	TIM3->DIER |= TIM_DIER_UIE; // Update interrupt enable
 800072a:	4b0c      	ldr	r3, [pc, #48]	; (800075c <TIM3_Config+0x98>)
 800072c:	68da      	ldr	r2, [r3, #12]
 800072e:	4b0b      	ldr	r3, [pc, #44]	; (800075c <TIM3_Config+0x98>)
 8000730:	2101      	movs	r1, #1
 8000732:	430a      	orrs	r2, r1
 8000734:	60da      	str	r2, [r3, #12]

	TIM3->CR1 |= TIM_CR1_CEN; // TIM3 Counter enable
 8000736:	4b09      	ldr	r3, [pc, #36]	; (800075c <TIM3_Config+0x98>)
 8000738:	681a      	ldr	r2, [r3, #0]
 800073a:	4b08      	ldr	r3, [pc, #32]	; (800075c <TIM3_Config+0x98>)
 800073c:	2101      	movs	r1, #1
 800073e:	430a      	orrs	r2, r1
 8000740:	601a      	str	r2, [r3, #0]

	NVIC_SetPriority(TIM3_IRQn, 1);
 8000742:	2101      	movs	r1, #1
 8000744:	2010      	movs	r0, #16
 8000746:	f7ff fde3 	bl	8000310 <__NVIC_SetPriority>
	NVIC_EnableIRQ(TIM3_IRQn);
 800074a:	2010      	movs	r0, #16
 800074c:	f7ff fdc6 	bl	80002dc <__NVIC_EnableIRQ>
}
 8000750:	46c0      	nop			; (mov r8, r8)
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}
 8000756:	46c0      	nop			; (mov r8, r8)
 8000758:	40021000 	.word	0x40021000
 800075c:	40000400 	.word	0x40000400

08000760 <Delay>:

void Delay(volatile uint32_t time){
 8000760:	b580      	push	{r7, lr}
 8000762:	b082      	sub	sp, #8
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
    for(; time>0; time--);
 8000768:	e002      	b.n	8000770 <Delay+0x10>
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	3b01      	subs	r3, #1
 800076e:	607b      	str	r3, [r7, #4]
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	2b00      	cmp	r3, #0
 8000774:	d1f9      	bne.n	800076a <Delay+0xa>
}
 8000776:	46c0      	nop			; (mov r8, r8)
 8000778:	46c0      	nop			; (mov r8, r8)
 800077a:	46bd      	mov	sp, r7
 800077c:	b002      	add	sp, #8
 800077e:	bd80      	pop	{r7, pc}

08000780 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000784:	e7fe      	b.n	8000784 <NMI_Handler+0x4>

08000786 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000786:	b580      	push	{r7, lr}
 8000788:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800078a:	e7fe      	b.n	800078a <HardFault_Handler+0x4>

0800078c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000790:	46c0      	nop			; (mov r8, r8)
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}

08000796 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000796:	b580      	push	{r7, lr}
 8000798:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800079a:	46c0      	nop			; (mov r8, r8)
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}

080007a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007a4:	f000 f832 	bl	800080c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007a8:	46c0      	nop			; (mov r8, r8)
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}

080007ae <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80007ae:	b580      	push	{r7, lr}
 80007b0:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007b2:	46c0      	nop			; (mov r8, r8)
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}

080007b8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80007b8:	480d      	ldr	r0, [pc, #52]	; (80007f0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80007ba:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80007bc:	f7ff fff7 	bl	80007ae <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007c0:	480c      	ldr	r0, [pc, #48]	; (80007f4 <LoopForever+0x6>)
  ldr r1, =_edata
 80007c2:	490d      	ldr	r1, [pc, #52]	; (80007f8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80007c4:	4a0d      	ldr	r2, [pc, #52]	; (80007fc <LoopForever+0xe>)
  movs r3, #0
 80007c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007c8:	e002      	b.n	80007d0 <LoopCopyDataInit>

080007ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007ce:	3304      	adds	r3, #4

080007d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007d4:	d3f9      	bcc.n	80007ca <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007d6:	4a0a      	ldr	r2, [pc, #40]	; (8000800 <LoopForever+0x12>)
  ldr r4, =_ebss
 80007d8:	4c0a      	ldr	r4, [pc, #40]	; (8000804 <LoopForever+0x16>)
  movs r3, #0
 80007da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007dc:	e001      	b.n	80007e2 <LoopFillZerobss>

080007de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007e0:	3204      	adds	r2, #4

080007e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007e4:	d3fb      	bcc.n	80007de <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80007e6:	f000 f823 	bl	8000830 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80007ea:	f7ff fe57 	bl	800049c <main>

080007ee <LoopForever>:

LoopForever:
  b LoopForever
 80007ee:	e7fe      	b.n	80007ee <LoopForever>
  ldr   r0, =_estack
 80007f0:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80007f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007f8:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80007fc:	08000898 	.word	0x08000898
  ldr r2, =_sbss
 8000800:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000804:	20000030 	.word	0x20000030

08000808 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000808:	e7fe      	b.n	8000808 <ADC1_IRQHandler>
	...

0800080c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000810:	4b05      	ldr	r3, [pc, #20]	; (8000828 <HAL_IncTick+0x1c>)
 8000812:	781b      	ldrb	r3, [r3, #0]
 8000814:	001a      	movs	r2, r3
 8000816:	4b05      	ldr	r3, [pc, #20]	; (800082c <HAL_IncTick+0x20>)
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	18d2      	adds	r2, r2, r3
 800081c:	4b03      	ldr	r3, [pc, #12]	; (800082c <HAL_IncTick+0x20>)
 800081e:	601a      	str	r2, [r3, #0]
}
 8000820:	46c0      	nop			; (mov r8, r8)
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
 8000826:	46c0      	nop			; (mov r8, r8)
 8000828:	20000000 	.word	0x20000000
 800082c:	2000002c 	.word	0x2000002c

08000830 <__libc_init_array>:
 8000830:	b570      	push	{r4, r5, r6, lr}
 8000832:	2600      	movs	r6, #0
 8000834:	4c0c      	ldr	r4, [pc, #48]	; (8000868 <__libc_init_array+0x38>)
 8000836:	4d0d      	ldr	r5, [pc, #52]	; (800086c <__libc_init_array+0x3c>)
 8000838:	1b64      	subs	r4, r4, r5
 800083a:	10a4      	asrs	r4, r4, #2
 800083c:	42a6      	cmp	r6, r4
 800083e:	d109      	bne.n	8000854 <__libc_init_array+0x24>
 8000840:	2600      	movs	r6, #0
 8000842:	f000 f819 	bl	8000878 <_init>
 8000846:	4c0a      	ldr	r4, [pc, #40]	; (8000870 <__libc_init_array+0x40>)
 8000848:	4d0a      	ldr	r5, [pc, #40]	; (8000874 <__libc_init_array+0x44>)
 800084a:	1b64      	subs	r4, r4, r5
 800084c:	10a4      	asrs	r4, r4, #2
 800084e:	42a6      	cmp	r6, r4
 8000850:	d105      	bne.n	800085e <__libc_init_array+0x2e>
 8000852:	bd70      	pop	{r4, r5, r6, pc}
 8000854:	00b3      	lsls	r3, r6, #2
 8000856:	58eb      	ldr	r3, [r5, r3]
 8000858:	4798      	blx	r3
 800085a:	3601      	adds	r6, #1
 800085c:	e7ee      	b.n	800083c <__libc_init_array+0xc>
 800085e:	00b3      	lsls	r3, r6, #2
 8000860:	58eb      	ldr	r3, [r5, r3]
 8000862:	4798      	blx	r3
 8000864:	3601      	adds	r6, #1
 8000866:	e7f2      	b.n	800084e <__libc_init_array+0x1e>
 8000868:	08000890 	.word	0x08000890
 800086c:	08000890 	.word	0x08000890
 8000870:	08000894 	.word	0x08000894
 8000874:	08000890 	.word	0x08000890

08000878 <_init>:
 8000878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800087a:	46c0      	nop			; (mov r8, r8)
 800087c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800087e:	bc08      	pop	{r3}
 8000880:	469e      	mov	lr, r3
 8000882:	4770      	bx	lr

08000884 <_fini>:
 8000884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000886:	46c0      	nop			; (mov r8, r8)
 8000888:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800088a:	bc08      	pop	{r3}
 800088c:	469e      	mov	lr, r3
 800088e:	4770      	bx	lr
