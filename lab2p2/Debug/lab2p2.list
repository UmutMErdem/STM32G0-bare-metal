
lab2p2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000e8  08000000  08000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .init         00000004  080000e8  080000e8  000100e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .fini         00000004  080000ec  080000ec  000100ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .data         00000000  20000000  20000000  000100f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          00000000  20000000  20000000  00000000  2**0
                  ALLOC
  5 .ARM.attributes 00000028  00000000  00000000  000100f0  2**0
                  CONTENTS, READONLY
  6 .debug_line   000000a0  00000000  00000000  00010118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_line_str 0000002c  00000000  00000000  000101b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_info   00000025  00000000  00000000  000101e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_abbrev 00000014  00000000  00000000  00010209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_aranges 00000020  00000000  00000000  00010220  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_str    00000038  00000000  00000000  00010240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000000 <vector_table>:
 8000000:	20002000 	.word	0x20002000
 8000004:	08000021 	.word	0x08000021
 8000008:	08000057 	.word	0x08000057
 800000c:	08000057 	.word	0x08000057
 8000010:	20000000 	.word	0x20000000
 8000014:	20000000 	.word	0x20000000
 8000018:	20000000 	.word	0x20000000
 800001c:	20000000 	.word	0x20000000

08000020 <Reset_Handler>:

/* reset handler */
.section .text
Reset_Handler:
	/* set stack pointer */
	ldr r0, =_estack
 8000020:	4820      	ldr	r0, [pc, #128]	; (80000a4 <button+0x10>)
	mov sp, r0
 8000022:	4685      	mov	sp, r0

	/* initialize data and bss
	 * not necessary for rom only code
	 * */
	bl init_data
 8000024:	f000 f803 	bl	800002e <init_data>
	/* call main */
	bl main
 8000028:	f000 f816 	bl	8000058 <main>
	/* trap if returned */
	b .
 800002c:	e7fe      	b.n	800002c <Reset_Handler+0xc>

0800002e <init_data>:
/* initialize data and bss sections */
.section .text
init_data:

	/* copy rom to ram */
	ldr r0, =_sdata
 800002e:	481e      	ldr	r0, [pc, #120]	; (80000a8 <button+0x14>)
	ldr r1, =_edata
 8000030:	491e      	ldr	r1, [pc, #120]	; (80000ac <button+0x18>)
	ldr r2, =_sidata
 8000032:	4a1f      	ldr	r2, [pc, #124]	; (80000b0 <button+0x1c>)
	movs r3, #0
 8000034:	2300      	movs	r3, #0
	b LoopCopyDataInit
 8000036:	e002      	b.n	800003e <LoopCopyDataInit>

08000038 <CopyDataInit>:

	CopyDataInit:
		ldr r4, [r2, r3]
 8000038:	58d4      	ldr	r4, [r2, r3]
		str r4, [r0, r3]
 800003a:	50c4      	str	r4, [r0, r3]
		adds r3, r3, #4
 800003c:	3304      	adds	r3, #4

0800003e <LoopCopyDataInit>:

	LoopCopyDataInit:
		adds r4, r0, r3
 800003e:	18c4      	adds	r4, r0, r3
		cmp r4, r1
 8000040:	428c      	cmp	r4, r1
		bcc CopyDataInit
 8000042:	d3f9      	bcc.n	8000038 <CopyDataInit>

	/* zero bss */
	ldr r2, =_sbss
 8000044:	4a1b      	ldr	r2, [pc, #108]	; (80000b4 <button+0x20>)
	ldr r4, =_ebss
 8000046:	4c1c      	ldr	r4, [pc, #112]	; (80000b8 <button+0x24>)
	movs r3, #0
 8000048:	2300      	movs	r3, #0
	b LoopFillZerobss
 800004a:	e001      	b.n	8000050 <LoopFillZerobss>

0800004c <FillZerobss>:

	FillZerobss:
		str  r3, [r2]
 800004c:	6013      	str	r3, [r2, #0]
		adds r2, r2, #4
 800004e:	3204      	adds	r2, #4

08000050 <LoopFillZerobss>:

	LoopFillZerobss:
		cmp r2, r4
 8000050:	42a2      	cmp	r2, r4
		bcc FillZerobss
 8000052:	d3fb      	bcc.n	800004c <FillZerobss>

	bx lr
 8000054:	4770      	bx	lr

08000056 <Default_Handler>:


/* default handler */
.section .text
Default_Handler:
	b Default_Handler
 8000056:	e7fe      	b.n	8000056 <Default_Handler>

08000058 <main>:

/* main function */
.section .text
main:
	/* enable GPIOA clock, bit2 on IOPENR */
ldr r1, =RCC_IOPENR
 8000058:	4918      	ldr	r1, [pc, #96]	; (80000bc <button+0x28>)
    ldr r2, [r1]
 800005a:	680a      	ldr	r2, [r1, #0]
    movs r4, 0x3
 800005c:	2403      	movs	r4, #3
    orrs r2, r2, r4
 800005e:	4322      	orrs	r2, r4
    str r2, [r1]
 8000060:	600a      	str	r2, [r1, #0]

	ldr r1, =GPIOA_MODER
 8000062:	4917      	ldr	r1, [pc, #92]	; (80000c0 <button+0x2c>)
    ldr r2, [r1]
 8000064:	680a      	ldr	r2, [r1, #0]
    ldr r4, =0x3
 8000066:	4c17      	ldr	r4, [pc, #92]	; (80000c4 <button+0x30>)
    bics r2, r2, r4
 8000068:	43a2      	bics	r2, r4
    str r2, [r1]
 800006a:	600a      	str	r2, [r1, #0]

    ldr r1, =GPIOB_MODER
 800006c:	4916      	ldr	r1, [pc, #88]	; (80000c8 <button+0x34>)
    ldr r2, [r1]
 800006e:	680a      	ldr	r2, [r1, #0]
    ldr r4, =0x30000
 8000070:	4c16      	ldr	r4, [pc, #88]	; (80000cc <button+0x38>)
    bics r2, r2, r4
 8000072:	43a2      	bics	r2, r4
    ldr r4, =0x10000
 8000074:	4c16      	ldr	r4, [pc, #88]	; (80000d0 <button+0x3c>)
	orrs r2, r2, r4
 8000076:	4322      	orrs	r2, r4
    str r2, [r1]
 8000078:	600a      	str	r2, [r1, #0]

0800007a <loop>:


    loop:
        ldr r1, =GPIOB_ODR
 800007a:	4916      	ldr	r1, [pc, #88]	; (80000d4 <button+0x40>)
        ldr r2, [r1]
 800007c:	680a      	ldr	r2, [r1, #0]
        ldr r4,= 0x0
 800007e:	4c16      	ldr	r4, [pc, #88]	; (80000d8 <button+0x44>)
        ands r2, r2, r4
 8000080:	4022      	ands	r2, r4
        str r2, [r1]
 8000082:	600a      	str	r2, [r1, #0]

        ldr r0,=GPIOA_IDR
 8000084:	4815      	ldr	r0, [pc, #84]	; (80000dc <button+0x48>)
        ldr r1,[r0]
 8000086:	6801      	ldr	r1, [r0, #0]
        ldr r5, =0x1
 8000088:	4d15      	ldr	r5, [pc, #84]	; (80000e0 <button+0x4c>)
        ands r1, r1, r5
 800008a:	4029      	ands	r1, r5
        ldr r2,=0x1
 800008c:	4a14      	ldr	r2, [pc, #80]	; (80000e0 <button+0x4c>)
        cmp r1,r2
 800008e:	4291      	cmp	r1, r2
        beq button
 8000090:	d000      	beq.n	8000094 <button>
        b  loop
 8000092:	e7f2      	b.n	800007a <loop>

08000094 <button>:

	button:
        ldr r1, =GPIOB_ODR
 8000094:	490f      	ldr	r1, [pc, #60]	; (80000d4 <button+0x40>)
        ldr r2, [r1]
 8000096:	680a      	ldr	r2, [r1, #0]
        ldr r4,= 0x100
 8000098:	4c12      	ldr	r4, [pc, #72]	; (80000e4 <button+0x50>)
        orrs r2, r2, r4
 800009a:	4322      	orrs	r2, r4
        str r2, [r1]
 800009c:	600a      	str	r2, [r1, #0]
        b  loop
 800009e:	e7ec      	b.n	800007a <loop>
	/* for(;;); */
	b .
 80000a0:	e7fe      	b.n	80000a0 <button+0xc>

	/* this should never get executed */
	nop
 80000a2:	46c0      	nop			; (mov r8, r8)
	ldr r0, =_estack
 80000a4:	20002000 	.word	0x20002000
	ldr r0, =_sdata
 80000a8:	20000000 	.word	0x20000000
	ldr r1, =_edata
 80000ac:	20000000 	.word	0x20000000
	ldr r2, =_sidata
 80000b0:	080000f0 	.word	0x080000f0
	ldr r2, =_sbss
 80000b4:	20000000 	.word	0x20000000
	ldr r4, =_ebss
 80000b8:	20000000 	.word	0x20000000
ldr r1, =RCC_IOPENR
 80000bc:	40021034 	.word	0x40021034
	ldr r1, =GPIOA_MODER
 80000c0:	50000000 	.word	0x50000000
    ldr r4, =0x3
 80000c4:	00000003 	.word	0x00000003
    ldr r1, =GPIOB_MODER
 80000c8:	50000400 	.word	0x50000400
    ldr r4, =0x30000
 80000cc:	00030000 	.word	0x00030000
    ldr r4, =0x10000
 80000d0:	00010000 	.word	0x00010000
        ldr r1, =GPIOB_ODR
 80000d4:	50000414 	.word	0x50000414
        ldr r4,= 0x0
 80000d8:	00000000 	.word	0x00000000
        ldr r0,=GPIOA_IDR
 80000dc:	50000010 	.word	0x50000010
        ldr r5, =0x1
 80000e0:	00000001 	.word	0x00000001
        ldr r4,= 0x100
 80000e4:	00000100 	.word	0x00000100

Disassembly of section .init:

080000e8 <_init>:
 80000e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80000ea:	46c0      	nop			; (mov r8, r8)

Disassembly of section .fini:

080000ec <_fini>:
 80000ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80000ee:	46c0      	nop			; (mov r8, r8)
