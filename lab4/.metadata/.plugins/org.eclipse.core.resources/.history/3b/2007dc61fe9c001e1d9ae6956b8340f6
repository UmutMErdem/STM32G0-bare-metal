#include "stm32g0xx.h"

void GPIO_Config(void);
void TIM2_Config(void);
void USART2_Config(void);
void keypad_Config(void);
void uart_tx(uint8_t);
uint8_t uart_rx(void);
int _print(int, char *, int);
void print(char *);
void ConIntToAlp(char *, uint8_t, uint8_t);
void delay(volatile uint32_t);
void SetKeypad(void);
void ResetKeypad(void);

uint8_t counter = 0; // for 2 second in 2 cycle
uint8_t limit_flag = 0;
uint32_t dutyCycle = 0;
uint8_t is_hundred = 0;
uint8_t is_ten_digit = 1;
uint8_t hundred = 0;
uint8_t ten = 0;
uint8_t unit = 0;
char tx_buffer[3];

void TIM2_IRQHandler(void) {
    // PWM Duty Cycle[%] = (CCRx/ARR)*100;

	TIM2->CCR1 = (TIM2->ARR*dutyCycle)/100;

	if(counter++ == 1){
		ConIntToAlp(tx_buffer, dutyCycle, is_hundred);
		print(tx_buffer);
		counter = 0;
	}

    TIM2->SR &= ~(1U << 0); // Clear update status register
}

void EXTI0_1_IRQHandler(){
	ResetKeypad();

	// KEYPAD button control for number 1
	GPIOA->ODR |=(1<<6);
	if((GPIOB->IDR>>1)&1){
		if(is_ten_digit){
			ten = 1;
			is_ten_digit = 0;
		}
		else{
			unit = 1;
			is_ten_digit = 1;
		}
	}
	else{
		// KEYPAD button control for number 4
		GPIOA->ODR &=  ~(1U <<6);
		GPIOA->ODR |=(1<<1);
		if((GPIOB->IDR>>1)&1){
			if(is_ten_digit){
				ten = 4;
				is_ten_digit = 0;
			}
			else{
				unit = 4;
				is_ten_digit = 1;
			}
		}
		else{
			// KEYPAD button control for number 7
			GPIOA->ODR &=  ~(1U <<1);
			GPIOA->ODR |=(1<<4);
			if((GPIOB->IDR>>1)&1){
				if(is_ten_digit){
					ten = 7;
					is_ten_digit = 0;
				}
				else{
					unit = 7;
					is_ten_digit = 1;
				}
			}
			else{
				// KEYPAD button control for number *
				GPIOA->ODR &=  ~(1U <<4);
				GPIOA->ODR |=(1<<5);
				if((GPIOB->IDR>>1)&1){
				}
			}
		}
	}

	SetKeypad(); // to find column of button presssed
	EXTI->RPR1 |=(1<<1);
}

void EXTI2_3_IRQHandler(){
	ResetKeypad();

	if((EXTI->RPR1>>2)&1){ // 	KEYPAD button control for number 2 - 2nd column
		GPIOA->ODR |=(1<<6);
		if((GPIOB->IDR>>2)&1){
			if(is_ten_digit){
				ten = 2;
				is_ten_digit = 0;
			}
			else{
				unit = 2;
				is_ten_digit = 1;
			}
		}
		else{
			GPIOA->ODR &=  ~(1U <<6); // 	KEYPAD button control for number 5
			GPIOA->ODR |=(1<<1);
			if((GPIOB->IDR>>2)&1){
				if(is_ten_digit){
					ten = 5;
					is_ten_digit = 0;
				}
				else{
					unit = 5;
					is_ten_digit = 1;
				}
			}
			else{
				GPIOA->ODR &=  ~(1U <<1);
				GPIOA->ODR |=(1<<4);
				if((GPIOB->IDR>>2)&1){ // KEYPAD button control for  8
					if(is_ten_digit){
						ten = 8;
						is_ten_digit = 0;
					}
					else{
						unit = 8;
						is_ten_digit = 1;
					}
				}
				else{
					GPIOA->ODR &=  ~(1U <<4);
					GPIOA->ODR |=(1<<5);
					if((GPIOB->IDR>>2)&1){ // KEYPAD button control for  0
						if(is_ten_digit == 1 && unit == 0){
							is_hundred = 1;
						}
						else if(is_ten_digit){
							ten = 0;
							is_ten_digit = 0;
						}
						else{
							unit = 0;
							is_ten_digit = 1;
						}
					}
				}
			}
		}

		EXTI->RPR1 |=(1<<2);
	}
	else{ 	// 	KEYPAD button control for number 3 - 3rd column
		GPIOA->ODR |=(1<<6);
		if((GPIOB->IDR>>3)&1){
			if(is_ten_digit){
				ten = 3;
				is_ten_digit = 0;
			}
			else{
				unit = 3;
				is_ten_digit = 1;
			}
		}
		else{
			GPIOA->ODR &=  ~(1U <<6);
			GPIOA->ODR |=(1<<1);
			if((GPIOB->IDR>>3)&1){ // KEYPAD button control for  6
				if(is_ten_digit){
					ten = 6;
					is_ten_digit = 0;
				}
				else{
					unit = 6;
					is_ten_digit = 1;
				}
			}
			else {
				GPIOA->ODR &=  ~(1U <<1);
				GPIOA->ODR |=(1<<4);
				if((GPIOB->IDR>>3)&1){ // KEYPAD button control for  9
					if(is_ten_digit){
						ten = 9;
						is_ten_digit = 0;
					}
					else{
						unit = 9;
						is_ten_digit = 1;
					}
				}
				else{
					GPIOA->ODR &=  ~(1U <<4);
					GPIOA->ODR |=(1<<5);
					if((GPIOB->IDR>>3)&1){ // KEYPAD button control for  #
						if(is_hundred) dutyCycle = 100;
						else dutyCycle = (ten*10 + unit);
					}
				}
			}
		}

		EXTI->RPR1 |=(1<<3);
	}
	SetKeypad();
}

void EXTI4_15_IRQHandler(){
	ResetKeypad();

	GPIOA->ODR |=(1<<6);
	if((GPIOB->IDR>>4)&1){ // KEYPAD button control for  A
	}
	else{
		GPIOA->ODR &=  ~(1U <<6);
		GPIOA->ODR |=(1<<1);
		if((GPIOB->IDR>>4)&1){ // KEYPAD button control for  B
		}
		else {
			GPIOA->ODR &=  ~(1U <<1);
			GPIOA->ODR |=(1<<4);
			if((GPIOB->IDR>>4)&1){ // KEYPAD button control for  C
			}
			else{
				GPIOA->ODR &=  ~(1U <<4);
				GPIOA->ODR |=(1<<5);
				if((GPIOB->IDR>>4)&1){ // KEYPAD button control for  D
				}
			}
		}
	}

	SetKeypad();
	EXTI->RPR1 |=(1<<4);
}

int main(void){

	GPIO_Config();
	TIM2_Config();
	USART2_Config();
	keypad_Config();

	while(1){
	}

	return 0;
}

void ConIntToAlp(char *tx_buffer, uint8_t dutyCycle, uint8_t is_hundred){
	uint8_t hundred, ten, unit;
	hundred = (is_hundred)? dutyCycle/100: 0;
	ten = (dutyCycle - 100*hundred)/10;
	unit = (dutyCycle - ten*10 - hundred*100);
	tx_buffer[0] = (is_hundred)? 48+hundred: 48;
	tx_buffer[1] = 48+ten;
	tx_buffer[2] = 48+unit;
}

void printChar(uint8_t c){
	while(!(USART2->ISR & USART_ISR_TXE_TXFNF)); // when messages are sent.
	USART2->TDR = c; // Transmit data register is taken character to send a message.
}

int _print(int f, char *ptr, int len)
{
	/*in for loop, i of is increasing until equal to len
	 * and meanwhile, chars of 2nd parameter of _print function is writen
	 * into the printChar character by character increasing ptr of 2nd parameter
	 * of _print function  */
	for(volatile int i = f; i<len; i++){
		printChar(*ptr);
		ptr++;
	}
	return len; // return length
}

void print(char *s){
	int length = 0; // to count length of character
	/* i is pointer of string and length is increasing until i equals NULL character*/
	for(char *i = s; *i != NULL; i++) length++;
	_print(0, s, length);
}

uint8_t uart_rx(void){
	while(!( USART2->ISR & USART_ISR_RXNE_RXFNE)); // when messages are detected.
	return (uint8_t)USART2->RDR; // RDR[8:0]: Receive data value
}

void uart_tx(uint8_t c){
	printChar(c); // printing character by character
}

void keypad_Config(void){
	RCC->IOPENR |= (RCC_IOPENR_GPIOAEN | RCC_IOPENR_GPIOBEN); // A and B clock enable

	GPIOA->MODER &=  ~(3U<<2*6); //PA6 as output  R1
	GPIOA->MODER |=  (1U<<6);

 	GPIOA->MODER &=  ~(3U <<2*1); //PA1  as output R2
 	GPIOA->MODER |=  (1 << 2);

 	GPIOA->MODER &=  ~(3U <<2*4); //PA4  as output R3
 	GPIOA->MODER |=  (1 << 8);

 	GPIOA->MODER &=  ~(3U <<2*5); //PA5  as output R4
 	GPIOA->MODER |=  (1 << 10);

	GPIOB->MODER &= ~(3U << 2*1);// PB1 as input C1
	GPIOB->PUPDR |= (2U << 2*1); //Use of Pull ups to prevent bouncing

	GPIOB->MODER &= ~(3U << 2*2);// PB2 as input C2
	GPIOB->PUPDR |= (2U << 2*2); //Use of Pull ups to prevent bouncing

	GPIOB->MODER &= ~(3U << 2*3); // PB3 as input C3
	GPIOB->PUPDR |= (2U << 2*3); //Use of Pull ups to prevent bouncing

	GPIOB->MODER &= ~(3U << 2*4); // PB4 as input C4
	GPIOB->PUPDR |= (2U << 2*4); //Use of Pull ups to prevent bouncing

	EXTI->RTSR1 |=(1U<<1); // PB1 as interrupt
	EXTI->EXTICR[0] |= (1U<<8*1);
	EXTI->IMR1 |=	EXTI_IMR1_IM1;
	NVIC_SetPriority(EXTI0_1_IRQn,1);
	NVIC_EnableIRQ(EXTI0_1_IRQn);


	EXTI->RTSR1 |=(1U<<2); // PB2 as interrupt
	EXTI->EXTICR[0] |= (1U<<8*2);
	EXTI->IMR1 |= EXTI_IMR1_IM2;


	EXTI->RTSR1 |=(1U<<3);// PB3 as interrupt
	EXTI->EXTICR[0] |= (1U<<8*3);
	EXTI->IMR1 |= EXTI_IMR1_IM3;
	NVIC_SetPriority(EXTI2_3_IRQn,0);
	NVIC_EnableIRQ(EXTI2_3_IRQn);


	EXTI->RTSR1 |=(1U<<4);		// PB4 as interrupt
	EXTI->EXTICR[1] |= (1U<<8*0);
	EXTI->IMR1 |= EXTI_IMR1_IM4;
	NVIC_SetPriority(EXTI4_15_IRQn,2);
	NVIC_EnableIRQ(EXTI4_15_IRQn);

	GPIOA->ODR |= (1<<6);  //R1 set
	GPIOA->ODR |= (1<<1);  //R2 set
	GPIOA->ODR |= (1<<4);  //R3 set
	GPIOA->ODR |= (1<<5);  //R4 set
}
void GPIO_Config(void){
	// input-output A port clock enable
	RCC->IOPENR |= RCC_IOPENR_GPIOAEN;
	// select PA0 mode as Alternate Function
	GPIOA->MODER &= ~(3U << 2*0);
	GPIOA->MODER |= (2U << 2*0);
	/* modes of GPIOA PA2 and PA3 pins are selected as alternate function.
	 * like that 0b1111_1010_1111;*/
	GPIOA->MODER &= ~((3U << 2*2) | (3U << 2*3));
	GPIOA->MODER |= (2U << 2*2) | (2U << 2*3);

	/* PA0 pin used for TIM2_CH1 are selected
	 * with GPIOx_AFRL = AFRL_AFSELy(Alternate Function register -
	 * Alternate function selection for port x pin y)
	 * AF2 -->> TIM2_CH1*/
	GPIOA->AFR[0] |= GPIO_AFRL_AFSEL0_1;

	/* PA2 and PA3 pins used for USART2_TX and USART2_RX are selected
	 * with GPIOx_AFRL = AFRL_AFSELy(Alternate Function register -
	 * Alternate function selection for port x pin y)
	 * AF1 -->> USART2_RX, USART2_TX*/
	GPIOA->AFR[0] |= GPIO_AFRL_AFSEL2_0;
	GPIOA->AFR[0] |= GPIO_AFRL_AFSEL3_0;
}

void TIM2_Config(void){
	RCC->APBENR1 |= RCC_APBENR1_TIM2EN; // Timer 2 clock enable

	TIM2->CR1 = 0; // zero out the control register just in case
	TIM2->CR1 = TIM_CR1_ARPE; // Auto-reload preload enable

	TIM2->CCMR1 |= (6U << 4); // PWM mode 1 is selected.
	TIM2->CCMR1 |= TIM_CCMR1_OC1PE; // Output Compare 1 Preload Enable

	TIM2->CCER |= TIM_CCER_CC1E; // Capture compare ch1 enable

	TIM2->CNT = 0; // zero out counter

	// tim uptade frequency = TIM_CLK/((TIM_PSC+1)*TIM_ARR) for 1 s interrupt
	TIM2->PSC = 9; // prescaler
	TIM2->ARR = 16000; // period

	TIM2->CCR1 = 0; // zero out duty for ch1 in TIM capture/compare register 1

	// Update Generation: Re-initialize the counter and generates an update of the registers.
	TIM2->EGR |= TIM_EGR_UG;

	TIM2->DIER |= TIM_DIER_UIE; // Update interrupt enable

	TIM2->CR1 |= TIM_CR1_CEN; // TIM2 Counter enable

	NVIC_SetPriority(TIM2_IRQn, 1); // Setting Priority for timer handler
	NVIC_EnableIRQ(TIM2_IRQn); // timer handler enable
}

void USART2_Config(void){
	RCC->APBENR1 |= RCC_APBENR1_USART2EN; // RCC APB peripherals clock enable for USART2
	USART2->CR1 = 0x00; // clear all
	USART2->CR1 |= USART_CR1_UE; // UE: USART enable

	/* Baud rate of 9600, PCLK1 at 16 MHz
	 * TX/RX baud rate = f_clk/(16*USARTDIV)
	 * 9600 = 16MHz/(16*USARTDIV) --->>> USARTDIV = 104.1666667
	 * IEEE754 floating-point --->>> mantissa = 104, fraction = 0.167*16 = 2.672 â‰ˆ 3*/
	USART2->BRR |= (3 << 0) | (104 << 4);

	USART2->CR1 |= USART_CR1_RE; // RE: Receiver enable
	USART2->CR1 |= USART_CR1_TE; // TE: Transmitter enable
}

void SetKeypad(void){
	GPIOA->ODR |= (1<<0);  //R1 set
	GPIOA->ODR |= (1<<1);  //R2 set
	GPIOA->ODR |= (1<<4);  //R3 set
	GPIOA->ODR |= (1<<5);  //R4 set
}

void ResetKeypad(void){
	GPIOA->ODR &=  ~(1U <<0); //R1 reset
	GPIOA->ODR &=  ~(1U <<1); //R2 reset
	GPIOA->ODR &=  ~(1U <<4); //R3 reset
	GPIOA->ODR &=  ~(1U <<5);  //R4 reset
}

void delay(volatile uint32_t time){
    for(; time>0; time--);
}
