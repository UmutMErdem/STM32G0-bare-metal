
problem3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000ef8  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000fb4  08000fb4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000fb4  08000fb4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08000fb4  08000fb4  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000fb4  08000fb4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000fb4  08000fb4  00010fb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000fb8  08000fb8  00010fb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08000fbc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000003c  2000000c  08000fc8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000048  08000fc8  00020048  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000199c  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000711  00000000  00000000  00021a13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000248  00000000  00000000  00022128  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000001a8  00000000  00000000  00022370  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001357d  00000000  00000000  00022518  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00002690  00000000  00000000  00035a95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007db05  00000000  00000000  00038125  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000006fc  00000000  00000000  000b5c2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004f  00000000  00000000  000b6328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08000f9c 	.word	0x08000f9c

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	08000f9c 	.word	0x08000f9c

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	b082      	sub	sp, #8
 8000220:	af00      	add	r7, sp, #0
 8000222:	0002      	movs	r2, r0
 8000224:	1dfb      	adds	r3, r7, #7
 8000226:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000228:	1dfb      	adds	r3, r7, #7
 800022a:	781b      	ldrb	r3, [r3, #0]
 800022c:	2b7f      	cmp	r3, #127	; 0x7f
 800022e:	d809      	bhi.n	8000244 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000230:	1dfb      	adds	r3, r7, #7
 8000232:	781b      	ldrb	r3, [r3, #0]
 8000234:	001a      	movs	r2, r3
 8000236:	231f      	movs	r3, #31
 8000238:	401a      	ands	r2, r3
 800023a:	4b04      	ldr	r3, [pc, #16]	; (800024c <__NVIC_EnableIRQ+0x30>)
 800023c:	2101      	movs	r1, #1
 800023e:	4091      	lsls	r1, r2
 8000240:	000a      	movs	r2, r1
 8000242:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000244:	46c0      	nop			; (mov r8, r8)
 8000246:	46bd      	mov	sp, r7
 8000248:	b002      	add	sp, #8
 800024a:	bd80      	pop	{r7, pc}
 800024c:	e000e100 	.word	0xe000e100

08000250 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000250:	b590      	push	{r4, r7, lr}
 8000252:	b083      	sub	sp, #12
 8000254:	af00      	add	r7, sp, #0
 8000256:	0002      	movs	r2, r0
 8000258:	6039      	str	r1, [r7, #0]
 800025a:	1dfb      	adds	r3, r7, #7
 800025c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800025e:	1dfb      	adds	r3, r7, #7
 8000260:	781b      	ldrb	r3, [r3, #0]
 8000262:	2b7f      	cmp	r3, #127	; 0x7f
 8000264:	d828      	bhi.n	80002b8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000266:	4a2f      	ldr	r2, [pc, #188]	; (8000324 <__NVIC_SetPriority+0xd4>)
 8000268:	1dfb      	adds	r3, r7, #7
 800026a:	781b      	ldrb	r3, [r3, #0]
 800026c:	b25b      	sxtb	r3, r3
 800026e:	089b      	lsrs	r3, r3, #2
 8000270:	33c0      	adds	r3, #192	; 0xc0
 8000272:	009b      	lsls	r3, r3, #2
 8000274:	589b      	ldr	r3, [r3, r2]
 8000276:	1dfa      	adds	r2, r7, #7
 8000278:	7812      	ldrb	r2, [r2, #0]
 800027a:	0011      	movs	r1, r2
 800027c:	2203      	movs	r2, #3
 800027e:	400a      	ands	r2, r1
 8000280:	00d2      	lsls	r2, r2, #3
 8000282:	21ff      	movs	r1, #255	; 0xff
 8000284:	4091      	lsls	r1, r2
 8000286:	000a      	movs	r2, r1
 8000288:	43d2      	mvns	r2, r2
 800028a:	401a      	ands	r2, r3
 800028c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800028e:	683b      	ldr	r3, [r7, #0]
 8000290:	019b      	lsls	r3, r3, #6
 8000292:	22ff      	movs	r2, #255	; 0xff
 8000294:	401a      	ands	r2, r3
 8000296:	1dfb      	adds	r3, r7, #7
 8000298:	781b      	ldrb	r3, [r3, #0]
 800029a:	0018      	movs	r0, r3
 800029c:	2303      	movs	r3, #3
 800029e:	4003      	ands	r3, r0
 80002a0:	00db      	lsls	r3, r3, #3
 80002a2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002a4:	481f      	ldr	r0, [pc, #124]	; (8000324 <__NVIC_SetPriority+0xd4>)
 80002a6:	1dfb      	adds	r3, r7, #7
 80002a8:	781b      	ldrb	r3, [r3, #0]
 80002aa:	b25b      	sxtb	r3, r3
 80002ac:	089b      	lsrs	r3, r3, #2
 80002ae:	430a      	orrs	r2, r1
 80002b0:	33c0      	adds	r3, #192	; 0xc0
 80002b2:	009b      	lsls	r3, r3, #2
 80002b4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80002b6:	e031      	b.n	800031c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002b8:	4a1b      	ldr	r2, [pc, #108]	; (8000328 <__NVIC_SetPriority+0xd8>)
 80002ba:	1dfb      	adds	r3, r7, #7
 80002bc:	781b      	ldrb	r3, [r3, #0]
 80002be:	0019      	movs	r1, r3
 80002c0:	230f      	movs	r3, #15
 80002c2:	400b      	ands	r3, r1
 80002c4:	3b08      	subs	r3, #8
 80002c6:	089b      	lsrs	r3, r3, #2
 80002c8:	3306      	adds	r3, #6
 80002ca:	009b      	lsls	r3, r3, #2
 80002cc:	18d3      	adds	r3, r2, r3
 80002ce:	3304      	adds	r3, #4
 80002d0:	681b      	ldr	r3, [r3, #0]
 80002d2:	1dfa      	adds	r2, r7, #7
 80002d4:	7812      	ldrb	r2, [r2, #0]
 80002d6:	0011      	movs	r1, r2
 80002d8:	2203      	movs	r2, #3
 80002da:	400a      	ands	r2, r1
 80002dc:	00d2      	lsls	r2, r2, #3
 80002de:	21ff      	movs	r1, #255	; 0xff
 80002e0:	4091      	lsls	r1, r2
 80002e2:	000a      	movs	r2, r1
 80002e4:	43d2      	mvns	r2, r2
 80002e6:	401a      	ands	r2, r3
 80002e8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80002ea:	683b      	ldr	r3, [r7, #0]
 80002ec:	019b      	lsls	r3, r3, #6
 80002ee:	22ff      	movs	r2, #255	; 0xff
 80002f0:	401a      	ands	r2, r3
 80002f2:	1dfb      	adds	r3, r7, #7
 80002f4:	781b      	ldrb	r3, [r3, #0]
 80002f6:	0018      	movs	r0, r3
 80002f8:	2303      	movs	r3, #3
 80002fa:	4003      	ands	r3, r0
 80002fc:	00db      	lsls	r3, r3, #3
 80002fe:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000300:	4809      	ldr	r0, [pc, #36]	; (8000328 <__NVIC_SetPriority+0xd8>)
 8000302:	1dfb      	adds	r3, r7, #7
 8000304:	781b      	ldrb	r3, [r3, #0]
 8000306:	001c      	movs	r4, r3
 8000308:	230f      	movs	r3, #15
 800030a:	4023      	ands	r3, r4
 800030c:	3b08      	subs	r3, #8
 800030e:	089b      	lsrs	r3, r3, #2
 8000310:	430a      	orrs	r2, r1
 8000312:	3306      	adds	r3, #6
 8000314:	009b      	lsls	r3, r3, #2
 8000316:	18c3      	adds	r3, r0, r3
 8000318:	3304      	adds	r3, #4
 800031a:	601a      	str	r2, [r3, #0]
}
 800031c:	46c0      	nop			; (mov r8, r8)
 800031e:	46bd      	mov	sp, r7
 8000320:	b003      	add	sp, #12
 8000322:	bd90      	pop	{r4, r7, pc}
 8000324:	e000e100 	.word	0xe000e100
 8000328:	e000ed00 	.word	0xe000ed00

0800032c <main>:
void printChar(uint8_t);
void SetKeypad(void);
void ResetKeypad(void);
void delay(volatile uint32_t);

int main(void) {
 800032c:	b580      	push	{r7, lr}
 800032e:	af00      	add	r7, sp, #0

	ResetKeypad();
 8000330:	f000 fb85 	bl	8000a3e <ResetKeypad>
	TIM3_Config();
 8000334:	f000 fd26 	bl	8000d84 <TIM3_Config>
	keypad_Config();
 8000338:	f000 fbb6 	bl	8000aa8 <keypad_Config>
	USART2_Config(9600);
 800033c:	2396      	movs	r3, #150	; 0x96
 800033e:	019b      	lsls	r3, r3, #6
 8000340:	0018      	movs	r0, r3
 8000342:	f000 fc99 	bl	8000c78 <USART2_Config>
	SetKeypad();
 8000346:	f000 fb55 	bl	80009f4 <SetKeypad>

    while(1) {
 800034a:	e7fe      	b.n	800034a <main+0x1e>

0800034c <conIntToAlp>:
    }

    return 0;
}

uint8_t conIntToAlp(uint8_t a){
 800034c:	b580      	push	{r7, lr}
 800034e:	b082      	sub	sp, #8
 8000350:	af00      	add	r7, sp, #0
 8000352:	0002      	movs	r2, r0
 8000354:	1dfb      	adds	r3, r7, #7
 8000356:	701a      	strb	r2, [r3, #0]
	if(a==0)
 8000358:	1dfb      	adds	r3, r7, #7
 800035a:	781b      	ldrb	r3, [r3, #0]
 800035c:	2b00      	cmp	r3, #0
 800035e:	d101      	bne.n	8000364 <conIntToAlp+0x18>
		return 48;
 8000360:	2330      	movs	r3, #48	; 0x30
 8000362:	e030      	b.n	80003c6 <conIntToAlp+0x7a>
	else if(a==1)
 8000364:	1dfb      	adds	r3, r7, #7
 8000366:	781b      	ldrb	r3, [r3, #0]
 8000368:	2b01      	cmp	r3, #1
 800036a:	d101      	bne.n	8000370 <conIntToAlp+0x24>
		return 49;
 800036c:	2331      	movs	r3, #49	; 0x31
 800036e:	e02a      	b.n	80003c6 <conIntToAlp+0x7a>
	else if(a==2)
 8000370:	1dfb      	adds	r3, r7, #7
 8000372:	781b      	ldrb	r3, [r3, #0]
 8000374:	2b02      	cmp	r3, #2
 8000376:	d101      	bne.n	800037c <conIntToAlp+0x30>
		return 50;
 8000378:	2332      	movs	r3, #50	; 0x32
 800037a:	e024      	b.n	80003c6 <conIntToAlp+0x7a>
	else if(a==3)
 800037c:	1dfb      	adds	r3, r7, #7
 800037e:	781b      	ldrb	r3, [r3, #0]
 8000380:	2b03      	cmp	r3, #3
 8000382:	d101      	bne.n	8000388 <conIntToAlp+0x3c>
		return 51;
 8000384:	2333      	movs	r3, #51	; 0x33
 8000386:	e01e      	b.n	80003c6 <conIntToAlp+0x7a>
	else if (a==4)
 8000388:	1dfb      	adds	r3, r7, #7
 800038a:	781b      	ldrb	r3, [r3, #0]
 800038c:	2b04      	cmp	r3, #4
 800038e:	d101      	bne.n	8000394 <conIntToAlp+0x48>
		return 52;
 8000390:	2334      	movs	r3, #52	; 0x34
 8000392:	e018      	b.n	80003c6 <conIntToAlp+0x7a>
	else if(a==5)
 8000394:	1dfb      	adds	r3, r7, #7
 8000396:	781b      	ldrb	r3, [r3, #0]
 8000398:	2b05      	cmp	r3, #5
 800039a:	d101      	bne.n	80003a0 <conIntToAlp+0x54>
		return 53;
 800039c:	2335      	movs	r3, #53	; 0x35
 800039e:	e012      	b.n	80003c6 <conIntToAlp+0x7a>
	else if (a==6)
 80003a0:	1dfb      	adds	r3, r7, #7
 80003a2:	781b      	ldrb	r3, [r3, #0]
 80003a4:	2b06      	cmp	r3, #6
 80003a6:	d101      	bne.n	80003ac <conIntToAlp+0x60>
		return 54;
 80003a8:	2336      	movs	r3, #54	; 0x36
 80003aa:	e00c      	b.n	80003c6 <conIntToAlp+0x7a>
	else if(a==7)
 80003ac:	1dfb      	adds	r3, r7, #7
 80003ae:	781b      	ldrb	r3, [r3, #0]
 80003b0:	2b07      	cmp	r3, #7
 80003b2:	d101      	bne.n	80003b8 <conIntToAlp+0x6c>
		return 55;
 80003b4:	2337      	movs	r3, #55	; 0x37
 80003b6:	e006      	b.n	80003c6 <conIntToAlp+0x7a>
	else if(a==8)
 80003b8:	1dfb      	adds	r3, r7, #7
 80003ba:	781b      	ldrb	r3, [r3, #0]
 80003bc:	2b08      	cmp	r3, #8
 80003be:	d101      	bne.n	80003c4 <conIntToAlp+0x78>
		return 56;
 80003c0:	2338      	movs	r3, #56	; 0x38
 80003c2:	e000      	b.n	80003c6 <conIntToAlp+0x7a>
	else return 57;
 80003c4:	2339      	movs	r3, #57	; 0x39
}
 80003c6:	0018      	movs	r0, r3
 80003c8:	46bd      	mov	sp, r7
 80003ca:	b002      	add	sp, #8
 80003cc:	bd80      	pop	{r7, pc}
	...

080003d0 <TIM3_IRQHandler>:

void TIM3_IRQHandler(){
 80003d0:	b580      	push	{r7, lr}
 80003d2:	af00      	add	r7, sp, #0
	counter+=10; // to write to the console every two seconds
 80003d4:	4b51      	ldr	r3, [pc, #324]	; (800051c <TIM3_IRQHandler+0x14c>)
 80003d6:	681b      	ldr	r3, [r3, #0]
 80003d8:	330a      	adds	r3, #10
 80003da:	001a      	movs	r2, r3
 80003dc:	4b4f      	ldr	r3, [pc, #316]	; (800051c <TIM3_IRQHandler+0x14c>)
 80003de:	601a      	str	r2, [r3, #0]

	if(counter==2000){
 80003e0:	4b4e      	ldr	r3, [pc, #312]	; (800051c <TIM3_IRQHandler+0x14c>)
 80003e2:	681a      	ldr	r2, [r3, #0]
 80003e4:	23fa      	movs	r3, #250	; 0xfa
 80003e6:	00db      	lsls	r3, r3, #3
 80003e8:	429a      	cmp	r2, r3
 80003ea:	d000      	beq.n	80003ee <TIM3_IRQHandler+0x1e>
 80003ec:	e086      	b.n	80004fc <TIM3_IRQHandler+0x12c>
		delay(2000);
 80003ee:	23fa      	movs	r3, #250	; 0xfa
 80003f0:	00db      	lsls	r3, r3, #3
 80003f2:	0018      	movs	r0, r3
 80003f4:	f000 fb48 	bl	8000a88 <delay>
		number=TIM3->CCR1;
 80003f8:	4b49      	ldr	r3, [pc, #292]	; (8000520 <TIM3_IRQHandler+0x150>)
 80003fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80003fc:	4b49      	ldr	r3, [pc, #292]	; (8000524 <TIM3_IRQHandler+0x154>)
 80003fe:	601a      	str	r2, [r3, #0]

		ten_thousands=(number)/10000;
 8000400:	4b48      	ldr	r3, [pc, #288]	; (8000524 <TIM3_IRQHandler+0x154>)
 8000402:	681b      	ldr	r3, [r3, #0]
 8000404:	4948      	ldr	r1, [pc, #288]	; (8000528 <TIM3_IRQHandler+0x158>)
 8000406:	0018      	movs	r0, r3
 8000408:	f7ff fe7c 	bl	8000104 <__udivsi3>
 800040c:	0003      	movs	r3, r0
 800040e:	001a      	movs	r2, r3
 8000410:	4b46      	ldr	r3, [pc, #280]	; (800052c <TIM3_IRQHandler+0x15c>)
 8000412:	601a      	str	r2, [r3, #0]
		printChar(conIntToAlp(ten_thousands));
 8000414:	4b45      	ldr	r3, [pc, #276]	; (800052c <TIM3_IRQHandler+0x15c>)
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	b2db      	uxtb	r3, r3
 800041a:	0018      	movs	r0, r3
 800041c:	f7ff ff96 	bl	800034c <conIntToAlp>
 8000420:	0003      	movs	r3, r0
 8000422:	0018      	movs	r0, r3
 8000424:	f000 face 	bl	80009c4 <printChar>

		number -= (ten_thousands * 10000);
 8000428:	4b3e      	ldr	r3, [pc, #248]	; (8000524 <TIM3_IRQHandler+0x154>)
 800042a:	681a      	ldr	r2, [r3, #0]
 800042c:	4b3f      	ldr	r3, [pc, #252]	; (800052c <TIM3_IRQHandler+0x15c>)
 800042e:	681b      	ldr	r3, [r3, #0]
 8000430:	493d      	ldr	r1, [pc, #244]	; (8000528 <TIM3_IRQHandler+0x158>)
 8000432:	434b      	muls	r3, r1
 8000434:	1ad2      	subs	r2, r2, r3
 8000436:	4b3b      	ldr	r3, [pc, #236]	; (8000524 <TIM3_IRQHandler+0x154>)
 8000438:	601a      	str	r2, [r3, #0]
		thousands=number/1000;
 800043a:	4b3a      	ldr	r3, [pc, #232]	; (8000524 <TIM3_IRQHandler+0x154>)
 800043c:	681b      	ldr	r3, [r3, #0]
 800043e:	22fa      	movs	r2, #250	; 0xfa
 8000440:	0091      	lsls	r1, r2, #2
 8000442:	0018      	movs	r0, r3
 8000444:	f7ff fe5e 	bl	8000104 <__udivsi3>
 8000448:	0003      	movs	r3, r0
 800044a:	001a      	movs	r2, r3
 800044c:	4b38      	ldr	r3, [pc, #224]	; (8000530 <TIM3_IRQHandler+0x160>)
 800044e:	601a      	str	r2, [r3, #0]
		printChar(conIntToAlp(thousands));
 8000450:	4b37      	ldr	r3, [pc, #220]	; (8000530 <TIM3_IRQHandler+0x160>)
 8000452:	681b      	ldr	r3, [r3, #0]
 8000454:	b2db      	uxtb	r3, r3
 8000456:	0018      	movs	r0, r3
 8000458:	f7ff ff78 	bl	800034c <conIntToAlp>
 800045c:	0003      	movs	r3, r0
 800045e:	0018      	movs	r0, r3
 8000460:	f000 fab0 	bl	80009c4 <printChar>

		number -= (thousands * 1000);
 8000464:	4b2f      	ldr	r3, [pc, #188]	; (8000524 <TIM3_IRQHandler+0x154>)
 8000466:	6819      	ldr	r1, [r3, #0]
 8000468:	4b31      	ldr	r3, [pc, #196]	; (8000530 <TIM3_IRQHandler+0x160>)
 800046a:	681a      	ldr	r2, [r3, #0]
 800046c:	0013      	movs	r3, r2
 800046e:	015b      	lsls	r3, r3, #5
 8000470:	1a9b      	subs	r3, r3, r2
 8000472:	009b      	lsls	r3, r3, #2
 8000474:	189b      	adds	r3, r3, r2
 8000476:	00db      	lsls	r3, r3, #3
 8000478:	1aca      	subs	r2, r1, r3
 800047a:	4b2a      	ldr	r3, [pc, #168]	; (8000524 <TIM3_IRQHandler+0x154>)
 800047c:	601a      	str	r2, [r3, #0]
		printChar(conIntToAlp(hundreds));
 800047e:	4b2d      	ldr	r3, [pc, #180]	; (8000534 <TIM3_IRQHandler+0x164>)
 8000480:	681b      	ldr	r3, [r3, #0]
 8000482:	b2db      	uxtb	r3, r3
 8000484:	0018      	movs	r0, r3
 8000486:	f7ff ff61 	bl	800034c <conIntToAlp>
 800048a:	0003      	movs	r3, r0
 800048c:	0018      	movs	r0, r3
 800048e:	f000 fa99 	bl	80009c4 <printChar>

		number -= (hundreds * 100);
 8000492:	4b24      	ldr	r3, [pc, #144]	; (8000524 <TIM3_IRQHandler+0x154>)
 8000494:	681a      	ldr	r2, [r3, #0]
 8000496:	4b27      	ldr	r3, [pc, #156]	; (8000534 <TIM3_IRQHandler+0x164>)
 8000498:	681b      	ldr	r3, [r3, #0]
 800049a:	2164      	movs	r1, #100	; 0x64
 800049c:	434b      	muls	r3, r1
 800049e:	1ad2      	subs	r2, r2, r3
 80004a0:	4b20      	ldr	r3, [pc, #128]	; (8000524 <TIM3_IRQHandler+0x154>)
 80004a2:	601a      	str	r2, [r3, #0]
		tens = (number/10);
 80004a4:	4b1f      	ldr	r3, [pc, #124]	; (8000524 <TIM3_IRQHandler+0x154>)
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	210a      	movs	r1, #10
 80004aa:	0018      	movs	r0, r3
 80004ac:	f7ff fe2a 	bl	8000104 <__udivsi3>
 80004b0:	0003      	movs	r3, r0
 80004b2:	001a      	movs	r2, r3
 80004b4:	4b20      	ldr	r3, [pc, #128]	; (8000538 <TIM3_IRQHandler+0x168>)
 80004b6:	601a      	str	r2, [r3, #0]
		printChar(conIntToAlp(tens));
 80004b8:	4b1f      	ldr	r3, [pc, #124]	; (8000538 <TIM3_IRQHandler+0x168>)
 80004ba:	681b      	ldr	r3, [r3, #0]
 80004bc:	b2db      	uxtb	r3, r3
 80004be:	0018      	movs	r0, r3
 80004c0:	f7ff ff44 	bl	800034c <conIntToAlp>
 80004c4:	0003      	movs	r3, r0
 80004c6:	0018      	movs	r0, r3
 80004c8:	f000 fa7c 	bl	80009c4 <printChar>

		number -= (tens * 10);
 80004cc:	4b15      	ldr	r3, [pc, #84]	; (8000524 <TIM3_IRQHandler+0x154>)
 80004ce:	6819      	ldr	r1, [r3, #0]
 80004d0:	4b19      	ldr	r3, [pc, #100]	; (8000538 <TIM3_IRQHandler+0x168>)
 80004d2:	681a      	ldr	r2, [r3, #0]
 80004d4:	0013      	movs	r3, r2
 80004d6:	009b      	lsls	r3, r3, #2
 80004d8:	189b      	adds	r3, r3, r2
 80004da:	005b      	lsls	r3, r3, #1
 80004dc:	1aca      	subs	r2, r1, r3
 80004de:	4b11      	ldr	r3, [pc, #68]	; (8000524 <TIM3_IRQHandler+0x154>)
 80004e0:	601a      	str	r2, [r3, #0]
		printChar(conIntToAlp(number));
 80004e2:	4b10      	ldr	r3, [pc, #64]	; (8000524 <TIM3_IRQHandler+0x154>)
 80004e4:	681b      	ldr	r3, [r3, #0]
 80004e6:	b2db      	uxtb	r3, r3
 80004e8:	0018      	movs	r0, r3
 80004ea:	f7ff ff2f 	bl	800034c <conIntToAlp>
 80004ee:	0003      	movs	r3, r0
 80004f0:	0018      	movs	r0, r3
 80004f2:	f000 fa67 	bl	80009c4 <printChar>
		counter=0;
 80004f6:	4b09      	ldr	r3, [pc, #36]	; (800051c <TIM3_IRQHandler+0x14c>)
 80004f8:	2200      	movs	r2, #0
 80004fa:	601a      	str	r2, [r3, #0]
	}

	TIM3->SR &=  ~(1U<<0);
 80004fc:	4b08      	ldr	r3, [pc, #32]	; (8000520 <TIM3_IRQHandler+0x150>)
 80004fe:	691a      	ldr	r2, [r3, #16]
 8000500:	4b07      	ldr	r3, [pc, #28]	; (8000520 <TIM3_IRQHandler+0x150>)
 8000502:	2101      	movs	r1, #1
 8000504:	438a      	bics	r2, r1
 8000506:	611a      	str	r2, [r3, #16]
	TIM3->SR &=  ~(1U<<1);
 8000508:	4b05      	ldr	r3, [pc, #20]	; (8000520 <TIM3_IRQHandler+0x150>)
 800050a:	691a      	ldr	r2, [r3, #16]
 800050c:	4b04      	ldr	r3, [pc, #16]	; (8000520 <TIM3_IRQHandler+0x150>)
 800050e:	2102      	movs	r1, #2
 8000510:	438a      	bics	r2, r1
 8000512:	611a      	str	r2, [r3, #16]
}
 8000514:	46c0      	nop			; (mov r8, r8)
 8000516:	46bd      	mov	sp, r7
 8000518:	bd80      	pop	{r7, pc}
 800051a:	46c0      	nop			; (mov r8, r8)
 800051c:	20000040 	.word	0x20000040
 8000520:	40000400 	.word	0x40000400
 8000524:	20000038 	.word	0x20000038
 8000528:	00002710 	.word	0x00002710
 800052c:	20000028 	.word	0x20000028
 8000530:	2000002c 	.word	0x2000002c
 8000534:	20000030 	.word	0x20000030
 8000538:	20000034 	.word	0x20000034

0800053c <EXTI0_1_IRQHandler>:

void EXTI0_1_IRQHandler(){
 800053c:	b580      	push	{r7, lr}
 800053e:	af00      	add	r7, sp, #0
	ResetKeypad();
 8000540:	f000 fa7d 	bl	8000a3e <ResetKeypad>

	GPIOA->ODR |=(1<<0);
 8000544:	23a0      	movs	r3, #160	; 0xa0
 8000546:	05db      	lsls	r3, r3, #23
 8000548:	695a      	ldr	r2, [r3, #20]
 800054a:	23a0      	movs	r3, #160	; 0xa0
 800054c:	05db      	lsls	r3, r3, #23
 800054e:	2101      	movs	r1, #1
 8000550:	430a      	orrs	r2, r1
 8000552:	615a      	str	r2, [r3, #20]
	if((GPIOB->IDR>>1)&1){
 8000554:	4b40      	ldr	r3, [pc, #256]	; (8000658 <EXTI0_1_IRQHandler+0x11c>)
 8000556:	691b      	ldr	r3, [r3, #16]
 8000558:	2202      	movs	r2, #2
 800055a:	4013      	ands	r3, r2
 800055c:	d011      	beq.n	8000582 <EXTI0_1_IRQHandler+0x46>
		if(is_ten_digit==1){ // KEYPAD button control for 1 - first column
 800055e:	4b3f      	ldr	r3, [pc, #252]	; (800065c <EXTI0_1_IRQHandler+0x120>)
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	2b01      	cmp	r3, #1
 8000564:	d106      	bne.n	8000574 <EXTI0_1_IRQHandler+0x38>
			ten=1;
 8000566:	4b3e      	ldr	r3, [pc, #248]	; (8000660 <EXTI0_1_IRQHandler+0x124>)
 8000568:	2201      	movs	r2, #1
 800056a:	701a      	strb	r2, [r3, #0]
			is_ten_digit=0;
 800056c:	4b3b      	ldr	r3, [pc, #236]	; (800065c <EXTI0_1_IRQHandler+0x120>)
 800056e:	2200      	movs	r2, #0
 8000570:	601a      	str	r2, [r3, #0]
 8000572:	e066      	b.n	8000642 <EXTI0_1_IRQHandler+0x106>
		}
		else{
			unit=1;
 8000574:	4b3b      	ldr	r3, [pc, #236]	; (8000664 <EXTI0_1_IRQHandler+0x128>)
 8000576:	2201      	movs	r2, #1
 8000578:	701a      	strb	r2, [r3, #0]
			is_ten_digit=1;
 800057a:	4b38      	ldr	r3, [pc, #224]	; (800065c <EXTI0_1_IRQHandler+0x120>)
 800057c:	2201      	movs	r2, #1
 800057e:	601a      	str	r2, [r3, #0]
 8000580:	e05f      	b.n	8000642 <EXTI0_1_IRQHandler+0x106>
		}
	}

	else{ // KEYPAD button control for 4
		GPIOA->ODR &=  ~(1U <<0);
 8000582:	23a0      	movs	r3, #160	; 0xa0
 8000584:	05db      	lsls	r3, r3, #23
 8000586:	695a      	ldr	r2, [r3, #20]
 8000588:	23a0      	movs	r3, #160	; 0xa0
 800058a:	05db      	lsls	r3, r3, #23
 800058c:	2101      	movs	r1, #1
 800058e:	438a      	bics	r2, r1
 8000590:	615a      	str	r2, [r3, #20]
		GPIOA->ODR |=(1<<1);
 8000592:	23a0      	movs	r3, #160	; 0xa0
 8000594:	05db      	lsls	r3, r3, #23
 8000596:	695a      	ldr	r2, [r3, #20]
 8000598:	23a0      	movs	r3, #160	; 0xa0
 800059a:	05db      	lsls	r3, r3, #23
 800059c:	2102      	movs	r1, #2
 800059e:	430a      	orrs	r2, r1
 80005a0:	615a      	str	r2, [r3, #20]
		if((GPIOB->IDR>>1)&1){
 80005a2:	4b2d      	ldr	r3, [pc, #180]	; (8000658 <EXTI0_1_IRQHandler+0x11c>)
 80005a4:	691b      	ldr	r3, [r3, #16]
 80005a6:	2202      	movs	r2, #2
 80005a8:	4013      	ands	r3, r2
 80005aa:	d011      	beq.n	80005d0 <EXTI0_1_IRQHandler+0x94>

			if(is_ten_digit==1){
 80005ac:	4b2b      	ldr	r3, [pc, #172]	; (800065c <EXTI0_1_IRQHandler+0x120>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	2b01      	cmp	r3, #1
 80005b2:	d106      	bne.n	80005c2 <EXTI0_1_IRQHandler+0x86>
				ten=4;
 80005b4:	4b2a      	ldr	r3, [pc, #168]	; (8000660 <EXTI0_1_IRQHandler+0x124>)
 80005b6:	2204      	movs	r2, #4
 80005b8:	701a      	strb	r2, [r3, #0]
				is_ten_digit=0;
 80005ba:	4b28      	ldr	r3, [pc, #160]	; (800065c <EXTI0_1_IRQHandler+0x120>)
 80005bc:	2200      	movs	r2, #0
 80005be:	601a      	str	r2, [r3, #0]
 80005c0:	e03f      	b.n	8000642 <EXTI0_1_IRQHandler+0x106>
			}
			else{
				unit=4;
 80005c2:	4b28      	ldr	r3, [pc, #160]	; (8000664 <EXTI0_1_IRQHandler+0x128>)
 80005c4:	2204      	movs	r2, #4
 80005c6:	701a      	strb	r2, [r3, #0]
				is_ten_digit=1;
 80005c8:	4b24      	ldr	r3, [pc, #144]	; (800065c <EXTI0_1_IRQHandler+0x120>)
 80005ca:	2201      	movs	r2, #1
 80005cc:	601a      	str	r2, [r3, #0]
 80005ce:	e038      	b.n	8000642 <EXTI0_1_IRQHandler+0x106>
			}

		}

		else {	// 	KEYPAD button control for 7
			GPIOA->ODR &=  ~(1U <<1);
 80005d0:	23a0      	movs	r3, #160	; 0xa0
 80005d2:	05db      	lsls	r3, r3, #23
 80005d4:	695a      	ldr	r2, [r3, #20]
 80005d6:	23a0      	movs	r3, #160	; 0xa0
 80005d8:	05db      	lsls	r3, r3, #23
 80005da:	2102      	movs	r1, #2
 80005dc:	438a      	bics	r2, r1
 80005de:	615a      	str	r2, [r3, #20]
			GPIOA->ODR |=(1<<4);
 80005e0:	23a0      	movs	r3, #160	; 0xa0
 80005e2:	05db      	lsls	r3, r3, #23
 80005e4:	695a      	ldr	r2, [r3, #20]
 80005e6:	23a0      	movs	r3, #160	; 0xa0
 80005e8:	05db      	lsls	r3, r3, #23
 80005ea:	2110      	movs	r1, #16
 80005ec:	430a      	orrs	r2, r1
 80005ee:	615a      	str	r2, [r3, #20]
			if((GPIOB->IDR>>1)&1){
 80005f0:	4b19      	ldr	r3, [pc, #100]	; (8000658 <EXTI0_1_IRQHandler+0x11c>)
 80005f2:	691b      	ldr	r3, [r3, #16]
 80005f4:	2202      	movs	r2, #2
 80005f6:	4013      	ands	r3, r2
 80005f8:	d011      	beq.n	800061e <EXTI0_1_IRQHandler+0xe2>
				if(is_ten_digit==1){
 80005fa:	4b18      	ldr	r3, [pc, #96]	; (800065c <EXTI0_1_IRQHandler+0x120>)
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	2b01      	cmp	r3, #1
 8000600:	d106      	bne.n	8000610 <EXTI0_1_IRQHandler+0xd4>
					ten=7;
 8000602:	4b17      	ldr	r3, [pc, #92]	; (8000660 <EXTI0_1_IRQHandler+0x124>)
 8000604:	2207      	movs	r2, #7
 8000606:	701a      	strb	r2, [r3, #0]
					is_ten_digit=0;
 8000608:	4b14      	ldr	r3, [pc, #80]	; (800065c <EXTI0_1_IRQHandler+0x120>)
 800060a:	2200      	movs	r2, #0
 800060c:	601a      	str	r2, [r3, #0]
 800060e:	e018      	b.n	8000642 <EXTI0_1_IRQHandler+0x106>
				}
				else{
					unit=7;
 8000610:	4b14      	ldr	r3, [pc, #80]	; (8000664 <EXTI0_1_IRQHandler+0x128>)
 8000612:	2207      	movs	r2, #7
 8000614:	701a      	strb	r2, [r3, #0]
					is_ten_digit=1;
 8000616:	4b11      	ldr	r3, [pc, #68]	; (800065c <EXTI0_1_IRQHandler+0x120>)
 8000618:	2201      	movs	r2, #1
 800061a:	601a      	str	r2, [r3, #0]
 800061c:	e011      	b.n	8000642 <EXTI0_1_IRQHandler+0x106>
				}
			}

			else{
				GPIOA->ODR &=  ~(1U <<4);
 800061e:	23a0      	movs	r3, #160	; 0xa0
 8000620:	05db      	lsls	r3, r3, #23
 8000622:	695a      	ldr	r2, [r3, #20]
 8000624:	23a0      	movs	r3, #160	; 0xa0
 8000626:	05db      	lsls	r3, r3, #23
 8000628:	2110      	movs	r1, #16
 800062a:	438a      	bics	r2, r1
 800062c:	615a      	str	r2, [r3, #20]
				GPIOA->ODR |=(1<<5);
 800062e:	23a0      	movs	r3, #160	; 0xa0
 8000630:	05db      	lsls	r3, r3, #23
 8000632:	695a      	ldr	r2, [r3, #20]
 8000634:	23a0      	movs	r3, #160	; 0xa0
 8000636:	05db      	lsls	r3, r3, #23
 8000638:	2120      	movs	r1, #32
 800063a:	430a      	orrs	r2, r1
 800063c:	615a      	str	r2, [r3, #20]
				if((GPIOB->IDR>>1)&1){
 800063e:	4b06      	ldr	r3, [pc, #24]	; (8000658 <EXTI0_1_IRQHandler+0x11c>)
 8000640:	691b      	ldr	r3, [r3, #16]
				}
			}
		}
	}

	SetKeypad();
 8000642:	f000 f9d7 	bl	80009f4 <SetKeypad>
	EXTI->RPR1 |=(1<<1);
 8000646:	4b08      	ldr	r3, [pc, #32]	; (8000668 <EXTI0_1_IRQHandler+0x12c>)
 8000648:	68da      	ldr	r2, [r3, #12]
 800064a:	4b07      	ldr	r3, [pc, #28]	; (8000668 <EXTI0_1_IRQHandler+0x12c>)
 800064c:	2102      	movs	r1, #2
 800064e:	430a      	orrs	r2, r1
 8000650:	60da      	str	r2, [r3, #12]
}
 8000652:	46c0      	nop			; (mov r8, r8)
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}
 8000658:	50000400 	.word	0x50000400
 800065c:	20000000 	.word	0x20000000
 8000660:	2000003c 	.word	0x2000003c
 8000664:	2000003d 	.word	0x2000003d
 8000668:	40021800 	.word	0x40021800

0800066c <EXTI4_15_IRQHandler>:

void EXTI4_15_IRQHandler(){
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0
	ResetKeypad();
 8000670:	f000 f9e5 	bl	8000a3e <ResetKeypad>

	GPIOA->ODR |=(1<<0);
 8000674:	23a0      	movs	r3, #160	; 0xa0
 8000676:	05db      	lsls	r3, r3, #23
 8000678:	695a      	ldr	r2, [r3, #20]
 800067a:	23a0      	movs	r3, #160	; 0xa0
 800067c:	05db      	lsls	r3, r3, #23
 800067e:	2101      	movs	r1, #1
 8000680:	430a      	orrs	r2, r1
 8000682:	615a      	str	r2, [r3, #20]
	if((GPIOB->IDR>>4)&1){ // KEYPAD button control for A
 8000684:	4b25      	ldr	r3, [pc, #148]	; (800071c <EXTI4_15_IRQHandler+0xb0>)
 8000686:	691b      	ldr	r3, [r3, #16]
 8000688:	2210      	movs	r2, #16
 800068a:	4013      	ands	r3, r2
 800068c:	d13b      	bne.n	8000706 <EXTI4_15_IRQHandler+0x9a>
	}

	else{
		GPIOA->ODR &=  ~(1U <<0);
 800068e:	23a0      	movs	r3, #160	; 0xa0
 8000690:	05db      	lsls	r3, r3, #23
 8000692:	695a      	ldr	r2, [r3, #20]
 8000694:	23a0      	movs	r3, #160	; 0xa0
 8000696:	05db      	lsls	r3, r3, #23
 8000698:	2101      	movs	r1, #1
 800069a:	438a      	bics	r2, r1
 800069c:	615a      	str	r2, [r3, #20]
		GPIOA->ODR |=(1<<1);
 800069e:	23a0      	movs	r3, #160	; 0xa0
 80006a0:	05db      	lsls	r3, r3, #23
 80006a2:	695a      	ldr	r2, [r3, #20]
 80006a4:	23a0      	movs	r3, #160	; 0xa0
 80006a6:	05db      	lsls	r3, r3, #23
 80006a8:	2102      	movs	r1, #2
 80006aa:	430a      	orrs	r2, r1
 80006ac:	615a      	str	r2, [r3, #20]
		if((GPIOB->IDR>>4)&1){ // KEYPAD button control for B
 80006ae:	4b1b      	ldr	r3, [pc, #108]	; (800071c <EXTI4_15_IRQHandler+0xb0>)
 80006b0:	691b      	ldr	r3, [r3, #16]
 80006b2:	2210      	movs	r2, #16
 80006b4:	4013      	ands	r3, r2
 80006b6:	d126      	bne.n	8000706 <EXTI4_15_IRQHandler+0x9a>
		}
		else {
			GPIOA->ODR &=  ~(1U <<1);
 80006b8:	23a0      	movs	r3, #160	; 0xa0
 80006ba:	05db      	lsls	r3, r3, #23
 80006bc:	695a      	ldr	r2, [r3, #20]
 80006be:	23a0      	movs	r3, #160	; 0xa0
 80006c0:	05db      	lsls	r3, r3, #23
 80006c2:	2102      	movs	r1, #2
 80006c4:	438a      	bics	r2, r1
 80006c6:	615a      	str	r2, [r3, #20]
			GPIOA->ODR |=(1<<4);
 80006c8:	23a0      	movs	r3, #160	; 0xa0
 80006ca:	05db      	lsls	r3, r3, #23
 80006cc:	695a      	ldr	r2, [r3, #20]
 80006ce:	23a0      	movs	r3, #160	; 0xa0
 80006d0:	05db      	lsls	r3, r3, #23
 80006d2:	2110      	movs	r1, #16
 80006d4:	430a      	orrs	r2, r1
 80006d6:	615a      	str	r2, [r3, #20]
			if((GPIOB->IDR>>4)&1){ // KEYPAD button control for C
 80006d8:	4b10      	ldr	r3, [pc, #64]	; (800071c <EXTI4_15_IRQHandler+0xb0>)
 80006da:	691b      	ldr	r3, [r3, #16]
 80006dc:	2210      	movs	r2, #16
 80006de:	4013      	ands	r3, r2
 80006e0:	d111      	bne.n	8000706 <EXTI4_15_IRQHandler+0x9a>
			}
			else{
				GPIOA->ODR &=  ~(1U <<4);
 80006e2:	23a0      	movs	r3, #160	; 0xa0
 80006e4:	05db      	lsls	r3, r3, #23
 80006e6:	695a      	ldr	r2, [r3, #20]
 80006e8:	23a0      	movs	r3, #160	; 0xa0
 80006ea:	05db      	lsls	r3, r3, #23
 80006ec:	2110      	movs	r1, #16
 80006ee:	438a      	bics	r2, r1
 80006f0:	615a      	str	r2, [r3, #20]
				GPIOA->ODR |=(1<<5);
 80006f2:	23a0      	movs	r3, #160	; 0xa0
 80006f4:	05db      	lsls	r3, r3, #23
 80006f6:	695a      	ldr	r2, [r3, #20]
 80006f8:	23a0      	movs	r3, #160	; 0xa0
 80006fa:	05db      	lsls	r3, r3, #23
 80006fc:	2120      	movs	r1, #32
 80006fe:	430a      	orrs	r2, r1
 8000700:	615a      	str	r2, [r3, #20]
				if((GPIOB->IDR>>4)&1){ // KEYPAD button control for D
 8000702:	4b06      	ldr	r3, [pc, #24]	; (800071c <EXTI4_15_IRQHandler+0xb0>)
 8000704:	691b      	ldr	r3, [r3, #16]
				}
			}
		}
	}

	SetKeypad();
 8000706:	f000 f975 	bl	80009f4 <SetKeypad>
	EXTI->RPR1 |=(1<<4);
 800070a:	4b05      	ldr	r3, [pc, #20]	; (8000720 <EXTI4_15_IRQHandler+0xb4>)
 800070c:	68da      	ldr	r2, [r3, #12]
 800070e:	4b04      	ldr	r3, [pc, #16]	; (8000720 <EXTI4_15_IRQHandler+0xb4>)
 8000710:	2110      	movs	r1, #16
 8000712:	430a      	orrs	r2, r1
 8000714:	60da      	str	r2, [r3, #12]
}
 8000716:	46c0      	nop			; (mov r8, r8)
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}
 800071c:	50000400 	.word	0x50000400
 8000720:	40021800 	.word	0x40021800

08000724 <EXTI2_3_IRQHandler>:

void EXTI2_3_IRQHandler(){
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
	ResetKeypad();
 8000728:	f000 f989 	bl	8000a3e <ResetKeypad>
	if((EXTI->RPR1>>2)&1){ // KEYPAD button control for number 2 - 2nd column
 800072c:	4b9f      	ldr	r3, [pc, #636]	; (80009ac <EXTI2_3_IRQHandler+0x288>)
 800072e:	68db      	ldr	r3, [r3, #12]
 8000730:	2204      	movs	r2, #4
 8000732:	4013      	ands	r3, r2
 8000734:	d100      	bne.n	8000738 <EXTI2_3_IRQHandler+0x14>
 8000736:	e099      	b.n	800086c <EXTI2_3_IRQHandler+0x148>
		GPIOA->ODR |=(1<<0);
 8000738:	23a0      	movs	r3, #160	; 0xa0
 800073a:	05db      	lsls	r3, r3, #23
 800073c:	695a      	ldr	r2, [r3, #20]
 800073e:	23a0      	movs	r3, #160	; 0xa0
 8000740:	05db      	lsls	r3, r3, #23
 8000742:	2101      	movs	r1, #1
 8000744:	430a      	orrs	r2, r1
 8000746:	615a      	str	r2, [r3, #20]
		if((GPIOB->IDR>>2)&1){
 8000748:	4b99      	ldr	r3, [pc, #612]	; (80009b0 <EXTI2_3_IRQHandler+0x28c>)
 800074a:	691b      	ldr	r3, [r3, #16]
 800074c:	2204      	movs	r2, #4
 800074e:	4013      	ands	r3, r2
 8000750:	d011      	beq.n	8000776 <EXTI2_3_IRQHandler+0x52>
			if(is_ten_digit==1){
 8000752:	4b98      	ldr	r3, [pc, #608]	; (80009b4 <EXTI2_3_IRQHandler+0x290>)
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	2b01      	cmp	r3, #1
 8000758:	d106      	bne.n	8000768 <EXTI2_3_IRQHandler+0x44>
				ten=2;
 800075a:	4b97      	ldr	r3, [pc, #604]	; (80009b8 <EXTI2_3_IRQHandler+0x294>)
 800075c:	2202      	movs	r2, #2
 800075e:	701a      	strb	r2, [r3, #0]
				is_ten_digit=0;
 8000760:	4b94      	ldr	r3, [pc, #592]	; (80009b4 <EXTI2_3_IRQHandler+0x290>)
 8000762:	2200      	movs	r2, #0
 8000764:	601a      	str	r2, [r3, #0]
 8000766:	e07a      	b.n	800085e <EXTI2_3_IRQHandler+0x13a>
			}
			else{
				unit=2;
 8000768:	4b94      	ldr	r3, [pc, #592]	; (80009bc <EXTI2_3_IRQHandler+0x298>)
 800076a:	2202      	movs	r2, #2
 800076c:	701a      	strb	r2, [r3, #0]
				is_ten_digit=1;
 800076e:	4b91      	ldr	r3, [pc, #580]	; (80009b4 <EXTI2_3_IRQHandler+0x290>)
 8000770:	2201      	movs	r2, #1
 8000772:	601a      	str	r2, [r3, #0]
 8000774:	e073      	b.n	800085e <EXTI2_3_IRQHandler+0x13a>
			}
		}

		else{
			GPIOA->ODR &=  ~(1U <<0);
 8000776:	23a0      	movs	r3, #160	; 0xa0
 8000778:	05db      	lsls	r3, r3, #23
 800077a:	695a      	ldr	r2, [r3, #20]
 800077c:	23a0      	movs	r3, #160	; 0xa0
 800077e:	05db      	lsls	r3, r3, #23
 8000780:	2101      	movs	r1, #1
 8000782:	438a      	bics	r2, r1
 8000784:	615a      	str	r2, [r3, #20]
			GPIOA->ODR |=(1<<1);
 8000786:	23a0      	movs	r3, #160	; 0xa0
 8000788:	05db      	lsls	r3, r3, #23
 800078a:	695a      	ldr	r2, [r3, #20]
 800078c:	23a0      	movs	r3, #160	; 0xa0
 800078e:	05db      	lsls	r3, r3, #23
 8000790:	2102      	movs	r1, #2
 8000792:	430a      	orrs	r2, r1
 8000794:	615a      	str	r2, [r3, #20]
			if((GPIOB->IDR>>2)&1){  // KEYPAD button control for number 5
 8000796:	4b86      	ldr	r3, [pc, #536]	; (80009b0 <EXTI2_3_IRQHandler+0x28c>)
 8000798:	691b      	ldr	r3, [r3, #16]
 800079a:	2204      	movs	r2, #4
 800079c:	4013      	ands	r3, r2
 800079e:	d011      	beq.n	80007c4 <EXTI2_3_IRQHandler+0xa0>
				if(is_ten_digit==1){
 80007a0:	4b84      	ldr	r3, [pc, #528]	; (80009b4 <EXTI2_3_IRQHandler+0x290>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	2b01      	cmp	r3, #1
 80007a6:	d106      	bne.n	80007b6 <EXTI2_3_IRQHandler+0x92>
					ten=5;
 80007a8:	4b83      	ldr	r3, [pc, #524]	; (80009b8 <EXTI2_3_IRQHandler+0x294>)
 80007aa:	2205      	movs	r2, #5
 80007ac:	701a      	strb	r2, [r3, #0]
					is_ten_digit=0;
 80007ae:	4b81      	ldr	r3, [pc, #516]	; (80009b4 <EXTI2_3_IRQHandler+0x290>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	601a      	str	r2, [r3, #0]
 80007b4:	e053      	b.n	800085e <EXTI2_3_IRQHandler+0x13a>
				}
				else{
					unit=5;
 80007b6:	4b81      	ldr	r3, [pc, #516]	; (80009bc <EXTI2_3_IRQHandler+0x298>)
 80007b8:	2205      	movs	r2, #5
 80007ba:	701a      	strb	r2, [r3, #0]
					is_ten_digit=1;
 80007bc:	4b7d      	ldr	r3, [pc, #500]	; (80009b4 <EXTI2_3_IRQHandler+0x290>)
 80007be:	2201      	movs	r2, #1
 80007c0:	601a      	str	r2, [r3, #0]
 80007c2:	e04c      	b.n	800085e <EXTI2_3_IRQHandler+0x13a>
				}
			}

			else {
				GPIOA->ODR &=  ~(1U <<1);
 80007c4:	23a0      	movs	r3, #160	; 0xa0
 80007c6:	05db      	lsls	r3, r3, #23
 80007c8:	695a      	ldr	r2, [r3, #20]
 80007ca:	23a0      	movs	r3, #160	; 0xa0
 80007cc:	05db      	lsls	r3, r3, #23
 80007ce:	2102      	movs	r1, #2
 80007d0:	438a      	bics	r2, r1
 80007d2:	615a      	str	r2, [r3, #20]
				GPIOA->ODR |=(1<<4);
 80007d4:	23a0      	movs	r3, #160	; 0xa0
 80007d6:	05db      	lsls	r3, r3, #23
 80007d8:	695a      	ldr	r2, [r3, #20]
 80007da:	23a0      	movs	r3, #160	; 0xa0
 80007dc:	05db      	lsls	r3, r3, #23
 80007de:	2110      	movs	r1, #16
 80007e0:	430a      	orrs	r2, r1
 80007e2:	615a      	str	r2, [r3, #20]
				if((GPIOB->IDR>>2)&1){ // KEYPAD button control for number 8
 80007e4:	4b72      	ldr	r3, [pc, #456]	; (80009b0 <EXTI2_3_IRQHandler+0x28c>)
 80007e6:	691b      	ldr	r3, [r3, #16]
 80007e8:	2204      	movs	r2, #4
 80007ea:	4013      	ands	r3, r2
 80007ec:	d011      	beq.n	8000812 <EXTI2_3_IRQHandler+0xee>
					if(is_ten_digit==1){
 80007ee:	4b71      	ldr	r3, [pc, #452]	; (80009b4 <EXTI2_3_IRQHandler+0x290>)
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	2b01      	cmp	r3, #1
 80007f4:	d106      	bne.n	8000804 <EXTI2_3_IRQHandler+0xe0>
						ten=8;
 80007f6:	4b70      	ldr	r3, [pc, #448]	; (80009b8 <EXTI2_3_IRQHandler+0x294>)
 80007f8:	2208      	movs	r2, #8
 80007fa:	701a      	strb	r2, [r3, #0]
						is_ten_digit=0;
 80007fc:	4b6d      	ldr	r3, [pc, #436]	; (80009b4 <EXTI2_3_IRQHandler+0x290>)
 80007fe:	2200      	movs	r2, #0
 8000800:	601a      	str	r2, [r3, #0]
 8000802:	e02c      	b.n	800085e <EXTI2_3_IRQHandler+0x13a>
					}
					else{
						unit=8;
 8000804:	4b6d      	ldr	r3, [pc, #436]	; (80009bc <EXTI2_3_IRQHandler+0x298>)
 8000806:	2208      	movs	r2, #8
 8000808:	701a      	strb	r2, [r3, #0]
						is_ten_digit=1;
 800080a:	4b6a      	ldr	r3, [pc, #424]	; (80009b4 <EXTI2_3_IRQHandler+0x290>)
 800080c:	2201      	movs	r2, #1
 800080e:	601a      	str	r2, [r3, #0]
 8000810:	e025      	b.n	800085e <EXTI2_3_IRQHandler+0x13a>
					}
				}

				else{
					GPIOA->ODR &=  ~(1U <<4);
 8000812:	23a0      	movs	r3, #160	; 0xa0
 8000814:	05db      	lsls	r3, r3, #23
 8000816:	695a      	ldr	r2, [r3, #20]
 8000818:	23a0      	movs	r3, #160	; 0xa0
 800081a:	05db      	lsls	r3, r3, #23
 800081c:	2110      	movs	r1, #16
 800081e:	438a      	bics	r2, r1
 8000820:	615a      	str	r2, [r3, #20]
					GPIOA->ODR |=(1<<5);
 8000822:	23a0      	movs	r3, #160	; 0xa0
 8000824:	05db      	lsls	r3, r3, #23
 8000826:	695a      	ldr	r2, [r3, #20]
 8000828:	23a0      	movs	r3, #160	; 0xa0
 800082a:	05db      	lsls	r3, r3, #23
 800082c:	2120      	movs	r1, #32
 800082e:	430a      	orrs	r2, r1
 8000830:	615a      	str	r2, [r3, #20]
					if((GPIOB->IDR>>2)&1){ // 	KEYPAD button control for number 0
 8000832:	4b5f      	ldr	r3, [pc, #380]	; (80009b0 <EXTI2_3_IRQHandler+0x28c>)
 8000834:	691b      	ldr	r3, [r3, #16]
 8000836:	2204      	movs	r2, #4
 8000838:	4013      	ands	r3, r2
 800083a:	d010      	beq.n	800085e <EXTI2_3_IRQHandler+0x13a>
						if(is_ten_digit==1){
 800083c:	4b5d      	ldr	r3, [pc, #372]	; (80009b4 <EXTI2_3_IRQHandler+0x290>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	2b01      	cmp	r3, #1
 8000842:	d106      	bne.n	8000852 <EXTI2_3_IRQHandler+0x12e>
							ten=0;
 8000844:	4b5c      	ldr	r3, [pc, #368]	; (80009b8 <EXTI2_3_IRQHandler+0x294>)
 8000846:	2200      	movs	r2, #0
 8000848:	701a      	strb	r2, [r3, #0]
							is_ten_digit=0;
 800084a:	4b5a      	ldr	r3, [pc, #360]	; (80009b4 <EXTI2_3_IRQHandler+0x290>)
 800084c:	2200      	movs	r2, #0
 800084e:	601a      	str	r2, [r3, #0]
 8000850:	e005      	b.n	800085e <EXTI2_3_IRQHandler+0x13a>
						}
						else{
							unit=0;
 8000852:	4b5a      	ldr	r3, [pc, #360]	; (80009bc <EXTI2_3_IRQHandler+0x298>)
 8000854:	2200      	movs	r2, #0
 8000856:	701a      	strb	r2, [r3, #0]
							is_ten_digit=1;
 8000858:	4b56      	ldr	r3, [pc, #344]	; (80009b4 <EXTI2_3_IRQHandler+0x290>)
 800085a:	2201      	movs	r2, #1
 800085c:	601a      	str	r2, [r3, #0]
					}
				}
			}
		}

		EXTI->RPR1 |=(1<<2);
 800085e:	4b53      	ldr	r3, [pc, #332]	; (80009ac <EXTI2_3_IRQHandler+0x288>)
 8000860:	68da      	ldr	r2, [r3, #12]
 8000862:	4b52      	ldr	r3, [pc, #328]	; (80009ac <EXTI2_3_IRQHandler+0x288>)
 8000864:	2104      	movs	r1, #4
 8000866:	430a      	orrs	r2, r1
 8000868:	60da      	str	r2, [r3, #12]
 800086a:	e099      	b.n	80009a0 <EXTI2_3_IRQHandler+0x27c>
	}
	else{
		GPIOA->ODR |=(1<<0);
 800086c:	23a0      	movs	r3, #160	; 0xa0
 800086e:	05db      	lsls	r3, r3, #23
 8000870:	695a      	ldr	r2, [r3, #20]
 8000872:	23a0      	movs	r3, #160	; 0xa0
 8000874:	05db      	lsls	r3, r3, #23
 8000876:	2101      	movs	r1, #1
 8000878:	430a      	orrs	r2, r1
 800087a:	615a      	str	r2, [r3, #20]
		if((GPIOB->IDR>>3)&1){
 800087c:	4b4c      	ldr	r3, [pc, #304]	; (80009b0 <EXTI2_3_IRQHandler+0x28c>)
 800087e:	691b      	ldr	r3, [r3, #16]
 8000880:	2208      	movs	r2, #8
 8000882:	4013      	ands	r3, r2
 8000884:	d011      	beq.n	80008aa <EXTI2_3_IRQHandler+0x186>
			if(is_ten_digit==1){ // 	KEYPAD button control for 3 - 3rd column
 8000886:	4b4b      	ldr	r3, [pc, #300]	; (80009b4 <EXTI2_3_IRQHandler+0x290>)
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	2b01      	cmp	r3, #1
 800088c:	d106      	bne.n	800089c <EXTI2_3_IRQHandler+0x178>
				ten=3;
 800088e:	4b4a      	ldr	r3, [pc, #296]	; (80009b8 <EXTI2_3_IRQHandler+0x294>)
 8000890:	2203      	movs	r2, #3
 8000892:	701a      	strb	r2, [r3, #0]
				is_ten_digit=0;
 8000894:	4b47      	ldr	r3, [pc, #284]	; (80009b4 <EXTI2_3_IRQHandler+0x290>)
 8000896:	2200      	movs	r2, #0
 8000898:	601a      	str	r2, [r3, #0]
 800089a:	e07b      	b.n	8000994 <EXTI2_3_IRQHandler+0x270>
			}
			else{
				unit=3;
 800089c:	4b47      	ldr	r3, [pc, #284]	; (80009bc <EXTI2_3_IRQHandler+0x298>)
 800089e:	2203      	movs	r2, #3
 80008a0:	701a      	strb	r2, [r3, #0]
				is_ten_digit=1;
 80008a2:	4b44      	ldr	r3, [pc, #272]	; (80009b4 <EXTI2_3_IRQHandler+0x290>)
 80008a4:	2201      	movs	r2, #1
 80008a6:	601a      	str	r2, [r3, #0]
 80008a8:	e074      	b.n	8000994 <EXTI2_3_IRQHandler+0x270>
			}
		}
		else{
			GPIOA->ODR &=  ~(1U <<0);
 80008aa:	23a0      	movs	r3, #160	; 0xa0
 80008ac:	05db      	lsls	r3, r3, #23
 80008ae:	695a      	ldr	r2, [r3, #20]
 80008b0:	23a0      	movs	r3, #160	; 0xa0
 80008b2:	05db      	lsls	r3, r3, #23
 80008b4:	2101      	movs	r1, #1
 80008b6:	438a      	bics	r2, r1
 80008b8:	615a      	str	r2, [r3, #20]
			GPIOA->ODR |=(1<<1);
 80008ba:	23a0      	movs	r3, #160	; 0xa0
 80008bc:	05db      	lsls	r3, r3, #23
 80008be:	695a      	ldr	r2, [r3, #20]
 80008c0:	23a0      	movs	r3, #160	; 0xa0
 80008c2:	05db      	lsls	r3, r3, #23
 80008c4:	2102      	movs	r1, #2
 80008c6:	430a      	orrs	r2, r1
 80008c8:	615a      	str	r2, [r3, #20]
			if((GPIOB->IDR>>3)&1){
 80008ca:	4b39      	ldr	r3, [pc, #228]	; (80009b0 <EXTI2_3_IRQHandler+0x28c>)
 80008cc:	691b      	ldr	r3, [r3, #16]
 80008ce:	2208      	movs	r2, #8
 80008d0:	4013      	ands	r3, r2
 80008d2:	d011      	beq.n	80008f8 <EXTI2_3_IRQHandler+0x1d4>
				if(is_ten_digit==1){ // KEYPAD button control for 6
 80008d4:	4b37      	ldr	r3, [pc, #220]	; (80009b4 <EXTI2_3_IRQHandler+0x290>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	2b01      	cmp	r3, #1
 80008da:	d106      	bne.n	80008ea <EXTI2_3_IRQHandler+0x1c6>
					ten=6;
 80008dc:	4b36      	ldr	r3, [pc, #216]	; (80009b8 <EXTI2_3_IRQHandler+0x294>)
 80008de:	2206      	movs	r2, #6
 80008e0:	701a      	strb	r2, [r3, #0]
					is_ten_digit=0;
 80008e2:	4b34      	ldr	r3, [pc, #208]	; (80009b4 <EXTI2_3_IRQHandler+0x290>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	601a      	str	r2, [r3, #0]
 80008e8:	e054      	b.n	8000994 <EXTI2_3_IRQHandler+0x270>
				}
				else{
					unit=6;
 80008ea:	4b34      	ldr	r3, [pc, #208]	; (80009bc <EXTI2_3_IRQHandler+0x298>)
 80008ec:	2206      	movs	r2, #6
 80008ee:	701a      	strb	r2, [r3, #0]
					is_ten_digit=1;
 80008f0:	4b30      	ldr	r3, [pc, #192]	; (80009b4 <EXTI2_3_IRQHandler+0x290>)
 80008f2:	2201      	movs	r2, #1
 80008f4:	601a      	str	r2, [r3, #0]
 80008f6:	e04d      	b.n	8000994 <EXTI2_3_IRQHandler+0x270>
				}
			}

			else {
				GPIOA->ODR &=  ~(1U <<1);
 80008f8:	23a0      	movs	r3, #160	; 0xa0
 80008fa:	05db      	lsls	r3, r3, #23
 80008fc:	695a      	ldr	r2, [r3, #20]
 80008fe:	23a0      	movs	r3, #160	; 0xa0
 8000900:	05db      	lsls	r3, r3, #23
 8000902:	2102      	movs	r1, #2
 8000904:	438a      	bics	r2, r1
 8000906:	615a      	str	r2, [r3, #20]
				GPIOA->ODR |=(1<<4);
 8000908:	23a0      	movs	r3, #160	; 0xa0
 800090a:	05db      	lsls	r3, r3, #23
 800090c:	695a      	ldr	r2, [r3, #20]
 800090e:	23a0      	movs	r3, #160	; 0xa0
 8000910:	05db      	lsls	r3, r3, #23
 8000912:	2110      	movs	r1, #16
 8000914:	430a      	orrs	r2, r1
 8000916:	615a      	str	r2, [r3, #20]
				if((GPIOB->IDR>>3)&1){ // 	KEYPAD button control for 9
 8000918:	4b25      	ldr	r3, [pc, #148]	; (80009b0 <EXTI2_3_IRQHandler+0x28c>)
 800091a:	691b      	ldr	r3, [r3, #16]
 800091c:	2208      	movs	r2, #8
 800091e:	4013      	ands	r3, r2
 8000920:	d011      	beq.n	8000946 <EXTI2_3_IRQHandler+0x222>
					if(is_ten_digit==1){
 8000922:	4b24      	ldr	r3, [pc, #144]	; (80009b4 <EXTI2_3_IRQHandler+0x290>)
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	2b01      	cmp	r3, #1
 8000928:	d106      	bne.n	8000938 <EXTI2_3_IRQHandler+0x214>
						ten=9;
 800092a:	4b23      	ldr	r3, [pc, #140]	; (80009b8 <EXTI2_3_IRQHandler+0x294>)
 800092c:	2209      	movs	r2, #9
 800092e:	701a      	strb	r2, [r3, #0]
						is_ten_digit=0;
 8000930:	4b20      	ldr	r3, [pc, #128]	; (80009b4 <EXTI2_3_IRQHandler+0x290>)
 8000932:	2200      	movs	r2, #0
 8000934:	601a      	str	r2, [r3, #0]
 8000936:	e02d      	b.n	8000994 <EXTI2_3_IRQHandler+0x270>
					}
					else{
						unit=9;
 8000938:	4b20      	ldr	r3, [pc, #128]	; (80009bc <EXTI2_3_IRQHandler+0x298>)
 800093a:	2209      	movs	r2, #9
 800093c:	701a      	strb	r2, [r3, #0]
						is_ten_digit=1;
 800093e:	4b1d      	ldr	r3, [pc, #116]	; (80009b4 <EXTI2_3_IRQHandler+0x290>)
 8000940:	2201      	movs	r2, #1
 8000942:	601a      	str	r2, [r3, #0]
 8000944:	e026      	b.n	8000994 <EXTI2_3_IRQHandler+0x270>
					}
				}

				else{
					GPIOA->ODR &=  ~(1U <<4);
 8000946:	23a0      	movs	r3, #160	; 0xa0
 8000948:	05db      	lsls	r3, r3, #23
 800094a:	695a      	ldr	r2, [r3, #20]
 800094c:	23a0      	movs	r3, #160	; 0xa0
 800094e:	05db      	lsls	r3, r3, #23
 8000950:	2110      	movs	r1, #16
 8000952:	438a      	bics	r2, r1
 8000954:	615a      	str	r2, [r3, #20]
					GPIOA->ODR |=(1<<5);
 8000956:	23a0      	movs	r3, #160	; 0xa0
 8000958:	05db      	lsls	r3, r3, #23
 800095a:	695a      	ldr	r2, [r3, #20]
 800095c:	23a0      	movs	r3, #160	; 0xa0
 800095e:	05db      	lsls	r3, r3, #23
 8000960:	2120      	movs	r1, #32
 8000962:	430a      	orrs	r2, r1
 8000964:	615a      	str	r2, [r3, #20]
					if((GPIOB->IDR>>3)&1){ // 	KEYPAD button control for #
 8000966:	4b12      	ldr	r3, [pc, #72]	; (80009b0 <EXTI2_3_IRQHandler+0x28c>)
 8000968:	691b      	ldr	r3, [r3, #16]
 800096a:	2208      	movs	r2, #8
 800096c:	4013      	ands	r3, r2
 800096e:	d011      	beq.n	8000994 <EXTI2_3_IRQHandler+0x270>
						TIM3->CCR1=(16000*((ten*10)+unit)/100);
 8000970:	4b11      	ldr	r3, [pc, #68]	; (80009b8 <EXTI2_3_IRQHandler+0x294>)
 8000972:	781b      	ldrb	r3, [r3, #0]
 8000974:	001a      	movs	r2, r3
 8000976:	0013      	movs	r3, r2
 8000978:	009b      	lsls	r3, r3, #2
 800097a:	189b      	adds	r3, r3, r2
 800097c:	005b      	lsls	r3, r3, #1
 800097e:	001a      	movs	r2, r3
 8000980:	4b0e      	ldr	r3, [pc, #56]	; (80009bc <EXTI2_3_IRQHandler+0x298>)
 8000982:	781b      	ldrb	r3, [r3, #0]
 8000984:	18d2      	adds	r2, r2, r3
 8000986:	0013      	movs	r3, r2
 8000988:	009b      	lsls	r3, r3, #2
 800098a:	189b      	adds	r3, r3, r2
 800098c:	015b      	lsls	r3, r3, #5
 800098e:	001a      	movs	r2, r3
 8000990:	4b0b      	ldr	r3, [pc, #44]	; (80009c0 <EXTI2_3_IRQHandler+0x29c>)
 8000992:	635a      	str	r2, [r3, #52]	; 0x34
					}
				}
			}
		}

		EXTI->RPR1 |=(1<<3);
 8000994:	4b05      	ldr	r3, [pc, #20]	; (80009ac <EXTI2_3_IRQHandler+0x288>)
 8000996:	68da      	ldr	r2, [r3, #12]
 8000998:	4b04      	ldr	r3, [pc, #16]	; (80009ac <EXTI2_3_IRQHandler+0x288>)
 800099a:	2108      	movs	r1, #8
 800099c:	430a      	orrs	r2, r1
 800099e:	60da      	str	r2, [r3, #12]
	}

	SetKeypad();// all output set
 80009a0:	f000 f828 	bl	80009f4 <SetKeypad>
}
 80009a4:	46c0      	nop			; (mov r8, r8)
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	46c0      	nop			; (mov r8, r8)
 80009ac:	40021800 	.word	0x40021800
 80009b0:	50000400 	.word	0x50000400
 80009b4:	20000000 	.word	0x20000000
 80009b8:	2000003c 	.word	0x2000003c
 80009bc:	2000003d 	.word	0x2000003d
 80009c0:	40000400 	.word	0x40000400

080009c4 <printChar>:

void printChar(uint8_t b){
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b082      	sub	sp, #8
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	0002      	movs	r2, r0
 80009cc:	1dfb      	adds	r3, r7, #7
 80009ce:	701a      	strb	r2, [r3, #0]
	USART2->TDR =(uint16_t)b;
 80009d0:	4b07      	ldr	r3, [pc, #28]	; (80009f0 <printChar+0x2c>)
 80009d2:	1dfa      	adds	r2, r7, #7
 80009d4:	7812      	ldrb	r2, [r2, #0]
 80009d6:	629a      	str	r2, [r3, #40]	; 0x28
	while(!(USART2->ISR&(1<<6)));
 80009d8:	46c0      	nop			; (mov r8, r8)
 80009da:	4b05      	ldr	r3, [pc, #20]	; (80009f0 <printChar+0x2c>)
 80009dc:	69db      	ldr	r3, [r3, #28]
 80009de:	2240      	movs	r2, #64	; 0x40
 80009e0:	4013      	ands	r3, r2
 80009e2:	d0fa      	beq.n	80009da <printChar+0x16>
}
 80009e4:	46c0      	nop			; (mov r8, r8)
 80009e6:	46c0      	nop			; (mov r8, r8)
 80009e8:	46bd      	mov	sp, r7
 80009ea:	b002      	add	sp, #8
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	46c0      	nop			; (mov r8, r8)
 80009f0:	40004400 	.word	0x40004400

080009f4 <SetKeypad>:

void SetKeypad(void){
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0
	GPIOA->ODR |= (1<<0);  // R1 set
 80009f8:	23a0      	movs	r3, #160	; 0xa0
 80009fa:	05db      	lsls	r3, r3, #23
 80009fc:	695a      	ldr	r2, [r3, #20]
 80009fe:	23a0      	movs	r3, #160	; 0xa0
 8000a00:	05db      	lsls	r3, r3, #23
 8000a02:	2101      	movs	r1, #1
 8000a04:	430a      	orrs	r2, r1
 8000a06:	615a      	str	r2, [r3, #20]
	GPIOA->ODR |= (1<<1);  // R2 set
 8000a08:	23a0      	movs	r3, #160	; 0xa0
 8000a0a:	05db      	lsls	r3, r3, #23
 8000a0c:	695a      	ldr	r2, [r3, #20]
 8000a0e:	23a0      	movs	r3, #160	; 0xa0
 8000a10:	05db      	lsls	r3, r3, #23
 8000a12:	2102      	movs	r1, #2
 8000a14:	430a      	orrs	r2, r1
 8000a16:	615a      	str	r2, [r3, #20]
	GPIOA->ODR |= (1<<4);  // R3 set
 8000a18:	23a0      	movs	r3, #160	; 0xa0
 8000a1a:	05db      	lsls	r3, r3, #23
 8000a1c:	695a      	ldr	r2, [r3, #20]
 8000a1e:	23a0      	movs	r3, #160	; 0xa0
 8000a20:	05db      	lsls	r3, r3, #23
 8000a22:	2110      	movs	r1, #16
 8000a24:	430a      	orrs	r2, r1
 8000a26:	615a      	str	r2, [r3, #20]
	GPIOA->ODR |= (1<<5);  // R4 set
 8000a28:	23a0      	movs	r3, #160	; 0xa0
 8000a2a:	05db      	lsls	r3, r3, #23
 8000a2c:	695a      	ldr	r2, [r3, #20]
 8000a2e:	23a0      	movs	r3, #160	; 0xa0
 8000a30:	05db      	lsls	r3, r3, #23
 8000a32:	2120      	movs	r1, #32
 8000a34:	430a      	orrs	r2, r1
 8000a36:	615a      	str	r2, [r3, #20]

}
 8000a38:	46c0      	nop			; (mov r8, r8)
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}

08000a3e <ResetKeypad>:

void ResetKeypad(void){
 8000a3e:	b580      	push	{r7, lr}
 8000a40:	af00      	add	r7, sp, #0
	GPIOA->ODR &=  ~(1U <<0); // R1 reset
 8000a42:	23a0      	movs	r3, #160	; 0xa0
 8000a44:	05db      	lsls	r3, r3, #23
 8000a46:	695a      	ldr	r2, [r3, #20]
 8000a48:	23a0      	movs	r3, #160	; 0xa0
 8000a4a:	05db      	lsls	r3, r3, #23
 8000a4c:	2101      	movs	r1, #1
 8000a4e:	438a      	bics	r2, r1
 8000a50:	615a      	str	r2, [r3, #20]
	GPIOA->ODR &=  ~(1U <<1); // R2 reset
 8000a52:	23a0      	movs	r3, #160	; 0xa0
 8000a54:	05db      	lsls	r3, r3, #23
 8000a56:	695a      	ldr	r2, [r3, #20]
 8000a58:	23a0      	movs	r3, #160	; 0xa0
 8000a5a:	05db      	lsls	r3, r3, #23
 8000a5c:	2102      	movs	r1, #2
 8000a5e:	438a      	bics	r2, r1
 8000a60:	615a      	str	r2, [r3, #20]
	GPIOA->ODR &=  ~(1U <<4); // R3 reset
 8000a62:	23a0      	movs	r3, #160	; 0xa0
 8000a64:	05db      	lsls	r3, r3, #23
 8000a66:	695a      	ldr	r2, [r3, #20]
 8000a68:	23a0      	movs	r3, #160	; 0xa0
 8000a6a:	05db      	lsls	r3, r3, #23
 8000a6c:	2110      	movs	r1, #16
 8000a6e:	438a      	bics	r2, r1
 8000a70:	615a      	str	r2, [r3, #20]
	GPIOA->ODR &=  ~(1U <<5);  // R4 reset
 8000a72:	23a0      	movs	r3, #160	; 0xa0
 8000a74:	05db      	lsls	r3, r3, #23
 8000a76:	695a      	ldr	r2, [r3, #20]
 8000a78:	23a0      	movs	r3, #160	; 0xa0
 8000a7a:	05db      	lsls	r3, r3, #23
 8000a7c:	2120      	movs	r1, #32
 8000a7e:	438a      	bics	r2, r1
 8000a80:	615a      	str	r2, [r3, #20]
}
 8000a82:	46c0      	nop			; (mov r8, r8)
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}

08000a88 <delay>:

void delay(volatile uint32_t time){
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b082      	sub	sp, #8
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
    for(; time>0; time--);
 8000a90:	e002      	b.n	8000a98 <delay+0x10>
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	3b01      	subs	r3, #1
 8000a96:	607b      	str	r3, [r7, #4]
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d1f9      	bne.n	8000a92 <delay+0xa>
}
 8000a9e:	46c0      	nop			; (mov r8, r8)
 8000aa0:	46c0      	nop			; (mov r8, r8)
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	b002      	add	sp, #8
 8000aa6:	bd80      	pop	{r7, pc}

08000aa8 <keypad_Config>:

void keypad_Config(void){
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0

	 GPIOA->MODER &=  ~(3U<<2*0); // PA0 as output  R1
 8000aac:	23a0      	movs	r3, #160	; 0xa0
 8000aae:	05db      	lsls	r3, r3, #23
 8000ab0:	681a      	ldr	r2, [r3, #0]
 8000ab2:	23a0      	movs	r3, #160	; 0xa0
 8000ab4:	05db      	lsls	r3, r3, #23
 8000ab6:	2103      	movs	r1, #3
 8000ab8:	438a      	bics	r2, r1
 8000aba:	601a      	str	r2, [r3, #0]
	 GPIOA->MODER |=  (1U<<0);
 8000abc:	23a0      	movs	r3, #160	; 0xa0
 8000abe:	05db      	lsls	r3, r3, #23
 8000ac0:	681a      	ldr	r2, [r3, #0]
 8000ac2:	23a0      	movs	r3, #160	; 0xa0
 8000ac4:	05db      	lsls	r3, r3, #23
 8000ac6:	2101      	movs	r1, #1
 8000ac8:	430a      	orrs	r2, r1
 8000aca:	601a      	str	r2, [r3, #0]

	 GPIOA->MODER &=  ~(3U <<2*1); // PA1  as output R2
 8000acc:	23a0      	movs	r3, #160	; 0xa0
 8000ace:	05db      	lsls	r3, r3, #23
 8000ad0:	681a      	ldr	r2, [r3, #0]
 8000ad2:	23a0      	movs	r3, #160	; 0xa0
 8000ad4:	05db      	lsls	r3, r3, #23
 8000ad6:	210c      	movs	r1, #12
 8000ad8:	438a      	bics	r2, r1
 8000ada:	601a      	str	r2, [r3, #0]
	 GPIOA->MODER |=  (1 << 2);
 8000adc:	23a0      	movs	r3, #160	; 0xa0
 8000ade:	05db      	lsls	r3, r3, #23
 8000ae0:	681a      	ldr	r2, [r3, #0]
 8000ae2:	23a0      	movs	r3, #160	; 0xa0
 8000ae4:	05db      	lsls	r3, r3, #23
 8000ae6:	2104      	movs	r1, #4
 8000ae8:	430a      	orrs	r2, r1
 8000aea:	601a      	str	r2, [r3, #0]

	 GPIOA->MODER &=  ~(3U <<2*4); // PA4  as output R3
 8000aec:	23a0      	movs	r3, #160	; 0xa0
 8000aee:	05db      	lsls	r3, r3, #23
 8000af0:	681a      	ldr	r2, [r3, #0]
 8000af2:	23a0      	movs	r3, #160	; 0xa0
 8000af4:	05db      	lsls	r3, r3, #23
 8000af6:	495c      	ldr	r1, [pc, #368]	; (8000c68 <keypad_Config+0x1c0>)
 8000af8:	400a      	ands	r2, r1
 8000afa:	601a      	str	r2, [r3, #0]
	 GPIOA->MODER |=  (1 << 8);
 8000afc:	23a0      	movs	r3, #160	; 0xa0
 8000afe:	05db      	lsls	r3, r3, #23
 8000b00:	681a      	ldr	r2, [r3, #0]
 8000b02:	23a0      	movs	r3, #160	; 0xa0
 8000b04:	05db      	lsls	r3, r3, #23
 8000b06:	2180      	movs	r1, #128	; 0x80
 8000b08:	0049      	lsls	r1, r1, #1
 8000b0a:	430a      	orrs	r2, r1
 8000b0c:	601a      	str	r2, [r3, #0]

	 GPIOA->MODER &=  ~(3U <<2*5); //PA5  as output R4
 8000b0e:	23a0      	movs	r3, #160	; 0xa0
 8000b10:	05db      	lsls	r3, r3, #23
 8000b12:	681a      	ldr	r2, [r3, #0]
 8000b14:	23a0      	movs	r3, #160	; 0xa0
 8000b16:	05db      	lsls	r3, r3, #23
 8000b18:	4954      	ldr	r1, [pc, #336]	; (8000c6c <keypad_Config+0x1c4>)
 8000b1a:	400a      	ands	r2, r1
 8000b1c:	601a      	str	r2, [r3, #0]
	 GPIOA->MODER |=  (1 << 10);
 8000b1e:	23a0      	movs	r3, #160	; 0xa0
 8000b20:	05db      	lsls	r3, r3, #23
 8000b22:	681a      	ldr	r2, [r3, #0]
 8000b24:	23a0      	movs	r3, #160	; 0xa0
 8000b26:	05db      	lsls	r3, r3, #23
 8000b28:	2180      	movs	r1, #128	; 0x80
 8000b2a:	00c9      	lsls	r1, r1, #3
 8000b2c:	430a      	orrs	r2, r1
 8000b2e:	601a      	str	r2, [r3, #0]

	 GPIOB->MODER &= ~(3U << 2*1); // PB1 as input C1
 8000b30:	4b4f      	ldr	r3, [pc, #316]	; (8000c70 <keypad_Config+0x1c8>)
 8000b32:	681a      	ldr	r2, [r3, #0]
 8000b34:	4b4e      	ldr	r3, [pc, #312]	; (8000c70 <keypad_Config+0x1c8>)
 8000b36:	210c      	movs	r1, #12
 8000b38:	438a      	bics	r2, r1
 8000b3a:	601a      	str	r2, [r3, #0]
	 GPIOB->PUPDR |= (2U << 2*1);
 8000b3c:	4b4c      	ldr	r3, [pc, #304]	; (8000c70 <keypad_Config+0x1c8>)
 8000b3e:	68da      	ldr	r2, [r3, #12]
 8000b40:	4b4b      	ldr	r3, [pc, #300]	; (8000c70 <keypad_Config+0x1c8>)
 8000b42:	2108      	movs	r1, #8
 8000b44:	430a      	orrs	r2, r1
 8000b46:	60da      	str	r2, [r3, #12]

	 GPIOB->MODER &= ~(3U << 2*2); // PB2 as input C2
 8000b48:	4b49      	ldr	r3, [pc, #292]	; (8000c70 <keypad_Config+0x1c8>)
 8000b4a:	681a      	ldr	r2, [r3, #0]
 8000b4c:	4b48      	ldr	r3, [pc, #288]	; (8000c70 <keypad_Config+0x1c8>)
 8000b4e:	2130      	movs	r1, #48	; 0x30
 8000b50:	438a      	bics	r2, r1
 8000b52:	601a      	str	r2, [r3, #0]
	 GPIOB->PUPDR |= (2U << 2*2);
 8000b54:	4b46      	ldr	r3, [pc, #280]	; (8000c70 <keypad_Config+0x1c8>)
 8000b56:	68da      	ldr	r2, [r3, #12]
 8000b58:	4b45      	ldr	r3, [pc, #276]	; (8000c70 <keypad_Config+0x1c8>)
 8000b5a:	2120      	movs	r1, #32
 8000b5c:	430a      	orrs	r2, r1
 8000b5e:	60da      	str	r2, [r3, #12]

	 GPIOB->MODER &= ~(3U << 2*3); // PB3 as input C3
 8000b60:	4b43      	ldr	r3, [pc, #268]	; (8000c70 <keypad_Config+0x1c8>)
 8000b62:	681a      	ldr	r2, [r3, #0]
 8000b64:	4b42      	ldr	r3, [pc, #264]	; (8000c70 <keypad_Config+0x1c8>)
 8000b66:	21c0      	movs	r1, #192	; 0xc0
 8000b68:	438a      	bics	r2, r1
 8000b6a:	601a      	str	r2, [r3, #0]
	 GPIOB->PUPDR |= (2U << 2*3);
 8000b6c:	4b40      	ldr	r3, [pc, #256]	; (8000c70 <keypad_Config+0x1c8>)
 8000b6e:	68da      	ldr	r2, [r3, #12]
 8000b70:	4b3f      	ldr	r3, [pc, #252]	; (8000c70 <keypad_Config+0x1c8>)
 8000b72:	2180      	movs	r1, #128	; 0x80
 8000b74:	430a      	orrs	r2, r1
 8000b76:	60da      	str	r2, [r3, #12]

	 GPIOB->MODER &= ~(3U << 2*4); // PB4
 8000b78:	4b3d      	ldr	r3, [pc, #244]	; (8000c70 <keypad_Config+0x1c8>)
 8000b7a:	681a      	ldr	r2, [r3, #0]
 8000b7c:	4b3c      	ldr	r3, [pc, #240]	; (8000c70 <keypad_Config+0x1c8>)
 8000b7e:	493a      	ldr	r1, [pc, #232]	; (8000c68 <keypad_Config+0x1c0>)
 8000b80:	400a      	ands	r2, r1
 8000b82:	601a      	str	r2, [r3, #0]
	 GPIOB->PUPDR |= (2U << 2*4);
 8000b84:	4b3a      	ldr	r3, [pc, #232]	; (8000c70 <keypad_Config+0x1c8>)
 8000b86:	68da      	ldr	r2, [r3, #12]
 8000b88:	4b39      	ldr	r3, [pc, #228]	; (8000c70 <keypad_Config+0x1c8>)
 8000b8a:	2180      	movs	r1, #128	; 0x80
 8000b8c:	0089      	lsls	r1, r1, #2
 8000b8e:	430a      	orrs	r2, r1
 8000b90:	60da      	str	r2, [r3, #12]

	 EXTI->RTSR1 |=(1U<<1); // PB1 as interrupt
 8000b92:	4b38      	ldr	r3, [pc, #224]	; (8000c74 <keypad_Config+0x1cc>)
 8000b94:	681a      	ldr	r2, [r3, #0]
 8000b96:	4b37      	ldr	r3, [pc, #220]	; (8000c74 <keypad_Config+0x1cc>)
 8000b98:	2102      	movs	r1, #2
 8000b9a:	430a      	orrs	r2, r1
 8000b9c:	601a      	str	r2, [r3, #0]
	 EXTI->EXTICR[0] |= (1U<<8*1);
 8000b9e:	4b35      	ldr	r3, [pc, #212]	; (8000c74 <keypad_Config+0x1cc>)
 8000ba0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000ba2:	4b34      	ldr	r3, [pc, #208]	; (8000c74 <keypad_Config+0x1cc>)
 8000ba4:	2180      	movs	r1, #128	; 0x80
 8000ba6:	0049      	lsls	r1, r1, #1
 8000ba8:	430a      	orrs	r2, r1
 8000baa:	661a      	str	r2, [r3, #96]	; 0x60
	 EXTI->IMR1 |=(1<<1);
 8000bac:	4a31      	ldr	r2, [pc, #196]	; (8000c74 <keypad_Config+0x1cc>)
 8000bae:	2380      	movs	r3, #128	; 0x80
 8000bb0:	58d3      	ldr	r3, [r2, r3]
 8000bb2:	4930      	ldr	r1, [pc, #192]	; (8000c74 <keypad_Config+0x1cc>)
 8000bb4:	2202      	movs	r2, #2
 8000bb6:	4313      	orrs	r3, r2
 8000bb8:	2280      	movs	r2, #128	; 0x80
 8000bba:	508b      	str	r3, [r1, r2]
	 NVIC_SetPriority(EXTI0_1_IRQn,1);
 8000bbc:	2101      	movs	r1, #1
 8000bbe:	2005      	movs	r0, #5
 8000bc0:	f7ff fb46 	bl	8000250 <__NVIC_SetPriority>
	 NVIC_EnableIRQ(EXTI0_1_IRQn);
 8000bc4:	2005      	movs	r0, #5
 8000bc6:	f7ff fb29 	bl	800021c <__NVIC_EnableIRQ>

	 EXTI->RTSR1 |=(1U<<2); // PB2 as interrupt
 8000bca:	4b2a      	ldr	r3, [pc, #168]	; (8000c74 <keypad_Config+0x1cc>)
 8000bcc:	681a      	ldr	r2, [r3, #0]
 8000bce:	4b29      	ldr	r3, [pc, #164]	; (8000c74 <keypad_Config+0x1cc>)
 8000bd0:	2104      	movs	r1, #4
 8000bd2:	430a      	orrs	r2, r1
 8000bd4:	601a      	str	r2, [r3, #0]
	 EXTI->EXTICR[0] |= (1U<<8*2);
 8000bd6:	4b27      	ldr	r3, [pc, #156]	; (8000c74 <keypad_Config+0x1cc>)
 8000bd8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000bda:	4b26      	ldr	r3, [pc, #152]	; (8000c74 <keypad_Config+0x1cc>)
 8000bdc:	2180      	movs	r1, #128	; 0x80
 8000bde:	0249      	lsls	r1, r1, #9
 8000be0:	430a      	orrs	r2, r1
 8000be2:	661a      	str	r2, [r3, #96]	; 0x60
	 EXTI->IMR1 |=(1<<2);
 8000be4:	4a23      	ldr	r2, [pc, #140]	; (8000c74 <keypad_Config+0x1cc>)
 8000be6:	2380      	movs	r3, #128	; 0x80
 8000be8:	58d3      	ldr	r3, [r2, r3]
 8000bea:	4922      	ldr	r1, [pc, #136]	; (8000c74 <keypad_Config+0x1cc>)
 8000bec:	2204      	movs	r2, #4
 8000bee:	4313      	orrs	r3, r2
 8000bf0:	2280      	movs	r2, #128	; 0x80
 8000bf2:	508b      	str	r3, [r1, r2]

	 EXTI->RTSR1 |=(1U<<3);// PB3 as interrupt
 8000bf4:	4b1f      	ldr	r3, [pc, #124]	; (8000c74 <keypad_Config+0x1cc>)
 8000bf6:	681a      	ldr	r2, [r3, #0]
 8000bf8:	4b1e      	ldr	r3, [pc, #120]	; (8000c74 <keypad_Config+0x1cc>)
 8000bfa:	2108      	movs	r1, #8
 8000bfc:	430a      	orrs	r2, r1
 8000bfe:	601a      	str	r2, [r3, #0]
	 EXTI->EXTICR[0] |= (1U<<8*3);
 8000c00:	4b1c      	ldr	r3, [pc, #112]	; (8000c74 <keypad_Config+0x1cc>)
 8000c02:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000c04:	4b1b      	ldr	r3, [pc, #108]	; (8000c74 <keypad_Config+0x1cc>)
 8000c06:	2180      	movs	r1, #128	; 0x80
 8000c08:	0449      	lsls	r1, r1, #17
 8000c0a:	430a      	orrs	r2, r1
 8000c0c:	661a      	str	r2, [r3, #96]	; 0x60
	 EXTI->IMR1 |=(1<<3);
 8000c0e:	4a19      	ldr	r2, [pc, #100]	; (8000c74 <keypad_Config+0x1cc>)
 8000c10:	2380      	movs	r3, #128	; 0x80
 8000c12:	58d3      	ldr	r3, [r2, r3]
 8000c14:	4917      	ldr	r1, [pc, #92]	; (8000c74 <keypad_Config+0x1cc>)
 8000c16:	2208      	movs	r2, #8
 8000c18:	4313      	orrs	r3, r2
 8000c1a:	2280      	movs	r2, #128	; 0x80
 8000c1c:	508b      	str	r3, [r1, r2]
	 NVIC_SetPriority(EXTI2_3_IRQn,0);
 8000c1e:	2100      	movs	r1, #0
 8000c20:	2006      	movs	r0, #6
 8000c22:	f7ff fb15 	bl	8000250 <__NVIC_SetPriority>
	 NVIC_EnableIRQ(EXTI2_3_IRQn);
 8000c26:	2006      	movs	r0, #6
 8000c28:	f7ff faf8 	bl	800021c <__NVIC_EnableIRQ>

	 EXTI->RTSR1 |=(1U<<4);		// PB4 as interrupt
 8000c2c:	4b11      	ldr	r3, [pc, #68]	; (8000c74 <keypad_Config+0x1cc>)
 8000c2e:	681a      	ldr	r2, [r3, #0]
 8000c30:	4b10      	ldr	r3, [pc, #64]	; (8000c74 <keypad_Config+0x1cc>)
 8000c32:	2110      	movs	r1, #16
 8000c34:	430a      	orrs	r2, r1
 8000c36:	601a      	str	r2, [r3, #0]
	 EXTI->EXTICR[1] |= (1U<<8*0);
 8000c38:	4b0e      	ldr	r3, [pc, #56]	; (8000c74 <keypad_Config+0x1cc>)
 8000c3a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8000c3c:	4b0d      	ldr	r3, [pc, #52]	; (8000c74 <keypad_Config+0x1cc>)
 8000c3e:	2101      	movs	r1, #1
 8000c40:	430a      	orrs	r2, r1
 8000c42:	665a      	str	r2, [r3, #100]	; 0x64
	 EXTI->IMR1 |=(1<<4);
 8000c44:	4a0b      	ldr	r2, [pc, #44]	; (8000c74 <keypad_Config+0x1cc>)
 8000c46:	2380      	movs	r3, #128	; 0x80
 8000c48:	58d3      	ldr	r3, [r2, r3]
 8000c4a:	490a      	ldr	r1, [pc, #40]	; (8000c74 <keypad_Config+0x1cc>)
 8000c4c:	2210      	movs	r2, #16
 8000c4e:	4313      	orrs	r3, r2
 8000c50:	2280      	movs	r2, #128	; 0x80
 8000c52:	508b      	str	r3, [r1, r2]
	 NVIC_SetPriority(EXTI4_15_IRQn,2);
 8000c54:	2102      	movs	r1, #2
 8000c56:	2007      	movs	r0, #7
 8000c58:	f7ff fafa 	bl	8000250 <__NVIC_SetPriority>
	 NVIC_EnableIRQ(EXTI4_15_IRQn);
 8000c5c:	2007      	movs	r0, #7
 8000c5e:	f7ff fadd 	bl	800021c <__NVIC_EnableIRQ>
}
 8000c62:	46c0      	nop			; (mov r8, r8)
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}
 8000c68:	fffffcff 	.word	0xfffffcff
 8000c6c:	fffff3ff 	.word	0xfffff3ff
 8000c70:	50000400 	.word	0x50000400
 8000c74:	40021800 	.word	0x40021800

08000c78 <USART2_Config>:

void USART2_Config(uint32_t bdr){
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b082      	sub	sp, #8
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
	// enable GPIOA
	RCC->IOPENR |= (1U << 0);
 8000c80:	4b3b      	ldr	r3, [pc, #236]	; (8000d70 <USART2_Config+0xf8>)
 8000c82:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000c84:	4b3a      	ldr	r3, [pc, #232]	; (8000d70 <USART2_Config+0xf8>)
 8000c86:	2101      	movs	r1, #1
 8000c88:	430a      	orrs	r2, r1
 8000c8a:	635a      	str	r2, [r3, #52]	; 0x34
	RCC->APBENR1 |= (1U << 17);
 8000c8c:	4b38      	ldr	r3, [pc, #224]	; (8000d70 <USART2_Config+0xf8>)
 8000c8e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000c90:	4b37      	ldr	r3, [pc, #220]	; (8000d70 <USART2_Config+0xf8>)
 8000c92:	2180      	movs	r1, #128	; 0x80
 8000c94:	0289      	lsls	r1, r1, #10
 8000c96:	430a      	orrs	r2, r1
 8000c98:	63da      	str	r2, [r3, #60]	; 0x3c

	GPIOA-> MODER &= ~(3U << 2*2);
 8000c9a:	23a0      	movs	r3, #160	; 0xa0
 8000c9c:	05db      	lsls	r3, r3, #23
 8000c9e:	681a      	ldr	r2, [r3, #0]
 8000ca0:	23a0      	movs	r3, #160	; 0xa0
 8000ca2:	05db      	lsls	r3, r3, #23
 8000ca4:	2130      	movs	r1, #48	; 0x30
 8000ca6:	438a      	bics	r2, r1
 8000ca8:	601a      	str	r2, [r3, #0]
	GPIOA-> MODER |=  (2U << 2*2);
 8000caa:	23a0      	movs	r3, #160	; 0xa0
 8000cac:	05db      	lsls	r3, r3, #23
 8000cae:	681a      	ldr	r2, [r3, #0]
 8000cb0:	23a0      	movs	r3, #160	; 0xa0
 8000cb2:	05db      	lsls	r3, r3, #23
 8000cb4:	2120      	movs	r1, #32
 8000cb6:	430a      	orrs	r2, r1
 8000cb8:	601a      	str	r2, [r3, #0]

	GPIOA-> AFR[0] &= ~(0xFU << 4*2);
 8000cba:	23a0      	movs	r3, #160	; 0xa0
 8000cbc:	05db      	lsls	r3, r3, #23
 8000cbe:	6a1a      	ldr	r2, [r3, #32]
 8000cc0:	23a0      	movs	r3, #160	; 0xa0
 8000cc2:	05db      	lsls	r3, r3, #23
 8000cc4:	492b      	ldr	r1, [pc, #172]	; (8000d74 <USART2_Config+0xfc>)
 8000cc6:	400a      	ands	r2, r1
 8000cc8:	621a      	str	r2, [r3, #32]
	GPIOA-> AFR[0] |=  (1U << 4*2);
 8000cca:	23a0      	movs	r3, #160	; 0xa0
 8000ccc:	05db      	lsls	r3, r3, #23
 8000cce:	6a1a      	ldr	r2, [r3, #32]
 8000cd0:	23a0      	movs	r3, #160	; 0xa0
 8000cd2:	05db      	lsls	r3, r3, #23
 8000cd4:	2180      	movs	r1, #128	; 0x80
 8000cd6:	0049      	lsls	r1, r1, #1
 8000cd8:	430a      	orrs	r2, r1
 8000cda:	621a      	str	r2, [r3, #32]

	GPIOA-> MODER &= ~(3U << 2*3);
 8000cdc:	23a0      	movs	r3, #160	; 0xa0
 8000cde:	05db      	lsls	r3, r3, #23
 8000ce0:	681a      	ldr	r2, [r3, #0]
 8000ce2:	23a0      	movs	r3, #160	; 0xa0
 8000ce4:	05db      	lsls	r3, r3, #23
 8000ce6:	21c0      	movs	r1, #192	; 0xc0
 8000ce8:	438a      	bics	r2, r1
 8000cea:	601a      	str	r2, [r3, #0]
	GPIOA-> MODER |=  (2U << 2*3);
 8000cec:	23a0      	movs	r3, #160	; 0xa0
 8000cee:	05db      	lsls	r3, r3, #23
 8000cf0:	681a      	ldr	r2, [r3, #0]
 8000cf2:	23a0      	movs	r3, #160	; 0xa0
 8000cf4:	05db      	lsls	r3, r3, #23
 8000cf6:	2180      	movs	r1, #128	; 0x80
 8000cf8:	430a      	orrs	r2, r1
 8000cfa:	601a      	str	r2, [r3, #0]

	GPIOA-> AFR[0] &= ~(0xFU << 4*3);
 8000cfc:	23a0      	movs	r3, #160	; 0xa0
 8000cfe:	05db      	lsls	r3, r3, #23
 8000d00:	6a1a      	ldr	r2, [r3, #32]
 8000d02:	23a0      	movs	r3, #160	; 0xa0
 8000d04:	05db      	lsls	r3, r3, #23
 8000d06:	491c      	ldr	r1, [pc, #112]	; (8000d78 <USART2_Config+0x100>)
 8000d08:	400a      	ands	r2, r1
 8000d0a:	621a      	str	r2, [r3, #32]
	GPIOA-> AFR[0] |=  (1U << 4*3);
 8000d0c:	23a0      	movs	r3, #160	; 0xa0
 8000d0e:	05db      	lsls	r3, r3, #23
 8000d10:	6a1a      	ldr	r2, [r3, #32]
 8000d12:	23a0      	movs	r3, #160	; 0xa0
 8000d14:	05db      	lsls	r3, r3, #23
 8000d16:	2180      	movs	r1, #128	; 0x80
 8000d18:	0149      	lsls	r1, r1, #5
 8000d1a:	430a      	orrs	r2, r1
 8000d1c:	621a      	str	r2, [r3, #32]

	USART2 -> CR1 = 0;
 8000d1e:	4b17      	ldr	r3, [pc, #92]	; (8000d7c <USART2_Config+0x104>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	601a      	str	r2, [r3, #0]
	USART2 -> CR1 |= (1U << 3); // Transmitter
 8000d24:	4b15      	ldr	r3, [pc, #84]	; (8000d7c <USART2_Config+0x104>)
 8000d26:	681a      	ldr	r2, [r3, #0]
 8000d28:	4b14      	ldr	r3, [pc, #80]	; (8000d7c <USART2_Config+0x104>)
 8000d2a:	2108      	movs	r1, #8
 8000d2c:	430a      	orrs	r2, r1
 8000d2e:	601a      	str	r2, [r3, #0]
	USART2 -> CR1 |= (1U << 2); // Receiver
 8000d30:	4b12      	ldr	r3, [pc, #72]	; (8000d7c <USART2_Config+0x104>)
 8000d32:	681a      	ldr	r2, [r3, #0]
 8000d34:	4b11      	ldr	r3, [pc, #68]	; (8000d7c <USART2_Config+0x104>)
 8000d36:	2104      	movs	r1, #4
 8000d38:	430a      	orrs	r2, r1
 8000d3a:	601a      	str	r2, [r3, #0]

	USART2 -> CR1 |= (1U << 5);
 8000d3c:	4b0f      	ldr	r3, [pc, #60]	; (8000d7c <USART2_Config+0x104>)
 8000d3e:	681a      	ldr	r2, [r3, #0]
 8000d40:	4b0e      	ldr	r3, [pc, #56]	; (8000d7c <USART2_Config+0x104>)
 8000d42:	2120      	movs	r1, #32
 8000d44:	430a      	orrs	r2, r1
 8000d46:	601a      	str	r2, [r3, #0]

	USART2 -> BRR = (uint16_t)(SystemCoreClock / bdr);
 8000d48:	4b0d      	ldr	r3, [pc, #52]	; (8000d80 <USART2_Config+0x108>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	6879      	ldr	r1, [r7, #4]
 8000d4e:	0018      	movs	r0, r3
 8000d50:	f7ff f9d8 	bl	8000104 <__udivsi3>
 8000d54:	0003      	movs	r3, r0
 8000d56:	b29a      	uxth	r2, r3
 8000d58:	4b08      	ldr	r3, [pc, #32]	; (8000d7c <USART2_Config+0x104>)
 8000d5a:	60da      	str	r2, [r3, #12]

	USART2 -> CR1 |= (1U << 0); // Usart Enable
 8000d5c:	4b07      	ldr	r3, [pc, #28]	; (8000d7c <USART2_Config+0x104>)
 8000d5e:	681a      	ldr	r2, [r3, #0]
 8000d60:	4b06      	ldr	r3, [pc, #24]	; (8000d7c <USART2_Config+0x104>)
 8000d62:	2101      	movs	r1, #1
 8000d64:	430a      	orrs	r2, r1
 8000d66:	601a      	str	r2, [r3, #0]

}
 8000d68:	46c0      	nop			; (mov r8, r8)
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	b002      	add	sp, #8
 8000d6e:	bd80      	pop	{r7, pc}
 8000d70:	40021000 	.word	0x40021000
 8000d74:	fffff0ff 	.word	0xfffff0ff
 8000d78:	ffff0fff 	.word	0xffff0fff
 8000d7c:	40004400 	.word	0x40004400
 8000d80:	20000004 	.word	0x20000004

08000d84 <TIM3_Config>:

void TIM3_Config(void){
 8000d84:	b580      	push	{r7, lr}
 8000d86:	af00      	add	r7, sp, #0
	/* Enable GPIOB and GPIOA clock */
	RCC->IOPENR |= (3U << 0);
 8000d88:	4b41      	ldr	r3, [pc, #260]	; (8000e90 <TIM3_Config+0x10c>)
 8000d8a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000d8c:	4b40      	ldr	r3, [pc, #256]	; (8000e90 <TIM3_Config+0x10c>)
 8000d8e:	2103      	movs	r1, #3
 8000d90:	430a      	orrs	r2, r1
 8000d92:	635a      	str	r2, [r3, #52]	; 0x34

	/* Setup PA6 as alternate function */
	GPIOA->MODER &= ~(3U << 2*6);
 8000d94:	23a0      	movs	r3, #160	; 0xa0
 8000d96:	05db      	lsls	r3, r3, #23
 8000d98:	681a      	ldr	r2, [r3, #0]
 8000d9a:	23a0      	movs	r3, #160	; 0xa0
 8000d9c:	05db      	lsls	r3, r3, #23
 8000d9e:	493d      	ldr	r1, [pc, #244]	; (8000e94 <TIM3_Config+0x110>)
 8000da0:	400a      	ands	r2, r1
 8000da2:	601a      	str	r2, [r3, #0]
	GPIOA->MODER |=  (2<< 2*6) ;
 8000da4:	23a0      	movs	r3, #160	; 0xa0
 8000da6:	05db      	lsls	r3, r3, #23
 8000da8:	681a      	ldr	r2, [r3, #0]
 8000daa:	23a0      	movs	r3, #160	; 0xa0
 8000dac:	05db      	lsls	r3, r3, #23
 8000dae:	2180      	movs	r1, #128	; 0x80
 8000db0:	0189      	lsls	r1, r1, #6
 8000db2:	430a      	orrs	r2, r1
 8000db4:	601a      	str	r2, [r3, #0]

	GPIOA->AFR[0]  &= ~(0xFU<<4*6);
 8000db6:	23a0      	movs	r3, #160	; 0xa0
 8000db8:	05db      	lsls	r3, r3, #23
 8000dba:	6a1a      	ldr	r2, [r3, #32]
 8000dbc:	23a0      	movs	r3, #160	; 0xa0
 8000dbe:	05db      	lsls	r3, r3, #23
 8000dc0:	4935      	ldr	r1, [pc, #212]	; (8000e98 <TIM3_Config+0x114>)
 8000dc2:	400a      	ands	r2, r1
 8000dc4:	621a      	str	r2, [r3, #32]
	GPIOA->AFR[0]  |=  (1<<4*6);
 8000dc6:	23a0      	movs	r3, #160	; 0xa0
 8000dc8:	05db      	lsls	r3, r3, #23
 8000dca:	6a1a      	ldr	r2, [r3, #32]
 8000dcc:	23a0      	movs	r3, #160	; 0xa0
 8000dce:	05db      	lsls	r3, r3, #23
 8000dd0:	2180      	movs	r1, #128	; 0x80
 8000dd2:	0449      	lsls	r1, r1, #17
 8000dd4:	430a      	orrs	r2, r1
 8000dd6:	621a      	str	r2, [r3, #32]

	RCC->APBENR1 |= RCC_APBENR1_TIM3EN; // Timer 3 clock enable
 8000dd8:	4b2d      	ldr	r3, [pc, #180]	; (8000e90 <TIM3_Config+0x10c>)
 8000dda:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000ddc:	4b2c      	ldr	r3, [pc, #176]	; (8000e90 <TIM3_Config+0x10c>)
 8000dde:	2102      	movs	r1, #2
 8000de0:	430a      	orrs	r2, r1
 8000de2:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM3->CR1 = 0;
 8000de4:	4b2d      	ldr	r3, [pc, #180]	; (8000e9c <TIM3_Config+0x118>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	601a      	str	r2, [r3, #0]
	TIM3->CR1 |= TIM_CR1_ARPE; // Auto-reload preload enable
 8000dea:	4b2c      	ldr	r3, [pc, #176]	; (8000e9c <TIM3_Config+0x118>)
 8000dec:	681a      	ldr	r2, [r3, #0]
 8000dee:	4b2b      	ldr	r3, [pc, #172]	; (8000e9c <TIM3_Config+0x118>)
 8000df0:	2180      	movs	r1, #128	; 0x80
 8000df2:	430a      	orrs	r2, r1
 8000df4:	601a      	str	r2, [r3, #0]
	TIM3->CNT = 0; // zero out counter
 8000df6:	4b29      	ldr	r3, [pc, #164]	; (8000e9c <TIM3_Config+0x118>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	625a      	str	r2, [r3, #36]	; 0x24

	// tim uptade frequency = TIM_CLK/((TIM_PSC+1)*TIM_ARR) for 1 s interrupt
	TIM3->PSC = 10;
 8000dfc:	4b27      	ldr	r3, [pc, #156]	; (8000e9c <TIM3_Config+0x118>)
 8000dfe:	220a      	movs	r2, #10
 8000e00:	629a      	str	r2, [r3, #40]	; 0x28
	TIM3->ARR = (16000);
 8000e02:	4b26      	ldr	r3, [pc, #152]	; (8000e9c <TIM3_Config+0x118>)
 8000e04:	22fa      	movs	r2, #250	; 0xfa
 8000e06:	0192      	lsls	r2, r2, #6
 8000e08:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM3->DIER |= TIM_DIER_UIE; // Update interrupt enable
 8000e0a:	4b24      	ldr	r3, [pc, #144]	; (8000e9c <TIM3_Config+0x118>)
 8000e0c:	68da      	ldr	r2, [r3, #12]
 8000e0e:	4b23      	ldr	r3, [pc, #140]	; (8000e9c <TIM3_Config+0x118>)
 8000e10:	2101      	movs	r1, #1
 8000e12:	430a      	orrs	r2, r1
 8000e14:	60da      	str	r2, [r3, #12]
	TIM3->CCMR1 |= TIM_CCMR1_OC1PE; // Output Compare 1 Preload Enable
 8000e16:	4b21      	ldr	r3, [pc, #132]	; (8000e9c <TIM3_Config+0x118>)
 8000e18:	699a      	ldr	r2, [r3, #24]
 8000e1a:	4b20      	ldr	r3, [pc, #128]	; (8000e9c <TIM3_Config+0x118>)
 8000e1c:	2108      	movs	r1, #8
 8000e1e:	430a      	orrs	r2, r1
 8000e20:	619a      	str	r2, [r3, #24]

	// PWM mode 1 is selected.
	TIM3->CCMR1 &= ~ (1u<<16); //0
 8000e22:	4b1e      	ldr	r3, [pc, #120]	; (8000e9c <TIM3_Config+0x118>)
 8000e24:	699a      	ldr	r2, [r3, #24]
 8000e26:	4b1d      	ldr	r3, [pc, #116]	; (8000e9c <TIM3_Config+0x118>)
 8000e28:	491d      	ldr	r1, [pc, #116]	; (8000ea0 <TIM3_Config+0x11c>)
 8000e2a:	400a      	ands	r2, r1
 8000e2c:	619a      	str	r2, [r3, #24]
	TIM3->CCMR1 |=(1u<<6); //1
 8000e2e:	4b1b      	ldr	r3, [pc, #108]	; (8000e9c <TIM3_Config+0x118>)
 8000e30:	699a      	ldr	r2, [r3, #24]
 8000e32:	4b1a      	ldr	r3, [pc, #104]	; (8000e9c <TIM3_Config+0x118>)
 8000e34:	2140      	movs	r1, #64	; 0x40
 8000e36:	430a      	orrs	r2, r1
 8000e38:	619a      	str	r2, [r3, #24]
	TIM3->CCMR1 |= (1u<<5); //1
 8000e3a:	4b18      	ldr	r3, [pc, #96]	; (8000e9c <TIM3_Config+0x118>)
 8000e3c:	699a      	ldr	r2, [r3, #24]
 8000e3e:	4b17      	ldr	r3, [pc, #92]	; (8000e9c <TIM3_Config+0x118>)
 8000e40:	2120      	movs	r1, #32
 8000e42:	430a      	orrs	r2, r1
 8000e44:	619a      	str	r2, [r3, #24]
	TIM3->CCMR1 &= ~(1u<<4);  // 0
 8000e46:	4b15      	ldr	r3, [pc, #84]	; (8000e9c <TIM3_Config+0x118>)
 8000e48:	699a      	ldr	r2, [r3, #24]
 8000e4a:	4b14      	ldr	r3, [pc, #80]	; (8000e9c <TIM3_Config+0x118>)
 8000e4c:	2110      	movs	r1, #16
 8000e4e:	438a      	bics	r2, r1
 8000e50:	619a      	str	r2, [r3, #24]
	TIM3->CCER |= TIM_CCER_CC1E; // Capture compare ch1 enable
 8000e52:	4b12      	ldr	r3, [pc, #72]	; (8000e9c <TIM3_Config+0x118>)
 8000e54:	6a1a      	ldr	r2, [r3, #32]
 8000e56:	4b11      	ldr	r3, [pc, #68]	; (8000e9c <TIM3_Config+0x118>)
 8000e58:	2101      	movs	r1, #1
 8000e5a:	430a      	orrs	r2, r1
 8000e5c:	621a      	str	r2, [r3, #32]
	TIM3->CCR1 = 0;
 8000e5e:	4b0f      	ldr	r3, [pc, #60]	; (8000e9c <TIM3_Config+0x118>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	635a      	str	r2, [r3, #52]	; 0x34

	// Update Generation: Re-initialize the counter and generates an update of the registers.
	TIM3->EGR |= TIM_EGR_UG;
 8000e64:	4b0d      	ldr	r3, [pc, #52]	; (8000e9c <TIM3_Config+0x118>)
 8000e66:	695a      	ldr	r2, [r3, #20]
 8000e68:	4b0c      	ldr	r3, [pc, #48]	; (8000e9c <TIM3_Config+0x118>)
 8000e6a:	2101      	movs	r1, #1
 8000e6c:	430a      	orrs	r2, r1
 8000e6e:	615a      	str	r2, [r3, #20]

	TIM3->CR1 |= TIM_CR1_CEN; // TIM3 Counter enable
 8000e70:	4b0a      	ldr	r3, [pc, #40]	; (8000e9c <TIM3_Config+0x118>)
 8000e72:	681a      	ldr	r2, [r3, #0]
 8000e74:	4b09      	ldr	r3, [pc, #36]	; (8000e9c <TIM3_Config+0x118>)
 8000e76:	2101      	movs	r1, #1
 8000e78:	430a      	orrs	r2, r1
 8000e7a:	601a      	str	r2, [r3, #0]

	NVIC_SetPriority(TIM3_IRQn,3);  // Setting Priority for timer handler
 8000e7c:	2103      	movs	r1, #3
 8000e7e:	2010      	movs	r0, #16
 8000e80:	f7ff f9e6 	bl	8000250 <__NVIC_SetPriority>
	NVIC_EnableIRQ(TIM3_IRQn); // timer handler enable
 8000e84:	2010      	movs	r0, #16
 8000e86:	f7ff f9c9 	bl	800021c <__NVIC_EnableIRQ>
}
 8000e8a:	46c0      	nop			; (mov r8, r8)
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	40021000 	.word	0x40021000
 8000e94:	ffffcfff 	.word	0xffffcfff
 8000e98:	f0ffffff 	.word	0xf0ffffff
 8000e9c:	40000400 	.word	0x40000400
 8000ea0:	fffeffff 	.word	0xfffeffff

08000ea4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ea8:	e7fe      	b.n	8000ea8 <NMI_Handler+0x4>

08000eaa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000eaa:	b580      	push	{r7, lr}
 8000eac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000eae:	e7fe      	b.n	8000eae <HardFault_Handler+0x4>

08000eb0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000eb4:	46c0      	nop			; (mov r8, r8)
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}

08000eba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000eba:	b580      	push	{r7, lr}
 8000ebc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ebe:	46c0      	nop			; (mov r8, r8)
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}

08000ec4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ec8:	f000 f832 	bl	8000f30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ecc:	46c0      	nop			; (mov r8, r8)
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}

08000ed2 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ed2:	b580      	push	{r7, lr}
 8000ed4:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ed6:	46c0      	nop			; (mov r8, r8)
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}

08000edc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000edc:	480d      	ldr	r0, [pc, #52]	; (8000f14 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000ede:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000ee0:	f7ff fff7 	bl	8000ed2 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ee4:	480c      	ldr	r0, [pc, #48]	; (8000f18 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ee6:	490d      	ldr	r1, [pc, #52]	; (8000f1c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ee8:	4a0d      	ldr	r2, [pc, #52]	; (8000f20 <LoopForever+0xe>)
  movs r3, #0
 8000eea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000eec:	e002      	b.n	8000ef4 <LoopCopyDataInit>

08000eee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000eee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ef0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ef2:	3304      	adds	r3, #4

08000ef4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ef4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ef6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ef8:	d3f9      	bcc.n	8000eee <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000efa:	4a0a      	ldr	r2, [pc, #40]	; (8000f24 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000efc:	4c0a      	ldr	r4, [pc, #40]	; (8000f28 <LoopForever+0x16>)
  movs r3, #0
 8000efe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f00:	e001      	b.n	8000f06 <LoopFillZerobss>

08000f02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f04:	3204      	adds	r2, #4

08000f06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f08:	d3fb      	bcc.n	8000f02 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000f0a:	f000 f823 	bl	8000f54 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000f0e:	f7ff fa0d 	bl	800032c <main>

08000f12 <LoopForever>:

LoopForever:
  b LoopForever
 8000f12:	e7fe      	b.n	8000f12 <LoopForever>
  ldr   r0, =_estack
 8000f14:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000f18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f1c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000f20:	08000fbc 	.word	0x08000fbc
  ldr r2, =_sbss
 8000f24:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000f28:	20000048 	.word	0x20000048

08000f2c <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f2c:	e7fe      	b.n	8000f2c <ADC1_IRQHandler>
	...

08000f30 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f34:	4b05      	ldr	r3, [pc, #20]	; (8000f4c <HAL_IncTick+0x1c>)
 8000f36:	781b      	ldrb	r3, [r3, #0]
 8000f38:	001a      	movs	r2, r3
 8000f3a:	4b05      	ldr	r3, [pc, #20]	; (8000f50 <HAL_IncTick+0x20>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	18d2      	adds	r2, r2, r3
 8000f40:	4b03      	ldr	r3, [pc, #12]	; (8000f50 <HAL_IncTick+0x20>)
 8000f42:	601a      	str	r2, [r3, #0]
}
 8000f44:	46c0      	nop			; (mov r8, r8)
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	46c0      	nop			; (mov r8, r8)
 8000f4c:	20000008 	.word	0x20000008
 8000f50:	20000044 	.word	0x20000044

08000f54 <__libc_init_array>:
 8000f54:	b570      	push	{r4, r5, r6, lr}
 8000f56:	2600      	movs	r6, #0
 8000f58:	4c0c      	ldr	r4, [pc, #48]	; (8000f8c <__libc_init_array+0x38>)
 8000f5a:	4d0d      	ldr	r5, [pc, #52]	; (8000f90 <__libc_init_array+0x3c>)
 8000f5c:	1b64      	subs	r4, r4, r5
 8000f5e:	10a4      	asrs	r4, r4, #2
 8000f60:	42a6      	cmp	r6, r4
 8000f62:	d109      	bne.n	8000f78 <__libc_init_array+0x24>
 8000f64:	2600      	movs	r6, #0
 8000f66:	f000 f819 	bl	8000f9c <_init>
 8000f6a:	4c0a      	ldr	r4, [pc, #40]	; (8000f94 <__libc_init_array+0x40>)
 8000f6c:	4d0a      	ldr	r5, [pc, #40]	; (8000f98 <__libc_init_array+0x44>)
 8000f6e:	1b64      	subs	r4, r4, r5
 8000f70:	10a4      	asrs	r4, r4, #2
 8000f72:	42a6      	cmp	r6, r4
 8000f74:	d105      	bne.n	8000f82 <__libc_init_array+0x2e>
 8000f76:	bd70      	pop	{r4, r5, r6, pc}
 8000f78:	00b3      	lsls	r3, r6, #2
 8000f7a:	58eb      	ldr	r3, [r5, r3]
 8000f7c:	4798      	blx	r3
 8000f7e:	3601      	adds	r6, #1
 8000f80:	e7ee      	b.n	8000f60 <__libc_init_array+0xc>
 8000f82:	00b3      	lsls	r3, r6, #2
 8000f84:	58eb      	ldr	r3, [r5, r3]
 8000f86:	4798      	blx	r3
 8000f88:	3601      	adds	r6, #1
 8000f8a:	e7f2      	b.n	8000f72 <__libc_init_array+0x1e>
 8000f8c:	08000fb4 	.word	0x08000fb4
 8000f90:	08000fb4 	.word	0x08000fb4
 8000f94:	08000fb8 	.word	0x08000fb8
 8000f98:	08000fb4 	.word	0x08000fb4

08000f9c <_init>:
 8000f9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f9e:	46c0      	nop			; (mov r8, r8)
 8000fa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000fa2:	bc08      	pop	{r3}
 8000fa4:	469e      	mov	lr, r3
 8000fa6:	4770      	bx	lr

08000fa8 <_fini>:
 8000fa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000faa:	46c0      	nop			; (mov r8, r8)
 8000fac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000fae:	bc08      	pop	{r3}
 8000fb0:	469e      	mov	lr, r3
 8000fb2:	4770      	bx	lr
